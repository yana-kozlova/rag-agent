"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk+openai@2.0.53_zod@3.25.76";
exports.ids = ["vendor-chunks/@ai-sdk+openai@2.0.53_zod@3.25.76"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@ai-sdk+openai@2.0.53_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+openai@2.0.53_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.12_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/coerce.js\");\n// src/openai-provider.ts\n\n\n// src/chat/openai-chat-language-model.ts\n\n\n\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/chat/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = \"system\"\n}) {\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && content[0].type === \"text\") {\n          messages.push({ role: \"user\", content: content[0].text });\n          break;\n        }\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a, _b, _c;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url: part.data instanceof URL ? part.data.toString() : `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`,\n                      // OpenAI specific extension: image detail\n                      detail: (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.imageDetail\n                    }\n                  };\n                } else if (part.mediaType.startsWith(\"audio/\")) {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"audio file parts with URLs\"\n                    });\n                  }\n                  switch (part.mediaType) {\n                    case \"audio/wav\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"wav\"\n                        }\n                      };\n                    }\n                    case \"audio/mp3\":\n                    case \"audio/mpeg\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"mp3\"\n                        }\n                      };\n                    }\n                    default: {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`\n                      });\n                    }\n                  }\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"PDF file parts with URLs\"\n                    });\n                  }\n                  return {\n                    type: \"file\",\n                    file: typeof part.data === \"string\" && part.data.startsWith(\"file-\") ? { file_id: part.data } : {\n                      filename: (_c = part.filename) != null ? _c : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\n\n// src/chat/get-response-metadata.ts\nfunction getResponseMetadata({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/chat/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/openai-chat-api.ts\n\n\nvar openaiChatResponseSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\").nullish(),\n            content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n                function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                })\n              })\n            ).nullish(),\n            annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              })\n            ).nullish()\n          }),\n          index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                  })\n                )\n              })\n            ).nullish()\n          }).nullish(),\n          finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n        })\n      ),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n        }).nullish(),\n        completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n          accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n          rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n        }).nullish()\n      }).nullish()\n    })\n  )\n);\nvar openaiChatChunkSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              role: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"assistant\"]).nullish(),\n              content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n              tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\").nullish(),\n                  function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                    arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n                  })\n                })\n              ).nullish(),\n              annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                  start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                  end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                  url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                })\n              ).nullish()\n            }).nullish(),\n            logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                  top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                      token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                    })\n                  )\n                })\n              ).nullish()\n            }).nullish(),\n            finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          })\n        ),\n        usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n          completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n          total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n          prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n          }).nullish(),\n          completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n            accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n            rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n          }).nullish()\n        }).nullish()\n      }),\n      openaiErrorDataSchema\n    ])\n  )\n);\n\n// src/chat/openai-chat-options.ts\n\n\nvar openaiChatLanguageModelOptions = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      /**\n       * Modify the likelihood of specified tokens appearing in the completion.\n       *\n       * Accepts a JSON object that maps tokens (specified by their token ID in\n       * the GPT tokenizer) to an associated bias value from -100 to 100.\n       */\n      logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_3__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n      /**\n       * Return the log probabilities of the tokens.\n       *\n       * Setting to true will return the log probabilities of the tokens that\n       * were generated.\n       *\n       * Setting to a number will return the log probabilities of the top n\n       * tokens that were generated.\n       */\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional(),\n      /**\n       * Whether to enable parallel function calling during tool use. Default to true.\n       */\n      parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n      /**\n       * A unique identifier representing your end-user, which can help OpenAI to\n       * monitor and detect abuse.\n       */\n      user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n       * Reasoning effort for reasoning models. Defaults to `medium`.\n       */\n      reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"minimal\", \"low\", \"medium\", \"high\"]).optional(),\n      /**\n       * Maximum number of completion tokens to generate. Useful for reasoning models.\n       */\n      maxCompletionTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n      /**\n       * Whether to enable persistence in responses API.\n       */\n      store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n      /**\n       * Metadata to associate with the request.\n       */\n      metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(64), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(512)).optional(),\n      /**\n       * Parameters for prediction mode.\n       */\n      prediction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()).optional(),\n      /**\n       * Whether to use structured outputs.\n       *\n       * @default true\n       */\n      structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n      /**\n       * Service tier for the request.\n       * - 'auto': Default service tier. The request will be processed with the service tier configured in the\n       *           Project settings. Unless otherwise configured, the Project will use 'default'.\n       * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n       * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n       * - 'default': The request will be processed with the standard pricing and performance for the selected model.\n       *\n       * @default 'auto'\n       */\n      serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\", \"default\"]).optional(),\n      /**\n       * Whether to use strict JSON schema validation.\n       *\n       * @default false\n       */\n      strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n      /**\n       * Controls the verbosity of the model's responses.\n       * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n       */\n      textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n      /**\n       * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n       * Useful for improving cache hit rates and working around automatic caching issues.\n       */\n      promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n       * A stable identifier used to help detect users of your application\n       * that may be violating OpenAI's usage policies. The IDs should be a\n       * string that uniquely identifies each user. We recommend hashing their\n       * username or email address, in order to avoid sending us any identifying\n       * information.\n       */\n      safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n    })\n  )\n);\n\n// src/chat/openai-chat-prepare-tools.ts\n\nfunction prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : void 0\n          }\n        });\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: {\n          type: \"function\",\n          function: {\n            name: toolChoice.toolName\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/chat/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiChatLanguageModelOptions\n    })) != null ? _a : {};\n    const structuredOutputs = (_b = openaiOptions.structuredOutputs) != null ? _b : true;\n    if (topK != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !structuredOutputs) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format schema is only supported with structuredOutputs\"\n      });\n    }\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId)\n      }\n    );\n    warnings.push(...messageWarnings);\n    const strictJsonSchema = (_c = openaiOptions.strictJsonSchema) != null ? _c : false;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs: openaiOptions.logprobs === true || typeof openaiOptions.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof openaiOptions.logprobs === \"number\" ? openaiOptions.logprobs : typeof openaiOptions.logprobs === \"boolean\" ? openaiOptions.logprobs ? 0 : void 0 : void 0,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? structuredOutputs && responseFormat.schema != null ? {\n        type: \"json_schema\",\n        json_schema: {\n          schema: responseFormat.schema,\n          strict: strictJsonSchema,\n          name: (_d = responseFormat.name) != null ? _d : \"response\",\n          description: responseFormat.description\n        }\n      } : { type: \"json_object\" } : void 0,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n      // messages:\n      messages\n    };\n    if (isReasoningModel(this.modelId)) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"frequencyPenalty\",\n          details: \"frequencyPenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"presencePenalty\",\n          details: \"presencePenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logitBias is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"topLogprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = void 0;\n      }\n    } else if (this.modelId.startsWith(\"gpt-4o-search-preview\") || this.modelId.startsWith(\"gpt-4o-mini-search-preview\")) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for the search preview models and has been removed.\"\n        });\n      }\n    }\n    if (openaiOptions.serviceTier === \"flex\" && !supportsFlexProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    if (openaiOptions.serviceTier === \"priority\" && !supportsPriorityProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema\n    });\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const { args: body, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiChatResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const content = [];\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: \"text\", text });\n    }\n    for (const toolCall of (_a = choice.message.tool_calls) != null ? _a : []) {\n      content.push({\n        type: \"tool-call\",\n        toolCallId: (_b = toolCall.id) != null ? _b : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments\n      });\n    }\n    for (const annotation of (_c = choice.message.annotations) != null ? _c : []) {\n      content.push({\n        type: \"source\",\n        sourceType: \"url\",\n        id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        url: annotation.url,\n        title: annotation.title\n      });\n    }\n    const completionTokenDetails = (_d = response.usage) == null ? void 0 : _d.completion_tokens_details;\n    const promptTokenDetails = (_e = response.usage) == null ? void 0 : _e.prompt_tokens_details;\n    const providerMetadata = { openai: {} };\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n    }\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n    }\n    if (((_f = choice.logprobs) == null ? void 0 : _f.content) != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_h = (_g = response.usage) == null ? void 0 : _g.prompt_tokens) != null ? _h : void 0,\n        outputTokens: (_j = (_i = response.usage) == null ? void 0 : _i.completion_tokens) != null ? _j : void 0,\n        totalTokens: (_l = (_k = response.usage) == null ? void 0 : _k.total_tokens) != null ? _l : void 0,\n        reasoningTokens: (_m = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null ? _m : void 0,\n        cachedInputTokens: (_n = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null ? _n : void 0\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiChatChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n    const providerMetadata = { openai: {} };\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata(value)\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = (_a = value.usage.prompt_tokens) != null ? _a : void 0;\n              usage.outputTokens = (_b = value.usage.completion_tokens) != null ? _b : void 0;\n              usage.totalTokens = (_c = value.usage.total_tokens) != null ? _c : void 0;\n              usage.reasoningTokens = (_e = (_d = value.usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : void 0;\n              usage.cachedInputTokens = (_g = (_f = value.usage.prompt_tokens_details) == null ? void 0 : _f.cached_tokens) != null ? _g : void 0;\n              if (((_h = value.usage.completion_tokens_details) == null ? void 0 : _h.accepted_prediction_tokens) != null) {\n                providerMetadata.openai.acceptedPredictionTokens = (_i = value.usage.completion_tokens_details) == null ? void 0 : _i.accepted_prediction_tokens;\n              }\n              if (((_j = value.usage.completion_tokens_details) == null ? void 0 : _j.rejected_prediction_tokens) != null) {\n                providerMetadata.openai.rejectedPredictionTokens = (_k = value.usage.completion_tokens_details) == null ? void 0 : _k.rejected_prediction_tokens;\n              }\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n            if (((_l = choice == null ? void 0 : choice.logprobs) == null ? void 0 : _l.content) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: \"text-start\", id: \"0\" });\n                isActiveText = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: delta.content\n              });\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_m = toolCallDelta.function) == null ? void 0 : _m.name) == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name\n                  });\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_n = toolCallDelta.function.arguments) != null ? _n : \"\"\n                    },\n                    hasFinished: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (((_o = toolCall2.function) == null ? void 0 : _o.name) != null && ((_p = toolCall2.function) == null ? void 0 : _p.arguments) != null) {\n                    if (toolCall2.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: toolCall2.id,\n                        delta: toolCall2.function.arguments\n                      });\n                    }\n                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall2.function.arguments)) {\n                      controller.enqueue({\n                        type: \"tool-input-end\",\n                        id: toolCall2.id\n                      });\n                      controller.enqueue({\n                        type: \"tool-call\",\n                        toolCallId: (_q = toolCall2.id) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                        toolName: toolCall2.function.name,\n                        input: toolCall2.function.arguments\n                      });\n                      toolCall2.hasFinished = true;\n                    }\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n                if (((_r = toolCallDelta.function) == null ? void 0 : _r.arguments) != null) {\n                  toolCall.function.arguments += (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_u = toolCallDelta.function.arguments) != null ? _u : \"\"\n                });\n                if (((_v = toolCall.function) == null ? void 0 : _v.name) != null && ((_w = toolCall.function) == null ? void 0 : _w.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.id\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_x = toolCall.id) != null ? _x : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              }\n            }\n          },\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata != null ? { providerMetadata } : {}\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nfunction isReasoningModel(modelId) {\n  return (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\")) && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsFlexProcessing(modelId) {\n  return modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsPriorityProcessing(modelId) {\n  return modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n}\nfunction getSystemMessageMode(modelId) {\n  var _a, _b;\n  if (!isReasoningModel(modelId)) {\n    return \"system\";\n  }\n  return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n  \"o1-mini\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-mini-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  o3: {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini-2025-01-31\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  }\n};\n\n// src/completion/openai-completion-language-model.ts\n\n\n// src/completion/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({\n  prompt,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  let text = \"\";\n  if (prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidPromptError({\n          message: \"Unexpected system message in prompt: ${content}\",\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n          }\n        }).filter(Boolean).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"tool-call\": {\n              throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                functionality: \"tool-call messages\"\n              });\n            }\n          }\n        }).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text,\n    stopSequences: [`\n${user}:`]\n  };\n}\n\n// src/completion/get-response-metadata.ts\nfunction getResponseMetadata2({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/completion/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason2(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/completion/openai-completion-api.ts\n\n\nvar openaiCompletionResponseSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n            token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n          }).nullish()\n        })\n      ),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      }).nullish()\n    })\n  )\n);\nvar openaiCompletionChunkSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n              token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n            }).nullish()\n          })\n        ),\n        usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n        }).nullish()\n      }),\n      openaiErrorDataSchema\n    ])\n  )\n);\n\n// src/completion/openai-completion-options.ts\n\n\nvar openaiCompletionProviderOptions = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      /**\n      Echo back the prompt in addition to the completion.\n         */\n      echo: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n      /**\n      Modify the likelihood of specified tokens appearing in the completion.\n      \n      Accepts a JSON object that maps tokens (specified by their token ID in\n      the GPT tokenizer) to an associated bias value from -100 to 100. You\n      can use this tokenizer tool to convert text to token IDs. Mathematically,\n      the bias is added to the logits generated by the model prior to sampling.\n      The exact effect will vary per model, but values between -1 and 1 should\n      decrease or increase likelihood of selection; values like -100 or 100\n      should result in a ban or exclusive selection of the relevant token.\n      \n      As an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\n      token from being generated.\n       */\n      logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n      /**\n      The suffix that comes after a completion of inserted text.\n       */\n      suffix: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n      A unique identifier representing your end-user, which can help OpenAI to\n      monitor and detect abuse. Learn more.\n       */\n      user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n      Return the log probabilities of the tokens. Including logprobs will increase\n      the response size and can slow down response times. However, it can\n      be useful to better understand how the model is behaving.\n      Setting to true will return the log probabilities of the tokens that\n      were generated.\n      Setting to a number will return the log probabilities of the top n\n      tokens that were generated.\n         */\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional()\n    })\n  )\n);\n\n// src/completion/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      // No URLs are supported for completion models.\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get providerOptionsName() {\n    return this.config.provider.split(\".\")[0].trim();\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openaiOptions = {\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: \"openai\",\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      }),\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      })\n    };\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (tools == null ? void 0 : tools.length) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"tools\" });\n    }\n    if (toolChoice != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"toolChoice\" });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format is not supported.\"\n      });\n    }\n    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt });\n    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs: (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? 0 : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === false ? void 0 : openaiOptions == null ? void 0 : openaiOptions.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n        // prompt:\n        prompt: completionPrompt,\n        // stop sequences:\n        stop: stop.length > 0 ? stop : void 0\n      },\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const { args, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const providerMetadata = { openai: {} };\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n    return {\n      content: [{ type: \"text\", text: choice.text }],\n      usage: {\n        inputTokens: (_a = response.usage) == null ? void 0 : _a.prompt_tokens,\n        outputTokens: (_b = response.usage) == null ? void 0 : _b.completion_tokens,\n        totalTokens: (_c = response.usage) == null ? void 0 : _c.total_tokens\n      },\n      finishReason: mapOpenAIFinishReason2(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata2(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const providerMetadata = { openai: {} };\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata2(value)\n              });\n              controller.enqueue({ type: \"text-start\", id: \"0\" });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason2(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.logprobs) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n            if ((choice == null ? void 0 : choice.text) != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: choice.text\n              });\n            }\n          },\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              providerMetadata,\n              usage\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\n\n// src/embedding/openai-embedding-model.ts\n\n\n\n// src/embedding/openai-embedding-options.ts\n\n\nvar openaiEmbeddingProviderOptions = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      /**\n      The number of dimensions the resulting output embeddings should have.\n      Only supported in text-embedding-3 and later models.\n         */\n      dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n      /**\n      A unique identifier representing your end-user, which can help OpenAI to\n      monitor and detect abuse. Learn more.\n      */\n      user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n    })\n  )\n);\n\n// src/embedding/openai-embedding-api.ts\n\n\nvar openaiTextEmbeddingResponseSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish()\n    })\n  )\n);\n\n// src/embedding/openai-embedding-model.ts\nvar OpenAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/embeddings\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: \"float\",\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.data.map((item) => item.embedding),\n      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\n\n// src/image/openai-image-model.ts\n\n\n// src/image/openai-image-api.ts\n\n\nvar openaiImageResponseSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          b64_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          revised_prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        })\n      )\n    })\n  )\n);\n\n// src/image/openai-image-options.ts\nvar modelMaxImagesPerCall = {\n  \"dall-e-3\": 1,\n  \"dall-e-2\": 10,\n  \"gpt-image-1\": 10,\n  \"gpt-image-1-mini\": 10\n};\nvar hasDefaultResponseFormat = /* @__PURE__ */ new Set([\n  \"gpt-image-1\",\n  \"gpt-image-1-mini\"\n]);\n\n// src/image/openai-image-model.ts\nvar OpenAIImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    if (aspectRatio != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/images/generations\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(_d = providerOptions.openai) != null ? _d : {},\n        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: \"b64_json\" } : {}\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.data.map((item) => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(\n            (item) => item.revised_prompt ? {\n              revisedPrompt: item.revised_prompt\n            } : null\n          )\n        }\n      }\n    };\n  }\n};\n\n// src/tool/code-interpreter.ts\n\n\nvar codeInterpreterInputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      containerId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  )\n);\nvar codeInterpreterOutputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n        ])\n      ).nullish()\n    })\n  )\n);\nvar codeInterpreterArgsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      container: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          fileIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n        })\n      ]).optional()\n    })\n  )\n);\nvar codeInterpreterToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.code_interpreter\",\n  name: \"code_interpreter\",\n  inputSchema: codeInterpreterInputSchema,\n  outputSchema: codeInterpreterOutputSchema\n});\nvar codeInterpreter = (args = {}) => {\n  return codeInterpreterToolFactory(args);\n};\n\n// src/tool/file-search.ts\n\n\nvar comparisonFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"eq\", \"ne\", \"gt\", \"gte\", \"lt\", \"lte\"]),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()])\n});\nvar compoundFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"and\", \"or\"]),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, zod_v4__WEBPACK_IMPORTED_MODULE_0__.lazy(() => compoundFilterSchema)])\n  )\n});\nvar fileSearchArgsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      vectorStoreIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n      maxNumResults: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n      ranking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        ranker: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        scoreThreshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n      }).optional(),\n      filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, compoundFilterSchema]).optional()\n    })\n  )\n);\nvar fileSearchOutputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n      results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n          fileId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n      ).nullable()\n    })\n  )\n);\nvar fileSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.file_search\",\n  name: \"file_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}),\n  outputSchema: fileSearchOutputSchema\n});\n\n// src/tool/image-generation.ts\n\n\nvar imageGenerationArgsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      background: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"opaque\", \"transparent\"]).optional(),\n      inputFidelity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"high\"]).optional(),\n      inputImageMask: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        fileId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        imageUrl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).optional(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      moderation: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\"]).optional(),\n      outputCompression: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().min(0).max(100).optional(),\n      outputFormat: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"png\", \"jpeg\", \"webp\"]).optional(),\n      partialImages: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().min(0).max(3).optional(),\n      quality: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"low\", \"medium\", \"high\"]).optional(),\n      size: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"1024x1024\", \"1024x1536\", \"1536x1024\", \"auto\"]).optional()\n    }).strict()\n  )\n);\nvar imageGenerationInputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(() => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})));\nvar imageGenerationOutputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }))\n);\nvar imageGenerationToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.image_generation\",\n  name: \"image_generation\",\n  inputSchema: imageGenerationInputSchema,\n  outputSchema: imageGenerationOutputSchema\n});\nvar imageGeneration = (args = {}) => {\n  return imageGenerationToolFactory(args);\n};\n\n// src/tool/local-shell.ts\n\n\nvar localShellInputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"exec\"),\n        command: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n        timeoutMs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n        user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        workingDirectory: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        env: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n      })\n    })\n  )\n);\nvar localShellOutputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }))\n);\nvar localShell = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.local_shell\",\n  name: \"local_shell\",\n  inputSchema: localShellInputSchema,\n  outputSchema: localShellOutputSchema\n});\n\n// src/tool/web-search.ts\n\n\nvar webSearchArgsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional() }).optional(),\n      searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n      userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n        country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).optional()\n    })\n  )\n);\nvar webSearchInputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(() => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({})));\nvar webSearchOutputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n          query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        }),\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"openPage\"),\n          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        }),\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n      ])\n    })\n  )\n);\nvar webSearchToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.web_search\",\n  name: \"web_search\",\n  inputSchema: webSearchInputSchema,\n  outputSchema: webSearchOutputSchema\n});\nvar webSearch = (args = {}) => webSearchToolFactory(args);\n\n// src/tool/web-search-preview.ts\n\n\nvar webSearchPreviewArgsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n      userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n        country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).optional()\n    })\n  )\n);\nvar webSearchPreviewInputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}))\n);\nvar webSearchPreviewOutputSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazySchema)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n          query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n        }),\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"openPage\"),\n          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        }),\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n        })\n      ])\n    })\n  )\n);\nvar webSearchPreview = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.web_search_preview\",\n  name: \"web_search_preview\",\n  inputSchema: webSearchPreviewInputSchema,\n  outputSchema: webSearchPreviewOutputSchema\n});\n\n// src/openai-tools.ts\nvar openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n  /**\n   * The image generation tool allows you to generate images using a text prompt,\n   * and optionally image inputs. It leverages the GPT Image model,\n   * and automatically optimizes text inputs for improved performance.\n   *\n   * Must have name `image_generation`.\n   *\n   * @param size - Image dimensions (e.g., 1024x1024, 1024x1536)\n   * @param quality - Rendering quality (e.g. low, medium, high)\n   * @param format - File output format\n   * @param compression - Compression level (0-100%) for JPEG and WebP formats\n   * @param background - Transparent or opaque\n   */\n  imageGeneration,\n  /**\n   * Local shell is a tool that allows agents to run shell commands locally\n   * on a machine you or the user provides.\n   *\n   * Supported models: `gpt-5-codex` and `codex-mini-latest`\n   *\n   * Must have name `local_shell`.\n   */\n  localShell,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch\n};\n\n// src/responses/openai-responses-language-model.ts\n\n\n\n// src/responses/convert-to-openai-responses-input.ts\n\n\n\nfunction isFileId(data, prefixes) {\n  if (!prefixes) return false;\n  return prefixes.some((prefix) => data.startsWith(prefix));\n}\nasync function convertToOpenAIResponsesInput({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes,\n  store,\n  hasLocalShellTool = false\n}) {\n  var _a, _b, _c, _d;\n  const input = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            input.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            input.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        input.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a2, _b2, _c2;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"input_text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"input_image\",\n                    ...part.data instanceof URL ? { image_url: part.data.toString() } : typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      image_url: `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    },\n                    detail: (_b2 = (_a2 = part.providerOptions) == null ? void 0 : _a2.openai) == null ? void 0 : _b2.imageDetail\n                  };\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: \"input_file\",\n                      file_url: part.data.toString()\n                    };\n                  }\n                  return {\n                    type: \"input_file\",\n                    ...typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      filename: (_c2 = part.filename) != null ? _c2 : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        const reasoningMessages = {};\n        const toolCallParts = {};\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              const id = (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.itemId;\n              if (store && id != null) {\n                input.push({ type: \"item_reference\", id });\n                break;\n              }\n              input.push({\n                role: \"assistant\",\n                content: [{ type: \"output_text\", text: part.text }],\n                id\n              });\n              break;\n            }\n            case \"tool-call\": {\n              toolCallParts[part.toolCallId] = part;\n              if (part.providerExecuted) {\n                break;\n              }\n              const id = (_d = (_c = part.providerOptions) == null ? void 0 : _c.openai) == null ? void 0 : _d.itemId;\n              if (store && id != null) {\n                input.push({ type: \"item_reference\", id });\n                break;\n              }\n              if (hasLocalShellTool && part.toolName === \"local_shell\") {\n                const parsedInput = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n                  value: part.input,\n                  schema: localShellInputSchema\n                });\n                input.push({\n                  type: \"local_shell_call\",\n                  call_id: part.toolCallId,\n                  id,\n                  action: {\n                    type: \"exec\",\n                    command: parsedInput.action.command,\n                    timeout_ms: parsedInput.action.timeoutMs,\n                    user: parsedInput.action.user,\n                    working_directory: parsedInput.action.workingDirectory,\n                    env: parsedInput.action.env\n                  }\n                });\n                break;\n              }\n              input.push({\n                type: \"function_call\",\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id\n              });\n              break;\n            }\n            // assistant tool result parts are from provider-executed tools:\n            case \"tool-result\": {\n              if (store) {\n                input.push({ type: \"item_reference\", id: part.toolCallId });\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Results for OpenAI tool ${part.toolName} are not sent to the API when store is false`\n                });\n              }\n              break;\n            }\n            case \"reasoning\": {\n              const providerOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                provider: \"openai\",\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema\n              });\n              const reasoningId = providerOptions == null ? void 0 : providerOptions.itemId;\n              if (reasoningId != null) {\n                const reasoningMessage = reasoningMessages[reasoningId];\n                if (store) {\n                  if (reasoningMessage === void 0) {\n                    input.push({ type: \"item_reference\", id: reasoningId });\n                    reasoningMessages[reasoningId] = {\n                      type: \"reasoning\",\n                      id: reasoningId,\n                      summary: []\n                    };\n                  }\n                } else {\n                  const summaryParts = [];\n                  if (part.text.length > 0) {\n                    summaryParts.push({\n                      type: \"summary_text\",\n                      text: part.text\n                    });\n                  } else if (reasoningMessage !== void 0) {\n                    warnings.push({\n                      type: \"other\",\n                      message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`\n                    });\n                  }\n                  if (reasoningMessage === void 0) {\n                    reasoningMessages[reasoningId] = {\n                      type: \"reasoning\",\n                      id: reasoningId,\n                      encrypted_content: providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent,\n                      summary: summaryParts\n                    };\n                    input.push(reasoningMessages[reasoningId]);\n                  } else {\n                    reasoningMessage.summary.push(...summaryParts);\n                    if ((providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent) != null) {\n                      reasoningMessage.encrypted_content = providerOptions.reasoningEncryptedContent;\n                    }\n                  }\n                }\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`\n                });\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case \"tool\": {\n        for (const part of content) {\n          const output = part.output;\n          if (hasLocalShellTool && part.toolName === \"local_shell\" && output.type === \"json\") {\n            const parsedOutput = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n              value: output.value,\n              schema: localShellOutputSchema\n            });\n            input.push({\n              type: \"local_shell_call_output\",\n              call_id: part.toolCallId,\n              output: parsedOutput.output\n            });\n            break;\n          }\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n            case \"content\":\n              contentValue = output.value.map((item) => {\n                switch (item.type) {\n                  case \"text\": {\n                    return { type: \"input_text\", text: item.text };\n                  }\n                  case \"media\": {\n                    return item.mediaType.startsWith(\"image/\") ? {\n                      type: \"input_image\",\n                      image_url: `data:${item.mediaType};base64,${item.data}`\n                    } : {\n                      type: \"input_file\",\n                      filename: \"data\",\n                      file_data: `data:${item.mediaType};base64,${item.data}`\n                    };\n                  }\n                }\n              });\n              break;\n          }\n          input.push({\n            type: \"function_call_output\",\n            call_id: part.toolCallId,\n            output: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { input, warnings };\n}\nvar openaiResponsesReasoningProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  itemId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEncryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall\n}) {\n  switch (finishReason) {\n    case void 0:\n    case null:\n      return hasFunctionCall ? \"tool-calls\" : \"stop\";\n    case \"max_output_tokens\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    default:\n      return hasFunctionCall ? \"tool-calls\" : \"unknown\";\n  }\n}\n\n// src/responses/openai-responses-api.ts\n\n\nvar openaiResponsesChunkSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.delta\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n              })\n            )\n          })\n        ).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"response.completed\", \"response.incomplete\"]),\n        response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n          usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish(),\n            output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish()\n          }),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n        })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.created\"),\n        response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n        })\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.added\"),\n        output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            container_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n            outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n              ])\n            ).nullable(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.done\"),\n        output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n            container_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n              ])\n            ).nullable()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n                query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n                url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n                url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              })\n            ])\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n            results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n                file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              })\n            ).nullish()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"local_shell_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"exec\"),\n              command: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n              timeout_ms: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n              user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n              working_directory: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n              env: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n            })\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.function_call_arguments.delta\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.image_generation_call.partial_image\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        partial_image_b64: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.code_interpreter_call_code.delta\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.code_interpreter_call_code.done\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.annotation.added\"),\n        annotation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n            url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n            file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n            start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n            end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n            quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_part.added\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_text.delta\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_part.done\"),\n        item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n        code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        sequence_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).loose().transform((value) => ({\n        type: \"unknown_chunk\",\n        message: value.type\n      }))\n      // fallback for unknown chunks\n    ])\n  )\n);\nvar openaiResponsesResponseSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }).nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n            role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"output_text\"),\n                text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                    top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                        token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                        logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                      })\n                    )\n                  })\n                ).nullish(),\n                annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                    }),\n                    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n                      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                      quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n                    }),\n                    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"container_file_citation\")\n                    })\n                  ])\n                )\n              })\n            )\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n                query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n                url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n                url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              })\n            ])\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n            results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n                file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              })\n            ).nullish()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n            container_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n              ])\n            ).nullable()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"local_shell_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"exec\"),\n              command: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n              timeout_ms: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n              user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n              working_directory: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n              env: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n            })\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n            call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"summary_text\"),\n                text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              })\n            )\n          })\n        ])\n      ),\n      service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish(),\n        output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish()\n      })\n    })\n  )\n);\n\n// src/responses/openai-responses-options.ts\n\n\nvar TOP_LOGPROBS_MAX = 20;\nvar openaiResponsesReasoningModelIds = [\n  \"o1\",\n  \"o1-2024-12-17\",\n  \"o3-mini\",\n  \"o3-mini-2025-01-31\",\n  \"o3\",\n  \"o3-2025-04-16\",\n  \"o4-mini\",\n  \"o4-mini-2025-04-16\",\n  \"codex-mini-latest\",\n  \"computer-use-preview\",\n  \"gpt-5\",\n  \"gpt-5-2025-08-07\",\n  \"gpt-5-codex\",\n  \"gpt-5-mini\",\n  \"gpt-5-mini-2025-08-07\",\n  \"gpt-5-nano\",\n  \"gpt-5-nano-2025-08-07\",\n  \"gpt-5-pro\",\n  \"gpt-5-pro-2025-10-06\"\n];\nvar openaiResponsesModelIds = [\n  \"gpt-4.1\",\n  \"gpt-4.1-2025-04-14\",\n  \"gpt-4.1-mini\",\n  \"gpt-4.1-mini-2025-04-14\",\n  \"gpt-4.1-nano\",\n  \"gpt-4.1-nano-2025-04-14\",\n  \"gpt-4o\",\n  \"gpt-4o-2024-05-13\",\n  \"gpt-4o-2024-08-06\",\n  \"gpt-4o-2024-11-20\",\n  \"gpt-4o-audio-preview\",\n  \"gpt-4o-audio-preview-2024-10-01\",\n  \"gpt-4o-audio-preview-2024-12-17\",\n  \"gpt-4o-search-preview\",\n  \"gpt-4o-search-preview-2025-03-11\",\n  \"gpt-4o-mini-search-preview\",\n  \"gpt-4o-mini-search-preview-2025-03-11\",\n  \"gpt-4o-mini\",\n  \"gpt-4o-mini-2024-07-18\",\n  \"gpt-4-turbo\",\n  \"gpt-4-turbo-2024-04-09\",\n  \"gpt-4-turbo-preview\",\n  \"gpt-4-0125-preview\",\n  \"gpt-4-1106-preview\",\n  \"gpt-4\",\n  \"gpt-4-0613\",\n  \"gpt-4.5-preview\",\n  \"gpt-4.5-preview-2025-02-27\",\n  \"gpt-3.5-turbo-0125\",\n  \"gpt-3.5-turbo\",\n  \"gpt-3.5-turbo-1106\",\n  \"chatgpt-4o-latest\",\n  \"gpt-5-chat-latest\",\n  ...openaiResponsesReasoningModelIds\n];\nvar openaiResponsesProviderOptionsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n          \"reasoning.encrypted_content\",\n          // handled internally by default, only needed for unknown reasoning models\n          \"file_search_call.results\",\n          \"message.output_text.logprobs\"\n        ])\n      ).nullish(),\n      instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      /**\n       * Return the log probabilities of the tokens.\n       *\n       * Setting to true will return the log probabilities of the tokens that\n       * were generated.\n       *\n       * Setting to a number will return the log probabilities of the top n\n       * tokens that were generated.\n       *\n       * @see https://platform.openai.com/docs/api-reference/responses/create\n       * @see https://cookbook.openai.com/examples/using_logprobs\n       */\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(TOP_LOGPROBS_MAX)]).optional(),\n      /**\n       * The maximum number of total calls to built-in tools that can be processed in a response.\n       * This maximum number applies across all built-in tool calls, not per individual tool.\n       * Any further attempts to call a tool by the model will be ignored.\n       */\n      maxToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n      parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n      previousResponseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      reasoningSummary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\", \"default\"]).nullish(),\n      store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n      strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n      textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).nullish(),\n      truncation: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"disabled\"]).nullish(),\n      user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  )\n);\n\n// src/responses/openai-responses-prepare-tools.ts\n\n\nasync function prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema\n        });\n        break;\n      case \"provider-defined\": {\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n              value: tool.args,\n              schema: fileSearchArgsSchema\n            });\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? {\n                ranker: args.ranking.ranker,\n                score_threshold: args.ranking.scoreThreshold\n              } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.local_shell\": {\n            openaiTools2.push({\n              type: \"local_shell\"\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n              value: tool.args,\n              schema: webSearchPreviewArgsSchema\n            });\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.web_search\": {\n            const args = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n              value: tool.args,\n              schema: webSearchArgsSchema\n            });\n            openaiTools2.push({\n              type: \"web_search\",\n              filters: args.filters != null ? { allowed_domains: args.filters.allowedDomains } : void 0,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.code_interpreter\": {\n            const args = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n              value: tool.args,\n              schema: codeInterpreterArgsSchema\n            });\n            openaiTools2.push({\n              type: \"code_interpreter\",\n              container: args.container == null ? { type: \"auto\", file_ids: void 0 } : typeof args.container === \"string\" ? args.container : { type: \"auto\", file_ids: args.container.fileIds }\n            });\n            break;\n          }\n          case \"openai.image_generation\": {\n            const args = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.validateTypes)({\n              value: tool.args,\n              schema: imageGenerationArgsSchema\n            });\n            openaiTools2.push({\n              type: \"image_generation\",\n              background: args.background,\n              input_fidelity: args.inputFidelity,\n              input_image_mask: args.inputImageMask ? {\n                file_id: args.inputImageMask.fileId,\n                image_url: args.inputImageMask.imageUrl\n              } : void 0,\n              model: args.model,\n              size: args.size,\n              quality: args.quality,\n              moderation: args.moderation,\n              output_format: args.outputFormat,\n              output_compression: args.outputCompression\n            });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: toolChoice.toolName === \"code_interpreter\" || toolChoice.toolName === \"file_search\" || toolChoice.toolName === \"image_generation\" || toolChoice.toolName === \"web_search_preview\" || toolChoice.toolName === \"web_search\" ? { type: toolChoice.toolName } : { type: \"function\", name: toolChoice.toolName },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/responses/openai-responses-language-model.ts\nvar OpenAIResponsesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/],\n      \"application/pdf\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (stopSequences != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"stopSequences\" });\n    }\n    const openaiOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema\n    });\n    const { input, warnings: inputWarnings } = await convertToOpenAIResponsesInput({\n      prompt,\n      systemMessageMode: modelConfig.systemMessageMode,\n      fileIdPrefixes: this.config.fileIdPrefixes,\n      store: (_a = openaiOptions == null ? void 0 : openaiOptions.store) != null ? _a : true,\n      hasLocalShellTool: hasOpenAITool(\"openai.local_shell\")\n    });\n    warnings.push(...inputWarnings);\n    const strictJsonSchema = (_b = openaiOptions == null ? void 0 : openaiOptions.strictJsonSchema) != null ? _b : false;\n    let include = openaiOptions == null ? void 0 : openaiOptions.include;\n    function addInclude(key) {\n      if (include == null) {\n        include = [key];\n      } else if (!include.includes(key)) {\n        include = [...include, key];\n      }\n    }\n    function hasOpenAITool(id) {\n      return (tools == null ? void 0 : tools.find(\n        (tool) => tool.type === \"provider-defined\" && tool.id === id\n      )) != null;\n    }\n    const topLogprobs = typeof (openaiOptions == null ? void 0 : openaiOptions.logprobs) === \"number\" ? openaiOptions == null ? void 0 : openaiOptions.logprobs : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? TOP_LOGPROBS_MAX : void 0;\n    if (topLogprobs) {\n      addInclude(\"message.output_text.logprobs\");\n    }\n    const webSearchToolName = (_c = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && (tool.id === \"openai.web_search\" || tool.id === \"openai.web_search_preview\")\n    )) == null ? void 0 : _c.name;\n    if (webSearchToolName) {\n      addInclude(\"web_search_call.action.sources\");\n    }\n    if (hasOpenAITool(\"openai.code_interpreter\")) {\n      addInclude(\"code_interpreter_call.outputs\");\n    }\n    const store = openaiOptions == null ? void 0 : openaiOptions.store;\n    if (store === false && modelConfig.isReasoningModel) {\n      addInclude(\"reasoning.encrypted_content\");\n    }\n    const baseArgs = {\n      model: this.modelId,\n      input,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n      ...((responseFormat == null ? void 0 : responseFormat.type) === \"json\" || (openaiOptions == null ? void 0 : openaiOptions.textVerbosity)) && {\n        text: {\n          ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n            format: responseFormat.schema != null ? {\n              type: \"json_schema\",\n              strict: strictJsonSchema,\n              name: (_d = responseFormat.name) != null ? _d : \"response\",\n              description: responseFormat.description,\n              schema: responseFormat.schema\n            } : { type: \"json_object\" }\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.textVerbosity) && {\n            verbosity: openaiOptions.textVerbosity\n          }\n        }\n      },\n      // provider options:\n      max_tool_calls: openaiOptions == null ? void 0 : openaiOptions.maxToolCalls,\n      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n      store,\n      user: openaiOptions == null ? void 0 : openaiOptions.user,\n      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n      service_tier: openaiOptions == null ? void 0 : openaiOptions.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions == null ? void 0 : openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions == null ? void 0 : openaiOptions.safetyIdentifier,\n      top_logprobs: topLogprobs,\n      truncation: openaiOptions == null ? void 0 : openaiOptions.truncation,\n      // model-specific settings:\n      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {\n        reasoning: {\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n            effort: openaiOptions.reasoningEffort\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {\n            summary: openaiOptions.reasoningSummary\n          }\n        }\n      }\n    };\n    if (modelConfig.isReasoningModel) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n    } else {\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningEffort\",\n          details: \"reasoningEffort is not supported for non-reasoning models\"\n        });\n      }\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningSummary\",\n          details: \"reasoningSummary is not supported for non-reasoning models\"\n        });\n      }\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"flex\" && !modelConfig.supportsFlexProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      delete baseArgs.service_tier;\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"priority\" && !modelConfig.supportsPriorityProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      delete baseArgs.service_tier;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = await prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema\n    });\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings],\n      store\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: \"/responses\",\n      modelId: this.modelId\n    });\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiResponsesResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (response.error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse,\n        isRetryable: false\n      });\n    }\n    const content = [];\n    const logprobs = [];\n    let hasFunctionCall = false;\n    for (const part of response.output) {\n      switch (part.type) {\n        case \"reasoning\": {\n          if (part.summary.length === 0) {\n            part.summary.push({ type: \"summary_text\", text: \"\" });\n          }\n          for (const summary of part.summary) {\n            content.push({\n              type: \"reasoning\",\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: (_a = part.encrypted_content) != null ? _a : null\n                }\n              }\n            });\n          }\n          break;\n        }\n        case \"image_generation_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"image_generation\",\n            input: \"{}\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"image_generation\",\n            result: {\n              result: part.result\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"local_shell_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: \"local_shell\",\n            input: JSON.stringify({\n              action: part.action\n            }),\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"message\": {\n          for (const contentPart of part.content) {\n            if (((_c = (_b = options.providerOptions) == null ? void 0 : _b.openai) == null ? void 0 : _c.logprobs) && contentPart.logprobs) {\n              logprobs.push(contentPart.logprobs);\n            }\n            content.push({\n              type: \"text\",\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id\n                }\n              }\n            });\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === \"url_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_f = (_e = (_d = this.config).generateId) == null ? void 0 : _e.call(_d)) != null ? _f : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              } else if (annotation.type === \"file_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_i = (_h = (_g = this.config).generateId) == null ? void 0 : _h.call(_g)) != null ? _i : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_k = (_j = annotation.quote) != null ? _j : annotation.filename) != null ? _k : \"Document\",\n                  filename: (_l = annotation.filename) != null ? _l : annotation.file_id\n                });\n              }\n            }\n          }\n          break;\n        }\n        case \"function_call\": {\n          hasFunctionCall = true;\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"web_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            input: JSON.stringify({}),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            result: mapWebSearchOutput(part.action),\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"computer_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            result: {\n              type: \"computer_use_tool_result\",\n              status: part.status || \"completed\"\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"file_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            input: \"{}\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            result: {\n              queries: part.queries,\n              results: (_n = (_m = part.results) == null ? void 0 : _m.map((result) => ({\n                attributes: result.attributes,\n                fileId: result.file_id,\n                filename: result.filename,\n                score: result.score,\n                text: result.text\n              }))) != null ? _n : null\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"code_interpreter_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            input: JSON.stringify({\n              code: part.code,\n              containerId: part.container_id\n            }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            result: {\n              outputs: part.outputs\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n      }\n    }\n    const providerMetadata = {\n      openai: { responseId: response.id }\n    };\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n    if (typeof response.service_tier === \"string\") {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: (_o = response.incomplete_details) == null ? void 0 : _o.reason,\n        hasFunctionCall\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens: (_q = (_p = response.usage.output_tokens_details) == null ? void 0 : _p.reasoning_tokens) != null ? _q : void 0,\n        cachedInputTokens: (_s = (_r = response.usage.input_tokens_details) == null ? void 0 : _r.cached_tokens) != null ? _s : void 0\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1e3),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName,\n      store\n    } = await this.getArgs(options);\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/responses\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiResponsesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const self = this;\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const logprobs = [];\n    let responseId = null;\n    const ongoingToolCalls = {};\n    let hasFunctionCall = false;\n    const activeReasoning = {};\n    let serviceTier;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.call_id,\n                  toolName: value.item.name\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  input: JSON.stringify({}),\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"computer_use\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"computer_use\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"code_interpreter_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"code_interpreter\",\n                  toolCallId: value.item.id,\n                  codeInterpreter: {\n                    containerId: value.item.container_id\n                  }\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"code_interpreter\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: value.item.id,\n                  delta: `{\"containerId\":\"${value.item.container_id}\",\"code\":\"`\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  input: \"{}\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"image_generation_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"image_generation\",\n                  input: \"{}\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (isResponseOutputItemAddedChunk(value) && value.item.type === \"reasoning\") {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: { 0: \"active\" }\n                };\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent: (_a = value.item.encrypted_content) != null ? _a : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                hasFunctionCall = true;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.call_id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  result: mapWebSearchOutput(value.item.action),\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  result: {\n                    type: \"computer_use_tool_result\",\n                    status: value.item.status || \"completed\"\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  result: {\n                    queries: value.item.queries,\n                    results: (_c = (_b = value.item.results) == null ? void 0 : _b.map((result) => ({\n                      attributes: result.attributes,\n                      fileId: result.file_id,\n                      filename: result.filename,\n                      score: result.score,\n                      text: result.text\n                    }))) != null ? _c : null\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"code_interpreter_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  result: {\n                    outputs: value.item.outputs\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"image_generation_call\") {\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"image_generation\",\n                  result: {\n                    result: value.item.result\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"local_shell_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: \"local_shell\",\n                  input: JSON.stringify({\n                    action: {\n                      type: \"exec\",\n                      command: value.item.action.command,\n                      timeoutMs: value.item.action.timeout_ms,\n                      user: value.item.action.user,\n                      workingDirectory: value.item.action.working_directory,\n                      env: value.item.action.env\n                    }\n                  }),\n                  providerMetadata: {\n                    openai: { itemId: value.item.id }\n                  }\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-end\",\n                  id: value.item.id\n                });\n              } else if (value.item.type === \"reasoning\") {\n                const activeReasoningPart = activeReasoning[value.item.id];\n                const summaryPartIndices = Object.entries(\n                  activeReasoningPart.summaryParts\n                ).filter(\n                  ([_, status]) => status === \"active\" || status === \"can-conclude\"\n                ).map(([summaryIndex]) => summaryIndex);\n                for (const summaryIndex of summaryPartIndices) {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent: (_d = value.item.encrypted_content) != null ? _d : null\n                      }\n                    }\n                  });\n                }\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: value.delta\n                });\n              }\n            } else if (isResponseCodeInterpreterCallCodeDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  // The delta is code, which is embedding in a JSON string.\n                  // To escape it, we use JSON.stringify and slice to remove the outer quotes.\n                  delta: JSON.stringify(value.delta).slice(1, -1)\n                });\n              }\n            } else if (isResponseCodeInterpreterCallCodeDoneChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: '\"}'\n                });\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: toolCall.toolCallId\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: toolCall.toolCallId,\n                  toolName: \"code_interpreter\",\n                  input: JSON.stringify({\n                    code: value.code,\n                    containerId: toolCall.codeInterpreter.containerId\n                  }),\n                  providerExecuted: true\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1e3),\n                modelId: value.response.model\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: value.item_id,\n                delta: value.delta\n              });\n              if (((_f = (_e = options.providerOptions) == null ? void 0 : _e.openai) == null ? void 0 : _f.logprobs) && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (value.type === \"response.reasoning_summary_part.added\") {\n              if (value.summary_index > 0) {\n                const activeReasoningPart = activeReasoning[value.item_id];\n                activeReasoningPart.summaryParts[value.summary_index] = \"active\";\n                for (const summaryIndex of Object.keys(\n                  activeReasoningPart.summaryParts\n                )) {\n                  if (activeReasoningPart.summaryParts[summaryIndex] === \"can-conclude\") {\n                    controller.enqueue({\n                      type: \"reasoning-end\",\n                      id: `${value.item_id}:${summaryIndex}`,\n                      providerMetadata: { openai: { itemId: value.item_id } }\n                    });\n                    activeReasoningPart.summaryParts[summaryIndex] = \"concluded\";\n                  }\n                }\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent: (_h = (_g = activeReasoning[value.item_id]) == null ? void 0 : _g.encryptedContent) != null ? _h : null\n                    }\n                  }\n                });\n              }\n            } else if (value.type === \"response.reasoning_summary_text.delta\") {\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id\n                  }\n                }\n              });\n            } else if (value.type === \"response.reasoning_summary_part.done\") {\n              if (store) {\n                controller.enqueue({\n                  type: \"reasoning-end\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: { itemId: value.item_id }\n                  }\n                });\n                activeReasoning[value.item_id].summaryParts[value.summary_index] = \"concluded\";\n              } else {\n                activeReasoning[value.item_id].summaryParts[value.summary_index] = \"can-conclude\";\n              }\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: (_i = value.response.incomplete_details) == null ? void 0 : _i.reason,\n                hasFunctionCall\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens = value.response.usage.input_tokens + value.response.usage.output_tokens;\n              usage.reasoningTokens = (_k = (_j = value.response.usage.output_tokens_details) == null ? void 0 : _j.reasoning_tokens) != null ? _k : void 0;\n              usage.cachedInputTokens = (_m = (_l = value.response.usage.input_tokens_details) == null ? void 0 : _l.cached_tokens) != null ? _m : void 0;\n              if (typeof value.response.service_tier === \"string\") {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === \"url_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_p = (_o = (_n = self.config).generateId) == null ? void 0 : _o.call(_n)) != null ? _p : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: value.annotation.url,\n                  title: value.annotation.title\n                });\n              } else if (value.annotation.type === \"file_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_s = (_r = (_q = self.config).generateId) == null ? void 0 : _r.call(_q)) != null ? _s : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_u = (_t = value.annotation.quote) != null ? _t : value.annotation.filename) != null ? _u : \"Document\",\n                  filename: (_v = value.annotation.filename) != null ? _v : value.annotation.file_id\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: \"error\", error: value });\n            }\n          },\n          flush(controller) {\n            const providerMetadata = {\n              openai: {\n                responseId\n              }\n            };\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n            if (serviceTier !== void 0) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nfunction isTextDeltaChunk(chunk) {\n  return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n  return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseFinishedChunk(chunk) {\n  return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n  return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n  return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseCodeInterpreterCallCodeDeltaChunk(chunk) {\n  return chunk.type === \"response.code_interpreter_call_code.delta\";\n}\nfunction isResponseCodeInterpreterCallCodeDoneChunk(chunk) {\n  return chunk.type === \"response.code_interpreter_call_code.done\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n  return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n  return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction isErrorChunk(chunk) {\n  return chunk.type === \"error\";\n}\nfunction getResponsesModelConfig(modelId) {\n  const supportsFlexProcessing2 = modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n  const supportsPriorityProcessing2 = modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n  const defaults = {\n    systemMessageMode: \"system\",\n    supportsFlexProcessing: supportsFlexProcessing2,\n    supportsPriorityProcessing: supportsPriorityProcessing2\n  };\n  if (modelId.startsWith(\"gpt-5-chat\")) {\n    return {\n      ...defaults,\n      isReasoningModel: false\n    };\n  }\n  if (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\") || modelId.startsWith(\"codex-\") || modelId.startsWith(\"computer-use\")) {\n    if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: \"remove\"\n      };\n    }\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: \"developer\"\n    };\n  }\n  return {\n    ...defaults,\n    isReasoningModel: false\n  };\n}\nfunction mapWebSearchOutput(action) {\n  var _a;\n  switch (action.type) {\n    case \"search\":\n      return { action: { type: \"search\", query: (_a = action.query) != null ? _a : void 0 } };\n    case \"open_page\":\n      return { action: { type: \"openPage\", url: action.url } };\n    case \"find\":\n      return {\n        action: { type: \"find\", url: action.url, pattern: action.pattern }\n      };\n  }\n}\n\n// src/speech/openai-speech-model.ts\n\n\n// src/speech/openai-speech-options.ts\n\n\nvar openaiSpeechProviderOptionsSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      speed: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0.25).max(4).default(1).nullish()\n    })\n  )\n);\n\n// src/speech/openai-speech-model.ts\nvar OpenAISpeechModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    text,\n    voice = \"alloy\",\n    outputFormat = \"mp3\",\n    speed,\n    instructions,\n    language,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiSpeechProviderOptionsSchema\n    });\n    const requestBody = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: \"mp3\",\n      speed,\n      instructions\n    };\n    if (outputFormat) {\n      if ([\"mp3\", \"opus\", \"aac\", \"flac\", \"wav\", \"pcm\"].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"outputFormat\",\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`\n        });\n      }\n    }\n    if (openAIOptions) {\n      const speechModelOptions = {};\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key];\n        if (value !== void 0) {\n          requestBody[key] = value;\n        }\n      }\n    }\n    if (language) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"language\",\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`\n      });\n    }\n    return {\n      requestBody,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/audio/speech\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createBinaryResponseHandler)(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody)\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/transcription/openai-transcription-model.ts\n\n\n// src/transcription/openai-transcription-api.ts\n\n\nvar openaiTranscriptionResponseSchema = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      words: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          word: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n        })\n      ).nullish(),\n      segments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          seek: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n          temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          avg_logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          compression_ratio: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          no_speech_prob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n        })\n      ).nullish()\n    })\n  )\n);\n\n// src/transcription/openai-transcription-options.ts\n\n\nvar openAITranscriptionProviderOptions = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.lazyValidator)(\n  () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.zodSchema)(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      /**\n       * Additional information to include in the transcription response.\n       */\n      include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n      /**\n       * The language of the input audio in ISO-639-1 format.\n       */\n      language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n       * An optional text to guide the model's style or continue a previous audio segment.\n       */\n      prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n      /**\n       * The sampling temperature, between 0 and 1.\n       * @default 0\n       */\n      temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1).default(0).optional(),\n      /**\n       * The timestamp granularities to populate for this transcription.\n       * @default ['segment']\n       */\n      timestampGranularities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"word\", \"segment\"])).default([\"segment\"]).optional()\n    })\n  )\n);\n\n// src/transcription/openai-transcription-model.ts\nvar languageMap = {\n  afrikaans: \"af\",\n  arabic: \"ar\",\n  armenian: \"hy\",\n  azerbaijani: \"az\",\n  belarusian: \"be\",\n  bosnian: \"bs\",\n  bulgarian: \"bg\",\n  catalan: \"ca\",\n  chinese: \"zh\",\n  croatian: \"hr\",\n  czech: \"cs\",\n  danish: \"da\",\n  dutch: \"nl\",\n  english: \"en\",\n  estonian: \"et\",\n  finnish: \"fi\",\n  french: \"fr\",\n  galician: \"gl\",\n  german: \"de\",\n  greek: \"el\",\n  hebrew: \"he\",\n  hindi: \"hi\",\n  hungarian: \"hu\",\n  icelandic: \"is\",\n  indonesian: \"id\",\n  italian: \"it\",\n  japanese: \"ja\",\n  kannada: \"kn\",\n  kazakh: \"kk\",\n  korean: \"ko\",\n  latvian: \"lv\",\n  lithuanian: \"lt\",\n  macedonian: \"mk\",\n  malay: \"ms\",\n  marathi: \"mr\",\n  maori: \"mi\",\n  nepali: \"ne\",\n  norwegian: \"no\",\n  persian: \"fa\",\n  polish: \"pl\",\n  portuguese: \"pt\",\n  romanian: \"ro\",\n  russian: \"ru\",\n  serbian: \"sr\",\n  slovak: \"sk\",\n  slovenian: \"sl\",\n  spanish: \"es\",\n  swahili: \"sw\",\n  swedish: \"sv\",\n  tagalog: \"tl\",\n  tamil: \"ta\",\n  thai: \"th\",\n  turkish: \"tr\",\n  ukrainian: \"uk\",\n  urdu: \"ur\",\n  vietnamese: \"vi\",\n  welsh: \"cy\"\n};\nvar OpenAITranscriptionModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    audio,\n    mediaType,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openAITranscriptionProviderOptions\n    });\n    const formData = new FormData();\n    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(audio)]);\n    formData.append(\"model\", this.modelId);\n    const fileExtension = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.mediaTypeToExtension)(mediaType);\n    formData.append(\n      \"file\",\n      new File([blob], \"audio\", { type: mediaType }),\n      `audio.${fileExtension}`\n    );\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          \"gpt-4o-transcribe\",\n          \"gpt-4o-mini-transcribe\"\n        ].includes(this.modelId) ? \"json\" : \"verbose_json\",\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities\n      };\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n    return {\n      formData,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { formData, warnings } = await this.getArgs(options);\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postFormDataToApi)({\n      url: this.config.url({\n        path: \"/audio/transcriptions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTranscriptionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;\n    return {\n      text: response.text,\n      segments: (_g = (_f = (_d = response.segments) == null ? void 0 : _d.map((segment) => ({\n        text: segment.text,\n        startSecond: segment.start,\n        endSecond: segment.end\n      }))) != null ? _f : (_e = response.words) == null ? void 0 : _e.map((word) => ({\n        text: word.word,\n        startSecond: word.start,\n        endSecond: word.end\n      }))) != null ? _g : [],\n      language,\n      durationInSeconds: (_h = response.duration) != null ? _h : void 0,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/version.ts\nvar VERSION =  true ? \"2.0.53\" : 0;\n\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n  var _a, _b;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(\n    (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadOptionalSetting)({\n      settingValue: options.baseURL,\n      environmentVariableName: \"OPENAI_BASE_URL\"\n    })\n  )) != null ? _a : \"https://api.openai.com/v1\";\n  const providerName = (_b = options.name) != null ? _b : \"openai\";\n  const getHeaders = () => (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withUserAgentSuffix)(\n    {\n      Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n        apiKey: options.apiKey,\n        environmentVariableName: \"OPENAI_API_KEY\",\n        description: \"OpenAI\"\n      })}`,\n      \"OpenAI-Organization\": options.organization,\n      \"OpenAI-Project\": options.project,\n      ...options.headers\n    },\n    `ai-sdk/openai/${VERSION}`\n  );\n  const createChatModel = (modelId) => new OpenAIChatLanguageModel(modelId, {\n    provider: `${providerName}.chat`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createCompletionModel = (modelId) => new OpenAICompletionLanguageModel(modelId, {\n    provider: `${providerName}.completion`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createEmbeddingModel = (modelId) => new OpenAIEmbeddingModel(modelId, {\n    provider: `${providerName}.embedding`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId) => new OpenAIImageModel(modelId, {\n    provider: `${providerName}.image`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {\n    provider: `${providerName}.transcription`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {\n    provider: `${providerName}.speech`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createLanguageModel = (modelId) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenAI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createResponsesModel(modelId);\n  };\n  const createResponsesModel = (modelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: [\"file-\"]\n    });\n  };\n  const provider = function(modelId) {\n    return createLanguageModel(modelId);\n  };\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n  provider.tools = openaiTools;\n  return provider;\n}\nvar openai = createOpenAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFpLXNkaytvcGVuYWlAMi4wLjUzX3pvZEAzLjI1Ljc2L25vZGVfbW9kdWxlcy9AYWktc2RrL29wZW5haS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFNZ0M7O0FBRWhDO0FBRzBCO0FBU007O0FBRWhDO0FBQzJCO0FBQzZDO0FBQ3hFLDRCQUE0QiwwQ0FBUTtBQUNwQyxTQUFTLDBDQUFRO0FBQ2pCLGFBQWEsMENBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwQ0FBUTtBQUNsQixXQUFXLHVDQUFLO0FBQ2hCLFVBQVUseUNBQU8sRUFBRSwwQ0FBUSxJQUFJLDBDQUFRO0FBQ3ZDLEdBQUc7QUFDSCxDQUFDO0FBQ0Qsa0NBQWtDLHNGQUE4QjtBQUNoRTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUcwQjtBQUMrQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHlCQUF5QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNEJBQTRCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGlCQUFpQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3Q0FBd0M7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFGQUFxRixXQUFXLFNBQVMsdUVBQWUsWUFBWTtBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLDhCQUE4QiwyRUFBNkI7QUFDM0Q7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FB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LE9BQU87QUFDUDtBQUNBLFlBQVksc0NBQXNDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsSUFBSSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLElBQUk7QUFDbEIsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sUUFBUSxxRUFBYztBQUM1QjtBQUNBLGVBQWUsc0VBQWU7QUFDOUI7QUFDQTtBQUNBLGlDQUFpQyxpRkFBMEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxnQkFBZ0IsMERBQVk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFD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WSxNQUFNLFFBQVEsUUFBUSxFQUFFLEtBQUs7QUFDekM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGlCQUFpQixhQUFhO0FBQzlCLFlBQVksTUFBTSxRQUFRLFFBQVEsRUFBRSxLQUFLO0FBQ3pDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxpQkFBaUIsYUFBYTtBQUM5QixZQUFZLE1BQU0sUUFBUSxRQUFRLEVBQUUsS0FBSztBQUN6QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsaUJBQWlCLGFBQWE7QUFDOUIsWUFBWSxNQUFNLFFBQVEsUUFBUSxFQUFFLEtBQUs7QUFDekM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixhQUFhO0FBQ2hDLGNBQWMsTUFBTSxRQUFRLFFBQVEsRUFBRSxLQUFLO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVzdC1hcHBsaWNhdGlvbi8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWktc2RrK29wZW5haUAyLjAuNTNfem9kQDMuMjUuNzYvbm9kZV9tb2R1bGVzL0BhaS1zZGsvb3BlbmFpL2Rpc3QvaW5kZXgubWpzP2E3NWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL29wZW5haS1wcm92aWRlci50c1xuaW1wb3J0IHtcbiAgbG9hZEFwaUtleSxcbiAgbG9hZE9wdGlvbmFsU2V0dGluZyxcbiAgd2l0aG91dFRyYWlsaW5nU2xhc2gsXG4gIHdpdGhVc2VyQWdlbnRTdWZmaXhcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcblxuLy8gc3JjL2NoYXQvb3BlbmFpLWNoYXQtbGFuZ3VhZ2UtbW9kZWwudHNcbmltcG9ydCB7XG4gIEludmFsaWRSZXNwb25zZURhdGFFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMsXG4gIGNyZWF0ZUV2ZW50U291cmNlUmVzcG9uc2VIYW5kbGVyLFxuICBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyLFxuICBnZW5lcmF0ZUlkLFxuICBpc1BhcnNhYmxlSnNvbixcbiAgcGFyc2VQcm92aWRlck9wdGlvbnMsXG4gIHBvc3RKc29uVG9BcGlcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcblxuLy8gc3JjL29wZW5haS1lcnJvci50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2QvdjRcIjtcbmltcG9ydCB7IGNyZWF0ZUpzb25FcnJvclJlc3BvbnNlSGFuZGxlciB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG52YXIgb3BlbmFpRXJyb3JEYXRhU2NoZW1hID0gei5vYmplY3Qoe1xuICBlcnJvcjogei5vYmplY3Qoe1xuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgLy8gVGhlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYmVsb3cgaXMgaGFuZGxlZCBsb29zZWx5IHRvIHN1cHBvcnRcbiAgICAvLyBPcGVuQUktY29tcGF0aWJsZSBwcm92aWRlcnMgdGhhdCBoYXZlIHNsaWdodGx5IGRpZmZlcmVudCBlcnJvclxuICAgIC8vIHJlc3BvbnNlczpcbiAgICB0eXBlOiB6LnN0cmluZygpLm51bGxpc2goKSxcbiAgICBwYXJhbTogei5hbnkoKS5udWxsaXNoKCksXG4gICAgY29kZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udW1iZXIoKV0pLm51bGxpc2goKVxuICB9KVxufSk7XG52YXIgb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyID0gY3JlYXRlSnNvbkVycm9yUmVzcG9uc2VIYW5kbGVyKHtcbiAgZXJyb3JTY2hlbWE6IG9wZW5haUVycm9yRGF0YVNjaGVtYSxcbiAgZXJyb3JUb01lc3NhZ2U6IChkYXRhKSA9PiBkYXRhLmVycm9yLm1lc3NhZ2Vcbn0pO1xuXG4vLyBzcmMvY2hhdC9jb252ZXJ0LXRvLW9wZW5haS1jaGF0LW1lc3NhZ2VzLnRzXG5pbXBvcnQge1xuICBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuaW1wb3J0IHsgY29udmVydFRvQmFzZTY0IH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmZ1bmN0aW9uIGNvbnZlcnRUb09wZW5BSUNoYXRNZXNzYWdlcyh7XG4gIHByb21wdCxcbiAgc3lzdGVtTWVzc2FnZU1vZGUgPSBcInN5c3RlbVwiXG59KSB7XG4gIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gIGNvbnN0IHdhcm5pbmdzID0gW107XG4gIGZvciAoY29uc3QgeyByb2xlLCBjb250ZW50IH0gb2YgcHJvbXB0KSB7XG4gICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICBjYXNlIFwic3lzdGVtXCI6IHtcbiAgICAgICAgc3dpdGNoIChzeXN0ZW1NZXNzYWdlTW9kZSkge1xuICAgICAgICAgIGNhc2UgXCJzeXN0ZW1cIjoge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaCh7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImRldmVsb3BlclwiOiB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHsgcm9sZTogXCJkZXZlbG9wZXJcIiwgY29udGVudCB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwic3lzdGVtIG1lc3NhZ2VzIGFyZSByZW1vdmVkIGZvciB0aGlzIG1vZGVsXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSBzeXN0ZW1NZXNzYWdlTW9kZTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYFVuc3VwcG9ydGVkIHN5c3RlbSBtZXNzYWdlIG1vZGU6ICR7X2V4aGF1c3RpdmVDaGVja31gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ1c2VyXCI6IHtcbiAgICAgICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAxICYmIGNvbnRlbnRbMF0udHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IGNvbnRlbnRbMF0udGV4dCB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICBjb250ZW50OiBjb250ZW50Lm1hcCgocGFydCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwidGV4dFwiLCB0ZXh0OiBwYXJ0LnRleHQgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiZmlsZVwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQubWVkaWFUeXBlLnN0YXJ0c1dpdGgoXCJpbWFnZS9cIikpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhVHlwZSA9IHBhcnQubWVkaWFUeXBlID09PSBcImltYWdlLypcIiA/IFwiaW1hZ2UvanBlZ1wiIDogcGFydC5tZWRpYVR5cGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImltYWdlX3VybFwiLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZV91cmw6IHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBhcnQuZGF0YSBpbnN0YW5jZW9mIFVSTCA/IHBhcnQuZGF0YS50b1N0cmluZygpIDogYGRhdGE6JHttZWRpYVR5cGV9O2Jhc2U2NCwke2NvbnZlcnRUb0Jhc2U2NChwYXJ0LmRhdGEpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gT3BlbkFJIHNwZWNpZmljIGV4dGVuc2lvbjogaW1hZ2UgZGV0YWlsXG4gICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiAoX2IgPSAoX2EgPSBwYXJ0LnByb3ZpZGVyT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm9wZW5haSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmltYWdlRGV0YWlsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0Lm1lZGlhVHlwZS5zdGFydHNXaXRoKFwiYXVkaW8vXCIpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocGFydC5kYXRhIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0eTogXCJhdWRpbyBmaWxlIHBhcnRzIHdpdGggVVJMc1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYXJ0Lm1lZGlhVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXVkaW8vd2F2XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnB1dF9hdWRpb1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfYXVkaW86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY29udmVydFRvQmFzZTY0KHBhcnQuZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogXCJ3YXZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1ZGlvL21wM1wiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXVkaW8vbXBlZ1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5wdXRfYXVkaW9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2F1ZGlvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNvbnZlcnRUb0Jhc2U2NChwYXJ0LmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwibXAzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0eTogYGF1ZGlvIGNvbnRlbnQgcGFydHMgd2l0aCBtZWRpYSB0eXBlICR7cGFydC5tZWRpYVR5cGV9YFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0Lm1lZGlhVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9wZGZcIikge1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcnQuZGF0YSBpbnN0YW5jZW9mIFVSTCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IFwiUERGIGZpbGUgcGFydHMgd2l0aCBVUkxzXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgZmlsZTogdHlwZW9mIHBhcnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiBwYXJ0LmRhdGEuc3RhcnRzV2l0aChcImZpbGUtXCIpID8geyBmaWxlX2lkOiBwYXJ0LmRhdGEgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogKF9jID0gcGFydC5maWxlbmFtZSkgIT0gbnVsbCA/IF9jIDogYHBhcnQtJHtpbmRleH0ucGRmYCxcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGE6IGBkYXRhOmFwcGxpY2F0aW9uL3BkZjtiYXNlNjQsJHtjb252ZXJ0VG9CYXNlNjQocGFydC5kYXRhKX1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IGBmaWxlIHBhcnQgbWVkaWEgdHlwZSAke3BhcnQubWVkaWFUeXBlfWBcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhc3Npc3RhbnRcIjoge1xuICAgICAgICBsZXQgdGV4dCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHRvb2xDYWxscyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgY29udGVudCkge1xuICAgICAgICAgIHN3aXRjaCAocGFydC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgIHRleHQgKz0gcGFydC50ZXh0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJ0b29sLWNhbGxcIjoge1xuICAgICAgICAgICAgICB0b29sQ2FsbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHBhcnQudG9vbE5hbWUsXG4gICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IEpTT04uc3RyaW5naWZ5KHBhcnQuaW5wdXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgICAgY29udGVudDogdGV4dCxcbiAgICAgICAgICB0b29sX2NhbGxzOiB0b29sQ2FsbHMubGVuZ3RoID4gMCA/IHRvb2xDYWxscyA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidG9vbFwiOiB7XG4gICAgICAgIGZvciAoY29uc3QgdG9vbFJlc3BvbnNlIG9mIGNvbnRlbnQpIHtcbiAgICAgICAgICBjb25zdCBvdXRwdXQgPSB0b29sUmVzcG9uc2Uub3V0cHV0O1xuICAgICAgICAgIGxldCBjb250ZW50VmFsdWU7XG4gICAgICAgICAgc3dpdGNoIChvdXRwdXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvci10ZXh0XCI6XG4gICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IG91dHB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29udGVudFwiOlxuICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvci1qc29uXCI6XG4gICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KG91dHB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgIHJvbGU6IFwidG9vbFwiLFxuICAgICAgICAgICAgdG9vbF9jYWxsX2lkOiB0b29sUmVzcG9uc2UudG9vbENhbGxJZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRWYWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gcm9sZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByb2xlOiAke19leGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7IG1lc3NhZ2VzLCB3YXJuaW5ncyB9O1xufVxuXG4vLyBzcmMvY2hhdC9nZXQtcmVzcG9uc2UtbWV0YWRhdGEudHNcbmZ1bmN0aW9uIGdldFJlc3BvbnNlTWV0YWRhdGEoe1xuICBpZCxcbiAgbW9kZWwsXG4gIGNyZWF0ZWRcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogaWQgIT0gbnVsbCA/IGlkIDogdm9pZCAwLFxuICAgIG1vZGVsSWQ6IG1vZGVsICE9IG51bGwgPyBtb2RlbCA6IHZvaWQgMCxcbiAgICB0aW1lc3RhbXA6IGNyZWF0ZWQgIT0gbnVsbCA/IG5ldyBEYXRlKGNyZWF0ZWQgKiAxZTMpIDogdm9pZCAwXG4gIH07XG59XG5cbi8vIHNyYy9jaGF0L21hcC1vcGVuYWktZmluaXNoLXJlYXNvbi50c1xuZnVuY3Rpb24gbWFwT3BlbkFJRmluaXNoUmVhc29uKGZpbmlzaFJlYXNvbikge1xuICBzd2l0Y2ggKGZpbmlzaFJlYXNvbikge1xuICAgIGNhc2UgXCJzdG9wXCI6XG4gICAgICByZXR1cm4gXCJzdG9wXCI7XG4gICAgY2FzZSBcImxlbmd0aFwiOlxuICAgICAgcmV0dXJuIFwibGVuZ3RoXCI7XG4gICAgY2FzZSBcImNvbnRlbnRfZmlsdGVyXCI6XG4gICAgICByZXR1cm4gXCJjb250ZW50LWZpbHRlclwiO1xuICAgIGNhc2UgXCJmdW5jdGlvbl9jYWxsXCI6XG4gICAgY2FzZSBcInRvb2xfY2FsbHNcIjpcbiAgICAgIHJldHVybiBcInRvb2wtY2FsbHNcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwidW5rbm93blwiO1xuICB9XG59XG5cbi8vIHNyYy9jaGF0L29wZW5haS1jaGF0LWFwaS50c1xuaW1wb3J0IHtcbiAgbGF6eVZhbGlkYXRvcixcbiAgem9kU2NoZW1hXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoyIH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haUNoYXRSZXNwb25zZVNjaGVtYSA9IGxhenlWYWxpZGF0b3IoXG4gICgpID0+IHpvZFNjaGVtYShcbiAgICB6Mi5vYmplY3Qoe1xuICAgICAgaWQ6IHoyLnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgIGNyZWF0ZWQ6IHoyLm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgIG1vZGVsOiB6Mi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICBjaG9pY2VzOiB6Mi5hcnJheShcbiAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICBtZXNzYWdlOiB6Mi5vYmplY3Qoe1xuICAgICAgICAgICAgcm9sZTogejIubGl0ZXJhbChcImFzc2lzdGFudFwiKS5udWxsaXNoKCksXG4gICAgICAgICAgICBjb250ZW50OiB6Mi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICB0b29sX2NhbGxzOiB6Mi5hcnJheShcbiAgICAgICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICBpZDogejIuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICAgIHR5cGU6IHoyLmxpdGVyYWwoXCJmdW5jdGlvblwiKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHoyLnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiB6Mi5zdHJpbmcoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLm51bGxpc2goKSxcbiAgICAgICAgICAgIGFubm90YXRpb25zOiB6Mi5hcnJheShcbiAgICAgICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiB6Mi5saXRlcmFsKFwidXJsX2NpdGF0aW9uXCIpLFxuICAgICAgICAgICAgICAgIHN0YXJ0X2luZGV4OiB6Mi5udW1iZXIoKSxcbiAgICAgICAgICAgICAgICBlbmRfaW5kZXg6IHoyLm51bWJlcigpLFxuICAgICAgICAgICAgICAgIHVybDogejIuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgdGl0bGU6IHoyLnN0cmluZygpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLm51bGxpc2goKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGluZGV4OiB6Mi5udW1iZXIoKSxcbiAgICAgICAgICBsb2dwcm9iczogejIub2JqZWN0KHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IHoyLmFycmF5KFxuICAgICAgICAgICAgICB6Mi5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHRva2VuOiB6Mi5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsb2dwcm9iOiB6Mi5udW1iZXIoKSxcbiAgICAgICAgICAgICAgICB0b3BfbG9ncHJvYnM6IHoyLmFycmF5KFxuICAgICAgICAgICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IHoyLnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBsb2dwcm9iOiB6Mi5udW1iZXIoKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLm51bGxpc2goKVxuICAgICAgICAgIH0pLm51bGxpc2goKSxcbiAgICAgICAgICBmaW5pc2hfcmVhc29uOiB6Mi5zdHJpbmcoKS5udWxsaXNoKClcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICB1c2FnZTogejIub2JqZWN0KHtcbiAgICAgICAgcHJvbXB0X3Rva2VuczogejIubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICBjb21wbGV0aW9uX3Rva2VuczogejIubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICB0b3RhbF90b2tlbnM6IHoyLm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgICAgcHJvbXB0X3Rva2Vuc19kZXRhaWxzOiB6Mi5vYmplY3Qoe1xuICAgICAgICAgIGNhY2hlZF90b2tlbnM6IHoyLm51bWJlcigpLm51bGxpc2goKVxuICAgICAgICB9KS5udWxsaXNoKCksXG4gICAgICAgIGNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHM6IHoyLm9iamVjdCh7XG4gICAgICAgICAgcmVhc29uaW5nX3Rva2VuczogejIubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICAgIGFjY2VwdGVkX3ByZWRpY3Rpb25fdG9rZW5zOiB6Mi5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgcmVqZWN0ZWRfcHJlZGljdGlvbl90b2tlbnM6IHoyLm51bWJlcigpLm51bGxpc2goKVxuICAgICAgICB9KS5udWxsaXNoKClcbiAgICAgIH0pLm51bGxpc2goKVxuICAgIH0pXG4gIClcbik7XG52YXIgb3BlbmFpQ2hhdENodW5rU2NoZW1hID0gbGF6eVZhbGlkYXRvcihcbiAgKCkgPT4gem9kU2NoZW1hKFxuICAgIHoyLnVuaW9uKFtcbiAgICAgIHoyLm9iamVjdCh7XG4gICAgICAgIGlkOiB6Mi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgIGNyZWF0ZWQ6IHoyLm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgICAgbW9kZWw6IHoyLnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgICAgY2hvaWNlczogejIuYXJyYXkoXG4gICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgIGRlbHRhOiB6Mi5vYmplY3Qoe1xuICAgICAgICAgICAgICByb2xlOiB6Mi5lbnVtKFtcImFzc2lzdGFudFwiXSkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICBjb250ZW50OiB6Mi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgIHRvb2xfY2FsbHM6IHoyLmFycmF5KFxuICAgICAgICAgICAgICAgIHoyLm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICBpbmRleDogejIubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICBpZDogejIuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICAgICAgdHlwZTogejIubGl0ZXJhbChcImZ1bmN0aW9uXCIpLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiB6Mi5vYmplY3Qoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB6Mi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogejIuc3RyaW5nKCkubnVsbGlzaCgpXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICBhbm5vdGF0aW9uczogejIuYXJyYXkoXG4gICAgICAgICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IHoyLmxpdGVyYWwoXCJ1cmxfY2l0YXRpb25cIiksXG4gICAgICAgICAgICAgICAgICBzdGFydF9pbmRleDogejIubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICBlbmRfaW5kZXg6IHoyLm51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgdXJsOiB6Mi5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiB6Mi5zdHJpbmcoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICkubnVsbGlzaCgpXG4gICAgICAgICAgICB9KS5udWxsaXNoKCksXG4gICAgICAgICAgICBsb2dwcm9iczogejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgY29udGVudDogejIuYXJyYXkoXG4gICAgICAgICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgIHRva2VuOiB6Mi5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgIGxvZ3Byb2I6IHoyLm51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgdG9wX2xvZ3Byb2JzOiB6Mi5hcnJheShcbiAgICAgICAgICAgICAgICAgICAgejIub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogejIuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgbG9ncHJvYjogejIubnVtYmVyKClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApLm51bGxpc2goKVxuICAgICAgICAgICAgfSkubnVsbGlzaCgpLFxuICAgICAgICAgICAgZmluaXNoX3JlYXNvbjogejIuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgaW5kZXg6IHoyLm51bWJlcigpXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgdXNhZ2U6IHoyLm9iamVjdCh7XG4gICAgICAgICAgcHJvbXB0X3Rva2VuczogejIubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICAgIGNvbXBsZXRpb25fdG9rZW5zOiB6Mi5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgdG90YWxfdG9rZW5zOiB6Mi5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgcHJvbXB0X3Rva2Vuc19kZXRhaWxzOiB6Mi5vYmplY3Qoe1xuICAgICAgICAgICAgY2FjaGVkX3Rva2VuczogejIubnVtYmVyKCkubnVsbGlzaCgpXG4gICAgICAgICAgfSkubnVsbGlzaCgpLFxuICAgICAgICAgIGNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHM6IHoyLm9iamVjdCh7XG4gICAgICAgICAgICByZWFzb25pbmdfdG9rZW5zOiB6Mi5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgICBhY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VuczogejIubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgcmVqZWN0ZWRfcHJlZGljdGlvbl90b2tlbnM6IHoyLm51bWJlcigpLm51bGxpc2goKVxuICAgICAgICAgIH0pLm51bGxpc2goKVxuICAgICAgICB9KS5udWxsaXNoKClcbiAgICAgIH0pLFxuICAgICAgb3BlbmFpRXJyb3JEYXRhU2NoZW1hXG4gICAgXSlcbiAgKVxuKTtcblxuLy8gc3JjL2NoYXQvb3BlbmFpLWNoYXQtb3B0aW9ucy50c1xuaW1wb3J0IHtcbiAgbGF6eVZhbGlkYXRvciBhcyBsYXp5VmFsaWRhdG9yMixcbiAgem9kU2NoZW1hIGFzIHpvZFNjaGVtYTJcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejMgfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgb3BlbmFpQ2hhdExhbmd1YWdlTW9kZWxPcHRpb25zID0gbGF6eVZhbGlkYXRvcjIoXG4gICgpID0+IHpvZFNjaGVtYTIoXG4gICAgejMub2JqZWN0KHtcbiAgICAgIC8qKlxuICAgICAgICogTW9kaWZ5IHRoZSBsaWtlbGlob29kIG9mIHNwZWNpZmllZCB0b2tlbnMgYXBwZWFyaW5nIGluIHRoZSBjb21wbGV0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEFjY2VwdHMgYSBKU09OIG9iamVjdCB0aGF0IG1hcHMgdG9rZW5zIChzcGVjaWZpZWQgYnkgdGhlaXIgdG9rZW4gSUQgaW5cbiAgICAgICAqIHRoZSBHUFQgdG9rZW5pemVyKSB0byBhbiBhc3NvY2lhdGVkIGJpYXMgdmFsdWUgZnJvbSAtMTAwIHRvIDEwMC5cbiAgICAgICAqL1xuICAgICAgbG9naXRCaWFzOiB6My5yZWNvcmQoejMuY29lcmNlLm51bWJlcigpLCB6My5udW1iZXIoKSkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9rZW5zLlxuICAgICAgICpcbiAgICAgICAqIFNldHRpbmcgdG8gdHJ1ZSB3aWxsIHJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRva2VucyB0aGF0XG4gICAgICAgKiB3ZXJlIGdlbmVyYXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBTZXR0aW5nIHRvIGEgbnVtYmVyIHdpbGwgcmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9wIG5cbiAgICAgICAqIHRva2VucyB0aGF0IHdlcmUgZ2VuZXJhdGVkLlxuICAgICAgICovXG4gICAgICBsb2dwcm9iczogejMudW5pb24oW3ozLmJvb2xlYW4oKSwgejMubnVtYmVyKCldKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBwYXJhbGxlbCBmdW5jdGlvbiBjYWxsaW5nIGR1cmluZyB0b29sIHVzZS4gRGVmYXVsdCB0byB0cnVlLlxuICAgICAgICovXG4gICAgICBwYXJhbGxlbFRvb2xDYWxsczogejMuYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0b1xuICAgICAgICogbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLlxuICAgICAgICovXG4gICAgICB1c2VyOiB6My5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBSZWFzb25pbmcgZWZmb3J0IGZvciByZWFzb25pbmcgbW9kZWxzLiBEZWZhdWx0cyB0byBgbWVkaXVtYC5cbiAgICAgICAqL1xuICAgICAgcmVhc29uaW5nRWZmb3J0OiB6My5lbnVtKFtcIm1pbmltYWxcIiwgXCJsb3dcIiwgXCJtZWRpdW1cIiwgXCJoaWdoXCJdKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyB0byBnZW5lcmF0ZS4gVXNlZnVsIGZvciByZWFzb25pbmcgbW9kZWxzLlxuICAgICAgICovXG4gICAgICBtYXhDb21wbGV0aW9uVG9rZW5zOiB6My5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBwZXJzaXN0ZW5jZSBpbiByZXNwb25zZXMgQVBJLlxuICAgICAgICovXG4gICAgICBzdG9yZTogejMuYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgICAqIE1ldGFkYXRhIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSByZXF1ZXN0LlxuICAgICAgICovXG4gICAgICBtZXRhZGF0YTogejMucmVjb3JkKHozLnN0cmluZygpLm1heCg2NCksIHozLnN0cmluZygpLm1heCg1MTIpKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBQYXJhbWV0ZXJzIGZvciBwcmVkaWN0aW9uIG1vZGUuXG4gICAgICAgKi9cbiAgICAgIHByZWRpY3Rpb246IHozLnJlY29yZCh6My5zdHJpbmcoKSwgejMuYW55KCkpLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgdG8gdXNlIHN0cnVjdHVyZWQgb3V0cHV0cy5cbiAgICAgICAqXG4gICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgKi9cbiAgICAgIHN0cnVjdHVyZWRPdXRwdXRzOiB6My5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgICogU2VydmljZSB0aWVyIGZvciB0aGUgcmVxdWVzdC5cbiAgICAgICAqIC0gJ2F1dG8nOiBEZWZhdWx0IHNlcnZpY2UgdGllci4gVGhlIHJlcXVlc3Qgd2lsbCBiZSBwcm9jZXNzZWQgd2l0aCB0aGUgc2VydmljZSB0aWVyIGNvbmZpZ3VyZWQgaW4gdGhlXG4gICAgICAgKiAgICAgICAgICAgUHJvamVjdCBzZXR0aW5ncy4gVW5sZXNzIG90aGVyd2lzZSBjb25maWd1cmVkLCB0aGUgUHJvamVjdCB3aWxsIHVzZSAnZGVmYXVsdCcuXG4gICAgICAgKiAtICdmbGV4JzogNTAlIGNoZWFwZXIgcHJvY2Vzc2luZyBhdCB0aGUgY29zdCBvZiBpbmNyZWFzZWQgbGF0ZW5jeS4gT25seSBhdmFpbGFibGUgZm9yIG8zIGFuZCBvNC1taW5pIG1vZGVscy5cbiAgICAgICAqIC0gJ3ByaW9yaXR5JzogSGlnaGVyLXNwZWVkIHByb2Nlc3Npbmcgd2l0aCBwcmVkaWN0YWJseSBsb3cgbGF0ZW5jeSBhdCBwcmVtaXVtIGNvc3QuIEF2YWlsYWJsZSBmb3IgRW50ZXJwcmlzZSBjdXN0b21lcnMuXG4gICAgICAgKiAtICdkZWZhdWx0JzogVGhlIHJlcXVlc3Qgd2lsbCBiZSBwcm9jZXNzZWQgd2l0aCB0aGUgc3RhbmRhcmQgcHJpY2luZyBhbmQgcGVyZm9ybWFuY2UgZm9yIHRoZSBzZWxlY3RlZCBtb2RlbC5cbiAgICAgICAqXG4gICAgICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICAgICAqL1xuICAgICAgc2VydmljZVRpZXI6IHozLmVudW0oW1wiYXV0b1wiLCBcImZsZXhcIiwgXCJwcmlvcml0eVwiLCBcImRlZmF1bHRcIl0pLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgdG8gdXNlIHN0cmljdCBKU09OIHNjaGVtYSB2YWxpZGF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICAgKi9cbiAgICAgIHN0cmljdEpzb25TY2hlbWE6IHozLmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBDb250cm9scyB0aGUgdmVyYm9zaXR5IG9mIHRoZSBtb2RlbCdzIHJlc3BvbnNlcy5cbiAgICAgICAqIExvd2VyIHZhbHVlcyB3aWxsIHJlc3VsdCBpbiBtb3JlIGNvbmNpc2UgcmVzcG9uc2VzLCB3aGlsZSBoaWdoZXIgdmFsdWVzIHdpbGwgcmVzdWx0IGluIG1vcmUgdmVyYm9zZSByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHRleHRWZXJib3NpdHk6IHozLmVudW0oW1wibG93XCIsIFwibWVkaXVtXCIsIFwiaGlnaFwiXSkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgICogQSBjYWNoZSBrZXkgZm9yIHByb21wdCBjYWNoaW5nLiBBbGxvd3MgbWFudWFsIGNvbnRyb2wgb3ZlciBwcm9tcHQgY2FjaGluZyBiZWhhdmlvci5cbiAgICAgICAqIFVzZWZ1bCBmb3IgaW1wcm92aW5nIGNhY2hlIGhpdCByYXRlcyBhbmQgd29ya2luZyBhcm91bmQgYXV0b21hdGljIGNhY2hpbmcgaXNzdWVzLlxuICAgICAgICovXG4gICAgICBwcm9tcHRDYWNoZUtleTogejMuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgICogQSBzdGFibGUgaWRlbnRpZmllciB1c2VkIHRvIGhlbHAgZGV0ZWN0IHVzZXJzIG9mIHlvdXIgYXBwbGljYXRpb25cbiAgICAgICAqIHRoYXQgbWF5IGJlIHZpb2xhdGluZyBPcGVuQUkncyB1c2FnZSBwb2xpY2llcy4gVGhlIElEcyBzaG91bGQgYmUgYVxuICAgICAgICogc3RyaW5nIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyBlYWNoIHVzZXIuIFdlIHJlY29tbWVuZCBoYXNoaW5nIHRoZWlyXG4gICAgICAgKiB1c2VybmFtZSBvciBlbWFpbCBhZGRyZXNzLCBpbiBvcmRlciB0byBhdm9pZCBzZW5kaW5nIHVzIGFueSBpZGVudGlmeWluZ1xuICAgICAgICogaW5mb3JtYXRpb24uXG4gICAgICAgKi9cbiAgICAgIHNhZmV0eUlkZW50aWZpZXI6IHozLnN0cmluZygpLm9wdGlvbmFsKClcbiAgICB9KVxuICApXG4pO1xuXG4vLyBzcmMvY2hhdC9vcGVuYWktY2hhdC1wcmVwYXJlLXRvb2xzLnRzXG5pbXBvcnQge1xuICBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvciBhcyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjJcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbmZ1bmN0aW9uIHByZXBhcmVDaGF0VG9vbHMoe1xuICB0b29scyxcbiAgdG9vbENob2ljZSxcbiAgc3RydWN0dXJlZE91dHB1dHMsXG4gIHN0cmljdEpzb25TY2hlbWFcbn0pIHtcbiAgdG9vbHMgPSAodG9vbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHRvb2xzLmxlbmd0aCkgPyB0b29scyA6IHZvaWQgMDtcbiAgY29uc3QgdG9vbFdhcm5pbmdzID0gW107XG4gIGlmICh0b29scyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHsgdG9vbHM6IHZvaWQgMCwgdG9vbENob2ljZTogdm9pZCAwLCB0b29sV2FybmluZ3MgfTtcbiAgfVxuICBjb25zdCBvcGVuYWlUb29sczIgPSBbXTtcbiAgZm9yIChjb25zdCB0b29sIG9mIHRvb2xzKSB7XG4gICAgc3dpdGNoICh0b29sLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBvcGVuYWlUb29sczIucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHRvb2wuaW5wdXRTY2hlbWEsXG4gICAgICAgICAgICBzdHJpY3Q6IHN0cnVjdHVyZWRPdXRwdXRzID8gc3RyaWN0SnNvblNjaGVtYSA6IHZvaWQgMFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdG9vbFdhcm5pbmdzLnB1c2goeyB0eXBlOiBcInVuc3VwcG9ydGVkLXRvb2xcIiwgdG9vbCB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmICh0b29sQ2hvaWNlID09IG51bGwpIHtcbiAgICByZXR1cm4geyB0b29sczogb3BlbmFpVG9vbHMyLCB0b29sQ2hvaWNlOiB2b2lkIDAsIHRvb2xXYXJuaW5ncyB9O1xuICB9XG4gIGNvbnN0IHR5cGUgPSB0b29sQ2hvaWNlLnR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJhdXRvXCI6XG4gICAgY2FzZSBcIm5vbmVcIjpcbiAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgIHJldHVybiB7IHRvb2xzOiBvcGVuYWlUb29sczIsIHRvb2xDaG9pY2U6IHR5cGUsIHRvb2xXYXJuaW5ncyB9O1xuICAgIGNhc2UgXCJ0b29sXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b29sczogb3BlbmFpVG9vbHMyLFxuICAgICAgICB0b29sQ2hvaWNlOiB7XG4gICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0b29sQ2hvaWNlLnRvb2xOYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0b29sV2FybmluZ3NcbiAgICAgIH07XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHR5cGU7XG4gICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IyKHtcbiAgICAgICAgZnVuY3Rpb25hbGl0eTogYHRvb2wgY2hvaWNlIHR5cGU6ICR7X2V4aGF1c3RpdmVDaGVja31gXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3JjL2NoYXQvb3BlbmFpLWNoYXQtbGFuZ3VhZ2UtbW9kZWwudHNcbnZhciBPcGVuQUlDaGF0TGFuZ3VhZ2VNb2RlbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobW9kZWxJZCwgY29uZmlnKSB7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmVyc2lvbiA9IFwidjJcIjtcbiAgICB0aGlzLnN1cHBvcnRlZFVybHMgPSB7XG4gICAgICBcImltYWdlLypcIjogWy9eaHR0cHM/OlxcL1xcLy4qJC9dXG4gICAgfTtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZ2V0QXJncyh7XG4gICAgcHJvbXB0LFxuICAgIG1heE91dHB1dFRva2VucyxcbiAgICB0ZW1wZXJhdHVyZSxcbiAgICB0b3BQLFxuICAgIHRvcEssXG4gICAgZnJlcXVlbmN5UGVuYWx0eSxcbiAgICBwcmVzZW5jZVBlbmFsdHksXG4gICAgc3RvcFNlcXVlbmNlcyxcbiAgICByZXNwb25zZUZvcm1hdCxcbiAgICBzZWVkLFxuICAgIHRvb2xzLFxuICAgIHRvb2xDaG9pY2UsXG4gICAgcHJvdmlkZXJPcHRpb25zXG4gIH0pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgICBjb25zdCBvcGVuYWlPcHRpb25zID0gKF9hID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnMoe1xuICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICBzY2hlbWE6IG9wZW5haUNoYXRMYW5ndWFnZU1vZGVsT3B0aW9uc1xuICAgIH0pKSAhPSBudWxsID8gX2EgOiB7fTtcbiAgICBjb25zdCBzdHJ1Y3R1cmVkT3V0cHV0cyA9IChfYiA9IG9wZW5haU9wdGlvbnMuc3RydWN0dXJlZE91dHB1dHMpICE9IG51bGwgPyBfYiA6IHRydWU7XG4gICAgaWYgKHRvcEsgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInRvcEtcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICgocmVzcG9uc2VGb3JtYXQgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3BvbnNlRm9ybWF0LnR5cGUpID09PSBcImpzb25cIiAmJiByZXNwb25zZUZvcm1hdC5zY2hlbWEgIT0gbnVsbCAmJiAhc3RydWN0dXJlZE91dHB1dHMpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJyZXNwb25zZUZvcm1hdFwiLFxuICAgICAgICBkZXRhaWxzOiBcIkpTT04gcmVzcG9uc2UgZm9ybWF0IHNjaGVtYSBpcyBvbmx5IHN1cHBvcnRlZCB3aXRoIHN0cnVjdHVyZWRPdXRwdXRzXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB7IG1lc3NhZ2VzLCB3YXJuaW5nczogbWVzc2FnZVdhcm5pbmdzIH0gPSBjb252ZXJ0VG9PcGVuQUlDaGF0TWVzc2FnZXMoXG4gICAgICB7XG4gICAgICAgIHByb21wdCxcbiAgICAgICAgc3lzdGVtTWVzc2FnZU1vZGU6IGdldFN5c3RlbU1lc3NhZ2VNb2RlKHRoaXMubW9kZWxJZClcbiAgICAgIH1cbiAgICApO1xuICAgIHdhcm5pbmdzLnB1c2goLi4ubWVzc2FnZVdhcm5pbmdzKTtcbiAgICBjb25zdCBzdHJpY3RKc29uU2NoZW1hID0gKF9jID0gb3BlbmFpT3B0aW9ucy5zdHJpY3RKc29uU2NoZW1hKSAhPSBudWxsID8gX2MgOiBmYWxzZTtcbiAgICBjb25zdCBiYXNlQXJncyA9IHtcbiAgICAgIC8vIG1vZGVsIGlkOlxuICAgICAgbW9kZWw6IHRoaXMubW9kZWxJZCxcbiAgICAgIC8vIG1vZGVsIHNwZWNpZmljIHNldHRpbmdzOlxuICAgICAgbG9naXRfYmlhczogb3BlbmFpT3B0aW9ucy5sb2dpdEJpYXMsXG4gICAgICBsb2dwcm9iczogb3BlbmFpT3B0aW9ucy5sb2dwcm9icyA9PT0gdHJ1ZSB8fCB0eXBlb2Ygb3BlbmFpT3B0aW9ucy5sb2dwcm9icyA9PT0gXCJudW1iZXJcIiA/IHRydWUgOiB2b2lkIDAsXG4gICAgICB0b3BfbG9ncHJvYnM6IHR5cGVvZiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzID09PSBcIm51bWJlclwiID8gb3BlbmFpT3B0aW9ucy5sb2dwcm9icyA6IHR5cGVvZiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzID09PSBcImJvb2xlYW5cIiA/IG9wZW5haU9wdGlvbnMubG9ncHJvYnMgPyAwIDogdm9pZCAwIDogdm9pZCAwLFxuICAgICAgdXNlcjogb3BlbmFpT3B0aW9ucy51c2VyLFxuICAgICAgcGFyYWxsZWxfdG9vbF9jYWxsczogb3BlbmFpT3B0aW9ucy5wYXJhbGxlbFRvb2xDYWxscyxcbiAgICAgIC8vIHN0YW5kYXJkaXplZCBzZXR0aW5nczpcbiAgICAgIG1heF90b2tlbnM6IG1heE91dHB1dFRva2VucyxcbiAgICAgIHRlbXBlcmF0dXJlLFxuICAgICAgdG9wX3A6IHRvcFAsXG4gICAgICBmcmVxdWVuY3lfcGVuYWx0eTogZnJlcXVlbmN5UGVuYWx0eSxcbiAgICAgIHByZXNlbmNlX3BlbmFsdHk6IHByZXNlbmNlUGVuYWx0eSxcbiAgICAgIHJlc3BvbnNlX2Zvcm1hdDogKHJlc3BvbnNlRm9ybWF0ID09IG51bGwgPyB2b2lkIDAgOiByZXNwb25zZUZvcm1hdC50eXBlKSA9PT0gXCJqc29uXCIgPyBzdHJ1Y3R1cmVkT3V0cHV0cyAmJiByZXNwb25zZUZvcm1hdC5zY2hlbWEgIT0gbnVsbCA/IHtcbiAgICAgICAgdHlwZTogXCJqc29uX3NjaGVtYVwiLFxuICAgICAgICBqc29uX3NjaGVtYToge1xuICAgICAgICAgIHNjaGVtYTogcmVzcG9uc2VGb3JtYXQuc2NoZW1hLFxuICAgICAgICAgIHN0cmljdDogc3RyaWN0SnNvblNjaGVtYSxcbiAgICAgICAgICBuYW1lOiAoX2QgPSByZXNwb25zZUZvcm1hdC5uYW1lKSAhPSBudWxsID8gX2QgOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHJlc3BvbnNlRm9ybWF0LmRlc2NyaXB0aW9uXG4gICAgICAgIH1cbiAgICAgIH0gOiB7IHR5cGU6IFwianNvbl9vYmplY3RcIiB9IDogdm9pZCAwLFxuICAgICAgc3RvcDogc3RvcFNlcXVlbmNlcyxcbiAgICAgIHNlZWQsXG4gICAgICB2ZXJib3NpdHk6IG9wZW5haU9wdGlvbnMudGV4dFZlcmJvc2l0eSxcbiAgICAgIC8vIG9wZW5haSBzcGVjaWZpYyBzZXR0aW5nczpcbiAgICAgIC8vIFRPRE8gQUkgU0RLIDY6IHJlbW92ZSwgd2UgYXV0by1tYXAgbWF4T3V0cHV0VG9rZW5zIG5vd1xuICAgICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zOiBvcGVuYWlPcHRpb25zLm1heENvbXBsZXRpb25Ub2tlbnMsXG4gICAgICBzdG9yZTogb3BlbmFpT3B0aW9ucy5zdG9yZSxcbiAgICAgIG1ldGFkYXRhOiBvcGVuYWlPcHRpb25zLm1ldGFkYXRhLFxuICAgICAgcHJlZGljdGlvbjogb3BlbmFpT3B0aW9ucy5wcmVkaWN0aW9uLFxuICAgICAgcmVhc29uaW5nX2VmZm9ydDogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdFZmZvcnQsXG4gICAgICBzZXJ2aWNlX3RpZXI6IG9wZW5haU9wdGlvbnMuc2VydmljZVRpZXIsXG4gICAgICBwcm9tcHRfY2FjaGVfa2V5OiBvcGVuYWlPcHRpb25zLnByb21wdENhY2hlS2V5LFxuICAgICAgc2FmZXR5X2lkZW50aWZpZXI6IG9wZW5haU9wdGlvbnMuc2FmZXR5SWRlbnRpZmllcixcbiAgICAgIC8vIG1lc3NhZ2VzOlxuICAgICAgbWVzc2FnZXNcbiAgICB9O1xuICAgIGlmIChpc1JlYXNvbmluZ01vZGVsKHRoaXMubW9kZWxJZCkpIHtcbiAgICAgIGlmIChiYXNlQXJncy50ZW1wZXJhdHVyZSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRlbXBlcmF0dXJlID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRlbXBlcmF0dXJlXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0ZW1wZXJhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MudG9wX3AgIT0gbnVsbCkge1xuICAgICAgICBiYXNlQXJncy50b3BfcCA9IHZvaWQgMDtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgICAgc2V0dGluZzogXCJ0b3BQXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0b3BQIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy5mcmVxdWVuY3lfcGVuYWx0eSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLmZyZXF1ZW5jeV9wZW5hbHR5ID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcImZyZXF1ZW5jeVBlbmFsdHlcIixcbiAgICAgICAgICBkZXRhaWxzOiBcImZyZXF1ZW5jeVBlbmFsdHkgaXMgbm90IHN1cHBvcnRlZCBmb3IgcmVhc29uaW5nIG1vZGVsc1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VBcmdzLnByZXNlbmNlX3BlbmFsdHkgIT0gbnVsbCkge1xuICAgICAgICBiYXNlQXJncy5wcmVzZW5jZV9wZW5hbHR5ID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInByZXNlbmNlUGVuYWx0eVwiLFxuICAgICAgICAgIGRldGFpbHM6IFwicHJlc2VuY2VQZW5hbHR5IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy5sb2dpdF9iaWFzICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MubG9naXRfYmlhcyA9IHZvaWQgMDtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwibG9naXRCaWFzIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy5sb2dwcm9icyAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLmxvZ3Byb2JzID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJsb2dwcm9icyBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MudG9wX2xvZ3Byb2JzICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MudG9wX2xvZ3Byb2JzID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJ0b3BMb2dwcm9icyBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MubWF4X3Rva2VucyAhPSBudWxsKSB7XG4gICAgICAgIGlmIChiYXNlQXJncy5tYXhfY29tcGxldGlvbl90b2tlbnMgPT0gbnVsbCkge1xuICAgICAgICAgIGJhc2VBcmdzLm1heF9jb21wbGV0aW9uX3Rva2VucyA9IGJhc2VBcmdzLm1heF90b2tlbnM7XG4gICAgICAgIH1cbiAgICAgICAgYmFzZUFyZ3MubWF4X3Rva2VucyA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMubW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTRvLXNlYXJjaC1wcmV2aWV3XCIpIHx8IHRoaXMubW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTRvLW1pbmktc2VhcmNoLXByZXZpZXdcIikpIHtcbiAgICAgIGlmIChiYXNlQXJncy50ZW1wZXJhdHVyZSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRlbXBlcmF0dXJlID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRlbXBlcmF0dXJlXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0ZW1wZXJhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGUgc2VhcmNoIHByZXZpZXcgbW9kZWxzIGFuZCBoYXMgYmVlbiByZW1vdmVkLlwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3BlbmFpT3B0aW9ucy5zZXJ2aWNlVGllciA9PT0gXCJmbGV4XCIgJiYgIXN1cHBvcnRzRmxleFByb2Nlc3NpbmcodGhpcy5tb2RlbElkKSkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInNlcnZpY2VUaWVyXCIsXG4gICAgICAgIGRldGFpbHM6IFwiZmxleCBwcm9jZXNzaW5nIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBvMywgbzQtbWluaSwgYW5kIGdwdC01IG1vZGVsc1wiXG4gICAgICB9KTtcbiAgICAgIGJhc2VBcmdzLnNlcnZpY2VfdGllciA9IHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKG9wZW5haU9wdGlvbnMuc2VydmljZVRpZXIgPT09IFwicHJpb3JpdHlcIiAmJiAhc3VwcG9ydHNQcmlvcml0eVByb2Nlc3NpbmcodGhpcy5tb2RlbElkKSkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInNlcnZpY2VUaWVyXCIsXG4gICAgICAgIGRldGFpbHM6IFwicHJpb3JpdHkgcHJvY2Vzc2luZyBpcyBvbmx5IGF2YWlsYWJsZSBmb3Igc3VwcG9ydGVkIG1vZGVscyAoZ3B0LTQsIGdwdC01LCBncHQtNS1taW5pLCBvMywgbzQtbWluaSkgYW5kIHJlcXVpcmVzIEVudGVycHJpc2UgYWNjZXNzLiBncHQtNS1uYW5vIGlzIG5vdCBzdXBwb3J0ZWRcIlxuICAgICAgfSk7XG4gICAgICBiYXNlQXJncy5zZXJ2aWNlX3RpZXIgPSB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHRvb2xzOiBvcGVuYWlUb29sczIsXG4gICAgICB0b29sQ2hvaWNlOiBvcGVuYWlUb29sQ2hvaWNlLFxuICAgICAgdG9vbFdhcm5pbmdzXG4gICAgfSA9IHByZXBhcmVDaGF0VG9vbHMoe1xuICAgICAgdG9vbHMsXG4gICAgICB0b29sQ2hvaWNlLFxuICAgICAgc3RydWN0dXJlZE91dHB1dHMsXG4gICAgICBzdHJpY3RKc29uU2NoZW1hXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgLi4uYmFzZUFyZ3MsXG4gICAgICAgIHRvb2xzOiBvcGVuYWlUb29sczIsXG4gICAgICAgIHRvb2xfY2hvaWNlOiBvcGVuYWlUb29sQ2hvaWNlXG4gICAgICB9LFxuICAgICAgd2FybmluZ3M6IFsuLi53YXJuaW5ncywgLi4udG9vbFdhcm5pbmdzXVxuICAgIH07XG4gIH1cbiAgYXN5bmMgZG9HZW5lcmF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2ksIF9qLCBfaywgX2wsIF9tLCBfbjtcbiAgICBjb25zdCB7IGFyZ3M6IGJvZHksIHdhcm5pbmdzIH0gPSBhd2FpdCB0aGlzLmdldEFyZ3Mob3B0aW9ucyk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgcmF3VmFsdWU6IHJhd1Jlc3BvbnNlXG4gICAgfSA9IGF3YWl0IHBvc3RKc29uVG9BcGkoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgICBwYXRoOiBcIi9jaGF0L2NvbXBsZXRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVycyh0aGlzLmNvbmZpZy5oZWFkZXJzKCksIG9wdGlvbnMuaGVhZGVycyksXG4gICAgICBib2R5LFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBvcGVuYWlGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyKFxuICAgICAgICBvcGVuYWlDaGF0UmVzcG9uc2VTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IGNob2ljZSA9IHJlc3BvbnNlLmNob2ljZXNbMF07XG4gICAgY29uc3QgY29udGVudCA9IFtdO1xuICAgIGNvbnN0IHRleHQgPSBjaG9pY2UubWVzc2FnZS5jb250ZW50O1xuICAgIGlmICh0ZXh0ICE9IG51bGwgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICBjb250ZW50LnB1c2goeyB0eXBlOiBcInRleHRcIiwgdGV4dCB9KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB0b29sQ2FsbCBvZiAoX2EgPSBjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzKSAhPSBudWxsID8gX2EgOiBbXSkge1xuICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgdG9vbENhbGxJZDogKF9iID0gdG9vbENhbGwuaWQpICE9IG51bGwgPyBfYiA6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgdG9vbE5hbWU6IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgIGlucHV0OiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGFubm90YXRpb24gb2YgKF9jID0gY2hvaWNlLm1lc3NhZ2UuYW5ub3RhdGlvbnMpICE9IG51bGwgPyBfYyA6IFtdKSB7XG4gICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICBzb3VyY2VUeXBlOiBcInVybFwiLFxuICAgICAgICBpZDogZ2VuZXJhdGVJZCgpLFxuICAgICAgICB1cmw6IGFubm90YXRpb24udXJsLFxuICAgICAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBsZXRpb25Ub2tlbkRldGFpbHMgPSAoX2QgPSByZXNwb25zZS51c2FnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHM7XG4gICAgY29uc3QgcHJvbXB0VG9rZW5EZXRhaWxzID0gKF9lID0gcmVzcG9uc2UudXNhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfZS5wcm9tcHRfdG9rZW5zX2RldGFpbHM7XG4gICAgY29uc3QgcHJvdmlkZXJNZXRhZGF0YSA9IHsgb3BlbmFpOiB7fSB9O1xuICAgIGlmICgoY29tcGxldGlvblRva2VuRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogY29tcGxldGlvblRva2VuRGV0YWlscy5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucykgIT0gbnVsbCkge1xuICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkuYWNjZXB0ZWRQcmVkaWN0aW9uVG9rZW5zID0gY29tcGxldGlvblRva2VuRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogY29tcGxldGlvblRva2VuRGV0YWlscy5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucztcbiAgICB9XG4gICAgaWYgKChjb21wbGV0aW9uVG9rZW5EZXRhaWxzID09IG51bGwgPyB2b2lkIDAgOiBjb21wbGV0aW9uVG9rZW5EZXRhaWxzLnJlamVjdGVkX3ByZWRpY3Rpb25fdG9rZW5zKSAhPSBudWxsKSB7XG4gICAgICBwcm92aWRlck1ldGFkYXRhLm9wZW5haS5yZWplY3RlZFByZWRpY3Rpb25Ub2tlbnMgPSBjb21wbGV0aW9uVG9rZW5EZXRhaWxzID09IG51bGwgPyB2b2lkIDAgOiBjb21wbGV0aW9uVG9rZW5EZXRhaWxzLnJlamVjdGVkX3ByZWRpY3Rpb25fdG9rZW5zO1xuICAgIH1cbiAgICBpZiAoKChfZiA9IGNob2ljZS5sb2dwcm9icykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmNvbnRlbnQpICE9IG51bGwpIHtcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmxvZ3Byb2JzID0gY2hvaWNlLmxvZ3Byb2JzLmNvbnRlbnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50LFxuICAgICAgZmluaXNoUmVhc29uOiBtYXBPcGVuQUlGaW5pc2hSZWFzb24oY2hvaWNlLmZpbmlzaF9yZWFzb24pLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgaW5wdXRUb2tlbnM6IChfaCA9IChfZyA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2cucHJvbXB0X3Rva2VucykgIT0gbnVsbCA/IF9oIDogdm9pZCAwLFxuICAgICAgICBvdXRwdXRUb2tlbnM6IChfaiA9IChfaSA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2kuY29tcGxldGlvbl90b2tlbnMpICE9IG51bGwgPyBfaiA6IHZvaWQgMCxcbiAgICAgICAgdG90YWxUb2tlbnM6IChfbCA9IChfayA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2sudG90YWxfdG9rZW5zKSAhPSBudWxsID8gX2wgOiB2b2lkIDAsXG4gICAgICAgIHJlYXNvbmluZ1Rva2VuczogKF9tID0gY29tcGxldGlvblRva2VuRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogY29tcGxldGlvblRva2VuRGV0YWlscy5yZWFzb25pbmdfdG9rZW5zKSAhPSBudWxsID8gX20gOiB2b2lkIDAsXG4gICAgICAgIGNhY2hlZElucHV0VG9rZW5zOiAoX24gPSBwcm9tcHRUb2tlbkRldGFpbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHByb21wdFRva2VuRGV0YWlscy5jYWNoZWRfdG9rZW5zKSAhPSBudWxsID8gX24gOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICByZXF1ZXN0OiB7IGJvZHkgfSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIC4uLmdldFJlc3BvbnNlTWV0YWRhdGEocmVzcG9uc2UpLFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGJvZHk6IHJhd1Jlc3BvbnNlXG4gICAgICB9LFxuICAgICAgd2FybmluZ3MsXG4gICAgICBwcm92aWRlck1ldGFkYXRhXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb1N0cmVhbShvcHRpb25zKSB7XG4gICAgY29uc3QgeyBhcmdzLCB3YXJuaW5ncyB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAuLi5hcmdzLFxuICAgICAgc3RyZWFtOiB0cnVlLFxuICAgICAgc3RyZWFtX29wdGlvbnM6IHtcbiAgICAgICAgaW5jbHVkZV91c2FnZTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgeyByZXNwb25zZUhlYWRlcnMsIHZhbHVlOiByZXNwb25zZSB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaSh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2NoYXQvY29tcGxldGlvbnNcIixcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IGNvbWJpbmVIZWFkZXJzKHRoaXMuY29uZmlnLmhlYWRlcnMoKSwgb3B0aW9ucy5oZWFkZXJzKSxcbiAgICAgIGJvZHksXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUV2ZW50U291cmNlUmVzcG9uc2VIYW5kbGVyKFxuICAgICAgICBvcGVuYWlDaGF0Q2h1bmtTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IHRvb2xDYWxscyA9IFtdO1xuICAgIGxldCBmaW5pc2hSZWFzb24gPSBcInVua25vd25cIjtcbiAgICBjb25zdCB1c2FnZSA9IHtcbiAgICAgIGlucHV0VG9rZW5zOiB2b2lkIDAsXG4gICAgICBvdXRwdXRUb2tlbnM6IHZvaWQgMCxcbiAgICAgIHRvdGFsVG9rZW5zOiB2b2lkIDBcbiAgICB9O1xuICAgIGxldCBpc0ZpcnN0Q2h1bmsgPSB0cnVlO1xuICAgIGxldCBpc0FjdGl2ZVRleHQgPSBmYWxzZTtcbiAgICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0geyBvcGVuYWk6IHt9IH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogcmVzcG9uc2UucGlwZVRocm91Z2goXG4gICAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwic3RyZWFtLXN0YXJ0XCIsIHdhcm5pbmdzIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2osIF9rLCBfbCwgX20sIF9uLCBfbywgX3AsIF9xLCBfciwgX3MsIF90LCBfdSwgX3YsIF93LCBfeDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVSYXdDaHVua3MpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJyYXdcIiwgcmF3VmFsdWU6IGNodW5rLnJhd1ZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaHVuay5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbiA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogY2h1bmsuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2h1bmsudmFsdWU7XG4gICAgICAgICAgICBpZiAoXCJlcnJvclwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbiA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogdmFsdWUuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0ZpcnN0Q2h1bmspIHtcbiAgICAgICAgICAgICAgaXNGaXJzdENodW5rID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZXNwb25zZS1tZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIC4uLmdldFJlc3BvbnNlTWV0YWRhdGEodmFsdWUpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlLnVzYWdlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdXNhZ2UuaW5wdXRUb2tlbnMgPSAoX2EgPSB2YWx1ZS51c2FnZS5wcm9tcHRfdG9rZW5zKSAhPSBudWxsID8gX2EgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLm91dHB1dFRva2VucyA9IChfYiA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zKSAhPSBudWxsID8gX2IgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gKF9jID0gdmFsdWUudXNhZ2UudG90YWxfdG9rZW5zKSAhPSBudWxsID8gX2MgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLnJlYXNvbmluZ1Rva2VucyA9IChfZSA9IChfZCA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfZC5yZWFzb25pbmdfdG9rZW5zKSAhPSBudWxsID8gX2UgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLmNhY2hlZElucHV0VG9rZW5zID0gKF9nID0gKF9mID0gdmFsdWUudXNhZ2UucHJvbXB0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2YuY2FjaGVkX3Rva2VucykgIT0gbnVsbCA/IF9nIDogdm9pZCAwO1xuICAgICAgICAgICAgICBpZiAoKChfaCA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfaC5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmFjY2VwdGVkUHJlZGljdGlvblRva2VucyA9IChfaSA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfaS5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoKChfaiA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfai5yZWplY3RlZF9wcmVkaWN0aW9uX3Rva2VucykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLnJlamVjdGVkUHJlZGljdGlvblRva2VucyA9IChfayA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfay5yZWplY3RlZF9wcmVkaWN0aW9uX3Rva2VucztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2hvaWNlID0gdmFsdWUuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIGlmICgoY2hvaWNlID09IG51bGwgPyB2b2lkIDAgOiBjaG9pY2UuZmluaXNoX3JlYXNvbikgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBtYXBPcGVuQUlGaW5pc2hSZWFzb24oY2hvaWNlLmZpbmlzaF9yZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgoX2wgPSBjaG9pY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGNob2ljZS5sb2dwcm9icykgPT0gbnVsbCA/IHZvaWQgMCA6IF9sLmNvbnRlbnQpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkubG9ncHJvYnMgPSBjaG9pY2UubG9ncHJvYnMuY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoY2hvaWNlID09IG51bGwgPyB2b2lkIDAgOiBjaG9pY2UuZGVsdGEpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBjaG9pY2UuZGVsdGE7XG4gICAgICAgICAgICBpZiAoZGVsdGEuY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmICghaXNBY3RpdmVUZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJ0ZXh0LXN0YXJ0XCIsIGlkOiBcIjBcIiB9KTtcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiMFwiLFxuICAgICAgICAgICAgICAgIGRlbHRhOiBkZWx0YS5jb250ZW50XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhLnRvb2xfY2FsbHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRvb2xDYWxsRGVsdGEgb2YgZGVsdGEudG9vbF9jYWxscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdG9vbENhbGxEZWx0YS5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAodG9vbENhbGxzW2luZGV4XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbENhbGxEZWx0YS50eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXNwb25zZURhdGFFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogdG9vbENhbGxEZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgJ2Z1bmN0aW9uJyB0eXBlLmBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbENhbGxEZWx0YS5pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVzcG9uc2VEYXRhRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRvb2xDYWxsRGVsdGEsXG4gICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkICdpZCcgdG8gYmUgYSBzdHJpbmcuYFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICgoKF9tID0gdG9vbENhbGxEZWx0YS5mdW5jdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9tLm5hbWUpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXNwb25zZURhdGFFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogdG9vbENhbGxEZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgJ2Z1bmN0aW9uLm5hbWUnIHRvIGJlIGEgc3RyaW5nLmBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsRGVsdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uLm5hbWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdG9vbENhbGxzW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsRGVsdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiAoX24gPSB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uLmFyZ3VtZW50cykgIT0gbnVsbCA/IF9uIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoYXNGaW5pc2hlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBjb25zdCB0b29sQ2FsbDIgPSB0b29sQ2FsbHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgaWYgKCgoX28gPSB0b29sQ2FsbDIuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfby5uYW1lKSAhPSBudWxsICYmICgoX3AgPSB0b29sQ2FsbDIuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfcC5hcmd1bWVudHMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2xDYWxsMi5mdW5jdGlvbi5hcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZGVsdGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0b29sQ2FsbDIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YTogdG9vbENhbGwyLmZ1bmN0aW9uLmFyZ3VtZW50c1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1BhcnNhYmxlSnNvbih0b29sQ2FsbDIuZnVuY3Rpb24uYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwyLmlkXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiAoX3EgPSB0b29sQ2FsbDIuaWQpICE9IG51bGwgPyBfcSA6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB0b29sQ2FsbDIuZnVuY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiB0b29sQ2FsbDIuZnVuY3Rpb24uYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGwyLmhhc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb2xDYWxsID0gdG9vbENhbGxzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAodG9vbENhbGwuaGFzRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKChfciA9IHRvb2xDYWxsRGVsdGEuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfci5hcmd1bWVudHMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyArPSAoX3QgPSAoX3MgPSB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3MuYXJndW1lbnRzKSAhPSBudWxsID8gX3QgOiBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICAgICAgICBkZWx0YTogKF91ID0gdG9vbENhbGxEZWx0YS5mdW5jdGlvbi5hcmd1bWVudHMpICE9IG51bGwgPyBfdSA6IFwiXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoKChfdiA9IHRvb2xDYWxsLmZ1bmN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3YubmFtZSkgIT0gbnVsbCAmJiAoKF93ID0gdG9vbENhbGwuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdy5hcmd1bWVudHMpICE9IG51bGwgJiYgaXNQYXJzYWJsZUpzb24odG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWVuZFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwuaWRcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogKF94ID0gdG9vbENhbGwuaWQpICE9IG51bGwgPyBfeCA6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdG9vbENhbGwuaGFzRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhLmFubm90YXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGRlbHRhLmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwic291cmNlXCIsXG4gICAgICAgICAgICAgICAgICBzb3VyY2VUeXBlOiBcInVybFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICAgICAgICAgIHVybDogYW5ub3RhdGlvbi51cmwsXG4gICAgICAgICAgICAgICAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmbHVzaChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpZiAoaXNBY3RpdmVUZXh0KSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwidGV4dC1lbmRcIiwgaWQ6IFwiMFwiIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJmaW5pc2hcIixcbiAgICAgICAgICAgICAgZmluaXNoUmVhc29uLFxuICAgICAgICAgICAgICB1c2FnZSxcbiAgICAgICAgICAgICAgLi4ucHJvdmlkZXJNZXRhZGF0YSAhPSBudWxsID8geyBwcm92aWRlck1ldGFkYXRhIH0gOiB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHJlcXVlc3Q6IHsgYm9keSB9LFxuICAgICAgcmVzcG9uc2U6IHsgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzIH1cbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gaXNSZWFzb25pbmdNb2RlbChtb2RlbElkKSB7XG4gIHJldHVybiAobW9kZWxJZC5zdGFydHNXaXRoKFwib1wiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNVwiKSkgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIik7XG59XG5mdW5jdGlvbiBzdXBwb3J0c0ZsZXhQcm9jZXNzaW5nKG1vZGVsSWQpIHtcbiAgcmV0dXJuIG1vZGVsSWQuc3RhcnRzV2l0aChcIm8zXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm80LW1pbmlcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTVcIikgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIik7XG59XG5mdW5jdGlvbiBzdXBwb3J0c1ByaW9yaXR5UHJvY2Vzc2luZyhtb2RlbElkKSB7XG4gIHJldHVybiBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNFwiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1taW5pXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01XCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1uYW5vXCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1jaGF0XCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm8zXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm80LW1pbmlcIik7XG59XG5mdW5jdGlvbiBnZXRTeXN0ZW1NZXNzYWdlTW9kZShtb2RlbElkKSB7XG4gIHZhciBfYSwgX2I7XG4gIGlmICghaXNSZWFzb25pbmdNb2RlbChtb2RlbElkKSkge1xuICAgIHJldHVybiBcInN5c3RlbVwiO1xuICB9XG4gIHJldHVybiAoX2IgPSAoX2EgPSByZWFzb25pbmdNb2RlbHNbbW9kZWxJZF0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5zeXN0ZW1NZXNzYWdlTW9kZSkgIT0gbnVsbCA/IF9iIDogXCJkZXZlbG9wZXJcIjtcbn1cbnZhciByZWFzb25pbmdNb2RlbHMgPSB7XG4gIFwibzEtbWluaVwiOiB7XG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwicmVtb3ZlXCJcbiAgfSxcbiAgXCJvMS1taW5pLTIwMjQtMDktMTJcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcInJlbW92ZVwiXG4gIH0sXG4gIFwibzEtcHJldmlld1wiOiB7XG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwicmVtb3ZlXCJcbiAgfSxcbiAgXCJvMS1wcmV2aWV3LTIwMjQtMDktMTJcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcInJlbW92ZVwiXG4gIH0sXG4gIG8zOiB7XG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwiZGV2ZWxvcGVyXCJcbiAgfSxcbiAgXCJvMy0yMDI1LTA0LTE2XCI6IHtcbiAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJkZXZlbG9wZXJcIlxuICB9LFxuICBcIm8zLW1pbmlcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcImRldmVsb3BlclwiXG4gIH0sXG4gIFwibzMtbWluaS0yMDI1LTAxLTMxXCI6IHtcbiAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJkZXZlbG9wZXJcIlxuICB9LFxuICBcIm80LW1pbmlcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcImRldmVsb3BlclwiXG4gIH0sXG4gIFwibzQtbWluaS0yMDI1LTA0LTE2XCI6IHtcbiAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJkZXZlbG9wZXJcIlxuICB9XG59O1xuXG4vLyBzcmMvY29tcGxldGlvbi9vcGVuYWktY29tcGxldGlvbi1sYW5ndWFnZS1tb2RlbC50c1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnMyLFxuICBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlciBhcyBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlcjIsXG4gIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIgYXMgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlcjIsXG4gIHBhcnNlUHJvdmlkZXJPcHRpb25zIGFzIHBhcnNlUHJvdmlkZXJPcHRpb25zMixcbiAgcG9zdEpzb25Ub0FwaSBhcyBwb3N0SnNvblRvQXBpMlxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuXG4vLyBzcmMvY29tcGxldGlvbi9jb252ZXJ0LXRvLW9wZW5haS1jb21wbGV0aW9uLXByb21wdC50c1xuaW1wb3J0IHtcbiAgSW52YWxpZFByb21wdEVycm9yLFxuICBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvciBhcyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjNcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbmZ1bmN0aW9uIGNvbnZlcnRUb09wZW5BSUNvbXBsZXRpb25Qcm9tcHQoe1xuICBwcm9tcHQsXG4gIHVzZXIgPSBcInVzZXJcIixcbiAgYXNzaXN0YW50ID0gXCJhc3Npc3RhbnRcIlxufSkge1xuICBsZXQgdGV4dCA9IFwiXCI7XG4gIGlmIChwcm9tcHRbMF0ucm9sZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgIHRleHQgKz0gYCR7cHJvbXB0WzBdLmNvbnRlbnR9XG5cbmA7XG4gICAgcHJvbXB0ID0gcHJvbXB0LnNsaWNlKDEpO1xuICB9XG4gIGZvciAoY29uc3QgeyByb2xlLCBjb250ZW50IH0gb2YgcHJvbXB0KSB7XG4gICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICBjYXNlIFwic3lzdGVtXCI6IHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRQcm9tcHRFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogXCJVbmV4cGVjdGVkIHN5c3RlbSBtZXNzYWdlIGluIHByb21wdDogJHtjb250ZW50fVwiLFxuICAgICAgICAgIHByb21wdFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ1c2VyXCI6IHtcbiAgICAgICAgY29uc3QgdXNlck1lc3NhZ2UgPSBjb250ZW50Lm1hcCgocGFydCkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAocGFydC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJ0LnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbikuam9pbihcIlwiKTtcbiAgICAgICAgdGV4dCArPSBgJHt1c2VyfTpcbiR7dXNlck1lc3NhZ2V9XG5cbmA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImFzc2lzdGFudFwiOiB7XG4gICAgICAgIGNvbnN0IGFzc2lzdGFudE1lc3NhZ2UgPSBjb250ZW50Lm1hcCgocGFydCkgPT4ge1xuICAgICAgICAgIHN3aXRjaCAocGFydC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgIHJldHVybiBwYXJ0LnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidG9vbC1jYWxsXCI6IHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yMyh7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0eTogXCJ0b29sLWNhbGwgbWVzc2FnZXNcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgIHRleHQgKz0gYCR7YXNzaXN0YW50fTpcbiR7YXNzaXN0YW50TWVzc2FnZX1cblxuYDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidG9vbFwiOiB7XG4gICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjMoe1xuICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IFwidG9vbCBtZXNzYWdlc1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gcm9sZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByb2xlOiAke19leGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRleHQgKz0gYCR7YXNzaXN0YW50fTpcbmA7XG4gIHJldHVybiB7XG4gICAgcHJvbXB0OiB0ZXh0LFxuICAgIHN0b3BTZXF1ZW5jZXM6IFtgXG4ke3VzZXJ9OmBdXG4gIH07XG59XG5cbi8vIHNyYy9jb21wbGV0aW9uL2dldC1yZXNwb25zZS1tZXRhZGF0YS50c1xuZnVuY3Rpb24gZ2V0UmVzcG9uc2VNZXRhZGF0YTIoe1xuICBpZCxcbiAgbW9kZWwsXG4gIGNyZWF0ZWRcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogaWQgIT0gbnVsbCA/IGlkIDogdm9pZCAwLFxuICAgIG1vZGVsSWQ6IG1vZGVsICE9IG51bGwgPyBtb2RlbCA6IHZvaWQgMCxcbiAgICB0aW1lc3RhbXA6IGNyZWF0ZWQgIT0gbnVsbCA/IG5ldyBEYXRlKGNyZWF0ZWQgKiAxZTMpIDogdm9pZCAwXG4gIH07XG59XG5cbi8vIHNyYy9jb21wbGV0aW9uL21hcC1vcGVuYWktZmluaXNoLXJlYXNvbi50c1xuZnVuY3Rpb24gbWFwT3BlbkFJRmluaXNoUmVhc29uMihmaW5pc2hSZWFzb24pIHtcbiAgc3dpdGNoIChmaW5pc2hSZWFzb24pIHtcbiAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgcmV0dXJuIFwic3RvcFwiO1xuICAgIGNhc2UgXCJsZW5ndGhcIjpcbiAgICAgIHJldHVybiBcImxlbmd0aFwiO1xuICAgIGNhc2UgXCJjb250ZW50X2ZpbHRlclwiOlxuICAgICAgcmV0dXJuIFwiY29udGVudC1maWx0ZXJcIjtcbiAgICBjYXNlIFwiZnVuY3Rpb25fY2FsbFwiOlxuICAgIGNhc2UgXCJ0b29sX2NhbGxzXCI6XG4gICAgICByZXR1cm4gXCJ0b29sLWNhbGxzXCI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcInVua25vd25cIjtcbiAgfVxufVxuXG4vLyBzcmMvY29tcGxldGlvbi9vcGVuYWktY29tcGxldGlvbi1hcGkudHNcbmltcG9ydCB7IHogYXMgejQgfSBmcm9tIFwiem9kL3Y0XCI7XG5pbXBvcnQge1xuICBsYXp5VmFsaWRhdG9yIGFzIGxhenlWYWxpZGF0b3IzLFxuICB6b2RTY2hlbWEgYXMgem9kU2NoZW1hM1xufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xudmFyIG9wZW5haUNvbXBsZXRpb25SZXNwb25zZVNjaGVtYSA9IGxhenlWYWxpZGF0b3IzKFxuICAoKSA9PiB6b2RTY2hlbWEzKFxuICAgIHo0Lm9iamVjdCh7XG4gICAgICBpZDogejQuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgY3JlYXRlZDogejQubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgbW9kZWw6IHo0LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgIGNob2ljZXM6IHo0LmFycmF5KFxuICAgICAgICB6NC5vYmplY3Qoe1xuICAgICAgICAgIHRleHQ6IHo0LnN0cmluZygpLFxuICAgICAgICAgIGZpbmlzaF9yZWFzb246IHo0LnN0cmluZygpLFxuICAgICAgICAgIGxvZ3Byb2JzOiB6NC5vYmplY3Qoe1xuICAgICAgICAgICAgdG9rZW5zOiB6NC5hcnJheSh6NC5zdHJpbmcoKSksXG4gICAgICAgICAgICB0b2tlbl9sb2dwcm9iczogejQuYXJyYXkoejQubnVtYmVyKCkpLFxuICAgICAgICAgICAgdG9wX2xvZ3Byb2JzOiB6NC5hcnJheSh6NC5yZWNvcmQoejQuc3RyaW5nKCksIHo0Lm51bWJlcigpKSkubnVsbGlzaCgpXG4gICAgICAgICAgfSkubnVsbGlzaCgpXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdXNhZ2U6IHo0Lm9iamVjdCh7XG4gICAgICAgIHByb21wdF90b2tlbnM6IHo0Lm51bWJlcigpLFxuICAgICAgICBjb21wbGV0aW9uX3Rva2VuczogejQubnVtYmVyKCksXG4gICAgICAgIHRvdGFsX3Rva2VuczogejQubnVtYmVyKClcbiAgICAgIH0pLm51bGxpc2goKVxuICAgIH0pXG4gIClcbik7XG52YXIgb3BlbmFpQ29tcGxldGlvbkNodW5rU2NoZW1hID0gbGF6eVZhbGlkYXRvcjMoXG4gICgpID0+IHpvZFNjaGVtYTMoXG4gICAgejQudW5pb24oW1xuICAgICAgejQub2JqZWN0KHtcbiAgICAgICAgaWQ6IHo0LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgICAgY3JlYXRlZDogejQubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICBtb2RlbDogejQuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICBjaG9pY2VzOiB6NC5hcnJheShcbiAgICAgICAgICB6NC5vYmplY3Qoe1xuICAgICAgICAgICAgdGV4dDogejQuc3RyaW5nKCksXG4gICAgICAgICAgICBmaW5pc2hfcmVhc29uOiB6NC5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICBpbmRleDogejQubnVtYmVyKCksXG4gICAgICAgICAgICBsb2dwcm9iczogejQub2JqZWN0KHtcbiAgICAgICAgICAgICAgdG9rZW5zOiB6NC5hcnJheSh6NC5zdHJpbmcoKSksXG4gICAgICAgICAgICAgIHRva2VuX2xvZ3Byb2JzOiB6NC5hcnJheSh6NC5udW1iZXIoKSksXG4gICAgICAgICAgICAgIHRvcF9sb2dwcm9iczogejQuYXJyYXkoejQucmVjb3JkKHo0LnN0cmluZygpLCB6NC5udW1iZXIoKSkpLm51bGxpc2goKVxuICAgICAgICAgICAgfSkubnVsbGlzaCgpXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgdXNhZ2U6IHo0Lm9iamVjdCh7XG4gICAgICAgICAgcHJvbXB0X3Rva2VuczogejQubnVtYmVyKCksXG4gICAgICAgICAgY29tcGxldGlvbl90b2tlbnM6IHo0Lm51bWJlcigpLFxuICAgICAgICAgIHRvdGFsX3Rva2VuczogejQubnVtYmVyKClcbiAgICAgICAgfSkubnVsbGlzaCgpXG4gICAgICB9KSxcbiAgICAgIG9wZW5haUVycm9yRGF0YVNjaGVtYVxuICAgIF0pXG4gIClcbik7XG5cbi8vIHNyYy9jb21wbGV0aW9uL29wZW5haS1jb21wbGV0aW9uLW9wdGlvbnMudHNcbmltcG9ydCB7XG4gIGxhenlWYWxpZGF0b3IgYXMgbGF6eVZhbGlkYXRvcjQsXG4gIHpvZFNjaGVtYSBhcyB6b2RTY2hlbWE0XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo1IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haUNvbXBsZXRpb25Qcm92aWRlck9wdGlvbnMgPSBsYXp5VmFsaWRhdG9yNChcbiAgKCkgPT4gem9kU2NoZW1hNChcbiAgICB6NS5vYmplY3Qoe1xuICAgICAgLyoqXG4gICAgICBFY2hvIGJhY2sgdGhlIHByb21wdCBpbiBhZGRpdGlvbiB0byB0aGUgY29tcGxldGlvbi5cbiAgICAgICAgICovXG4gICAgICBlY2hvOiB6NS5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgTW9kaWZ5IHRoZSBsaWtlbGlob29kIG9mIHNwZWNpZmllZCB0b2tlbnMgYXBwZWFyaW5nIGluIHRoZSBjb21wbGV0aW9uLlxuICAgICAgXG4gICAgICBBY2NlcHRzIGEgSlNPTiBvYmplY3QgdGhhdCBtYXBzIHRva2VucyAoc3BlY2lmaWVkIGJ5IHRoZWlyIHRva2VuIElEIGluXG4gICAgICB0aGUgR1BUIHRva2VuaXplcikgdG8gYW4gYXNzb2NpYXRlZCBiaWFzIHZhbHVlIGZyb20gLTEwMCB0byAxMDAuIFlvdVxuICAgICAgY2FuIHVzZSB0aGlzIHRva2VuaXplciB0b29sIHRvIGNvbnZlcnQgdGV4dCB0byB0b2tlbiBJRHMuIE1hdGhlbWF0aWNhbGx5LFxuICAgICAgdGhlIGJpYXMgaXMgYWRkZWQgdG8gdGhlIGxvZ2l0cyBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsIHByaW9yIHRvIHNhbXBsaW5nLlxuICAgICAgVGhlIGV4YWN0IGVmZmVjdCB3aWxsIHZhcnkgcGVyIG1vZGVsLCBidXQgdmFsdWVzIGJldHdlZW4gLTEgYW5kIDEgc2hvdWxkXG4gICAgICBkZWNyZWFzZSBvciBpbmNyZWFzZSBsaWtlbGlob29kIG9mIHNlbGVjdGlvbjsgdmFsdWVzIGxpa2UgLTEwMCBvciAxMDBcbiAgICAgIHNob3VsZCByZXN1bHQgaW4gYSBiYW4gb3IgZXhjbHVzaXZlIHNlbGVjdGlvbiBvZiB0aGUgcmVsZXZhbnQgdG9rZW4uXG4gICAgICBcbiAgICAgIEFzIGFuIGV4YW1wbGUsIHlvdSBjYW4gcGFzcyB7XCI1MDI1NlwiOiAtMTAwfSB0byBwcmV2ZW50IHRoZSA8fGVuZG9mdGV4dHw+XG4gICAgICB0b2tlbiBmcm9tIGJlaW5nIGdlbmVyYXRlZC5cbiAgICAgICAqL1xuICAgICAgbG9naXRCaWFzOiB6NS5yZWNvcmQoejUuc3RyaW5nKCksIHo1Lm51bWJlcigpKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICBUaGUgc3VmZml4IHRoYXQgY29tZXMgYWZ0ZXIgYSBjb21wbGV0aW9uIG9mIGluc2VydGVkIHRleHQuXG4gICAgICAgKi9cbiAgICAgIHN1ZmZpeDogejUuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvXG4gICAgICBtb25pdG9yIGFuZCBkZXRlY3QgYWJ1c2UuIExlYXJuIG1vcmUuXG4gICAgICAgKi9cbiAgICAgIHVzZXI6IHo1LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgIFJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRva2Vucy4gSW5jbHVkaW5nIGxvZ3Byb2JzIHdpbGwgaW5jcmVhc2VcbiAgICAgIHRoZSByZXNwb25zZSBzaXplIGFuZCBjYW4gc2xvdyBkb3duIHJlc3BvbnNlIHRpbWVzLiBIb3dldmVyLCBpdCBjYW5cbiAgICAgIGJlIHVzZWZ1bCB0byBiZXR0ZXIgdW5kZXJzdGFuZCBob3cgdGhlIG1vZGVsIGlzIGJlaGF2aW5nLlxuICAgICAgU2V0dGluZyB0byB0cnVlIHdpbGwgcmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9rZW5zIHRoYXRcbiAgICAgIHdlcmUgZ2VuZXJhdGVkLlxuICAgICAgU2V0dGluZyB0byBhIG51bWJlciB3aWxsIHJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRvcCBuXG4gICAgICB0b2tlbnMgdGhhdCB3ZXJlIGdlbmVyYXRlZC5cbiAgICAgICAgICovXG4gICAgICBsb2dwcm9iczogejUudW5pb24oW3o1LmJvb2xlYW4oKSwgejUubnVtYmVyKCldKS5vcHRpb25hbCgpXG4gICAgfSlcbiAgKVxuKTtcblxuLy8gc3JjL2NvbXBsZXRpb24vb3BlbmFpLWNvbXBsZXRpb24tbGFuZ3VhZ2UtbW9kZWwudHNcbnZhciBPcGVuQUlDb21wbGV0aW9uTGFuZ3VhZ2VNb2RlbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobW9kZWxJZCwgY29uZmlnKSB7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmVyc2lvbiA9IFwidjJcIjtcbiAgICB0aGlzLnN1cHBvcnRlZFVybHMgPSB7XG4gICAgICAvLyBObyBVUkxzIGFyZSBzdXBwb3J0ZWQgZm9yIGNvbXBsZXRpb24gbW9kZWxzLlxuICAgIH07XG4gICAgdGhpcy5tb2RlbElkID0gbW9kZWxJZDtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgfVxuICBnZXQgcHJvdmlkZXJPcHRpb25zTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXIuc3BsaXQoXCIuXCIpWzBdLnRyaW0oKTtcbiAgfVxuICBnZXQgcHJvdmlkZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnByb3ZpZGVyO1xuICB9XG4gIGFzeW5jIGdldEFyZ3Moe1xuICAgIHByb21wdCxcbiAgICBtYXhPdXRwdXRUb2tlbnMsXG4gICAgdGVtcGVyYXR1cmUsXG4gICAgdG9wUCxcbiAgICB0b3BLLFxuICAgIGZyZXF1ZW5jeVBlbmFsdHksXG4gICAgcHJlc2VuY2VQZW5hbHR5LFxuICAgIHN0b3BTZXF1ZW5jZXM6IHVzZXJTdG9wU2VxdWVuY2VzLFxuICAgIHJlc3BvbnNlRm9ybWF0LFxuICAgIHRvb2xzLFxuICAgIHRvb2xDaG9pY2UsXG4gICAgc2VlZCxcbiAgICBwcm92aWRlck9wdGlvbnNcbiAgfSkge1xuICAgIGNvbnN0IHdhcm5pbmdzID0gW107XG4gICAgY29uc3Qgb3BlbmFpT3B0aW9ucyA9IHtcbiAgICAgIC4uLmF3YWl0IHBhcnNlUHJvdmlkZXJPcHRpb25zMih7XG4gICAgICAgIHByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICAgIHNjaGVtYTogb3BlbmFpQ29tcGxldGlvblByb3ZpZGVyT3B0aW9uc1xuICAgICAgfSksXG4gICAgICAuLi5hd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczIoe1xuICAgICAgICBwcm92aWRlcjogdGhpcy5wcm92aWRlck9wdGlvbnNOYW1lLFxuICAgICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICAgIHNjaGVtYTogb3BlbmFpQ29tcGxldGlvblByb3ZpZGVyT3B0aW9uc1xuICAgICAgfSlcbiAgICB9O1xuICAgIGlmICh0b3BLICE9IG51bGwpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goeyB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIiwgc2V0dGluZzogXCJ0b3BLXCIgfSk7XG4gICAgfVxuICAgIGlmICh0b29scyA9PSBudWxsID8gdm9pZCAwIDogdG9vbHMubGVuZ3RoKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsIHNldHRpbmc6IFwidG9vbHNcIiB9KTtcbiAgICB9XG4gICAgaWYgKHRvb2xDaG9pY2UgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7IHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLCBzZXR0aW5nOiBcInRvb2xDaG9pY2VcIiB9KTtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlRm9ybWF0ICE9IG51bGwgJiYgcmVzcG9uc2VGb3JtYXQudHlwZSAhPT0gXCJ0ZXh0XCIpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJyZXNwb25zZUZvcm1hdFwiLFxuICAgICAgICBkZXRhaWxzOiBcIkpTT04gcmVzcG9uc2UgZm9ybWF0IGlzIG5vdCBzdXBwb3J0ZWQuXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB7IHByb21wdDogY29tcGxldGlvblByb21wdCwgc3RvcFNlcXVlbmNlcyB9ID0gY29udmVydFRvT3BlbkFJQ29tcGxldGlvblByb21wdCh7IHByb21wdCB9KTtcbiAgICBjb25zdCBzdG9wID0gWy4uLnN0b3BTZXF1ZW5jZXMgIT0gbnVsbCA/IHN0b3BTZXF1ZW5jZXMgOiBbXSwgLi4udXNlclN0b3BTZXF1ZW5jZXMgIT0gbnVsbCA/IHVzZXJTdG9wU2VxdWVuY2VzIDogW11dO1xuICAgIHJldHVybiB7XG4gICAgICBhcmdzOiB7XG4gICAgICAgIC8vIG1vZGVsIGlkOlxuICAgICAgICBtb2RlbDogdGhpcy5tb2RlbElkLFxuICAgICAgICAvLyBtb2RlbCBzcGVjaWZpYyBzZXR0aW5nczpcbiAgICAgICAgZWNobzogb3BlbmFpT3B0aW9ucy5lY2hvLFxuICAgICAgICBsb2dpdF9iaWFzOiBvcGVuYWlPcHRpb25zLmxvZ2l0QmlhcyxcbiAgICAgICAgbG9ncHJvYnM6IChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzKSA9PT0gdHJ1ZSA/IDAgOiAob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5sb2dwcm9icykgPT09IGZhbHNlID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5sb2dwcm9icyxcbiAgICAgICAgc3VmZml4OiBvcGVuYWlPcHRpb25zLnN1ZmZpeCxcbiAgICAgICAgdXNlcjogb3BlbmFpT3B0aW9ucy51c2VyLFxuICAgICAgICAvLyBzdGFuZGFyZGl6ZWQgc2V0dGluZ3M6XG4gICAgICAgIG1heF90b2tlbnM6IG1heE91dHB1dFRva2VucyxcbiAgICAgICAgdGVtcGVyYXR1cmUsXG4gICAgICAgIHRvcF9wOiB0b3BQLFxuICAgICAgICBmcmVxdWVuY3lfcGVuYWx0eTogZnJlcXVlbmN5UGVuYWx0eSxcbiAgICAgICAgcHJlc2VuY2VfcGVuYWx0eTogcHJlc2VuY2VQZW5hbHR5LFxuICAgICAgICBzZWVkLFxuICAgICAgICAvLyBwcm9tcHQ6XG4gICAgICAgIHByb21wdDogY29tcGxldGlvblByb21wdCxcbiAgICAgICAgLy8gc3RvcCBzZXF1ZW5jZXM6XG4gICAgICAgIHN0b3A6IHN0b3AubGVuZ3RoID4gMCA/IHN0b3AgOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICB3YXJuaW5nc1xuICAgIH07XG4gIH1cbiAgYXN5bmMgZG9HZW5lcmF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgY29uc3QgeyBhcmdzLCB3YXJuaW5ncyB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgIHJhd1ZhbHVlOiByYXdSZXNwb25zZVxuICAgIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpMih7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2NvbXBsZXRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczIodGhpcy5jb25maWcuaGVhZGVycygpLCBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgYm9keTogYXJncyxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlcjIoXG4gICAgICAgIG9wZW5haUNvbXBsZXRpb25SZXNwb25zZVNjaGVtYVxuICAgICAgKSxcbiAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgZmV0Y2g6IHRoaXMuY29uZmlnLmZldGNoXG4gICAgfSk7XG4gICAgY29uc3QgY2hvaWNlID0gcmVzcG9uc2UuY2hvaWNlc1swXTtcbiAgICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0geyBvcGVuYWk6IHt9IH07XG4gICAgaWYgKGNob2ljZS5sb2dwcm9icyAhPSBudWxsKSB7XG4gICAgICBwcm92aWRlck1ldGFkYXRhLm9wZW5haS5sb2dwcm9icyA9IGNob2ljZS5sb2dwcm9icztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6IFwidGV4dFwiLCB0ZXh0OiBjaG9pY2UudGV4dCB9XSxcbiAgICAgIHVzYWdlOiB7XG4gICAgICAgIGlucHV0VG9rZW5zOiAoX2EgPSByZXNwb25zZS51c2FnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnByb21wdF90b2tlbnMsXG4gICAgICAgIG91dHB1dFRva2VuczogKF9iID0gcmVzcG9uc2UudXNhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jb21wbGV0aW9uX3Rva2VucyxcbiAgICAgICAgdG90YWxUb2tlbnM6IChfYyA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2MudG90YWxfdG9rZW5zXG4gICAgICB9LFxuICAgICAgZmluaXNoUmVhc29uOiBtYXBPcGVuQUlGaW5pc2hSZWFzb24yKGNob2ljZS5maW5pc2hfcmVhc29uKSxcbiAgICAgIHJlcXVlc3Q6IHsgYm9keTogYXJncyB9LFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgLi4uZ2V0UmVzcG9uc2VNZXRhZGF0YTIocmVzcG9uc2UpLFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGJvZHk6IHJhd1Jlc3BvbnNlXG4gICAgICB9LFxuICAgICAgcHJvdmlkZXJNZXRhZGF0YSxcbiAgICAgIHdhcm5pbmdzXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb1N0cmVhbShvcHRpb25zKSB7XG4gICAgY29uc3QgeyBhcmdzLCB3YXJuaW5ncyB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAuLi5hcmdzLFxuICAgICAgc3RyZWFtOiB0cnVlLFxuICAgICAgc3RyZWFtX29wdGlvbnM6IHtcbiAgICAgICAgaW5jbHVkZV91c2FnZTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgeyByZXNwb25zZUhlYWRlcnMsIHZhbHVlOiByZXNwb25zZSB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaTIoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgICBwYXRoOiBcIi9jb21wbGV0aW9uc1wiLFxuICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWRcbiAgICAgIH0pLFxuICAgICAgaGVhZGVyczogY29tYmluZUhlYWRlcnMyKHRoaXMuY29uZmlnLmhlYWRlcnMoKSwgb3B0aW9ucy5oZWFkZXJzKSxcbiAgICAgIGJvZHksXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUV2ZW50U291cmNlUmVzcG9uc2VIYW5kbGVyMihcbiAgICAgICAgb3BlbmFpQ29tcGxldGlvbkNodW5rU2NoZW1hXG4gICAgICApLFxuICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICBmZXRjaDogdGhpcy5jb25maWcuZmV0Y2hcbiAgICB9KTtcbiAgICBsZXQgZmluaXNoUmVhc29uID0gXCJ1bmtub3duXCI7XG4gICAgY29uc3QgcHJvdmlkZXJNZXRhZGF0YSA9IHsgb3BlbmFpOiB7fSB9O1xuICAgIGNvbnN0IHVzYWdlID0ge1xuICAgICAgaW5wdXRUb2tlbnM6IHZvaWQgMCxcbiAgICAgIG91dHB1dFRva2Vuczogdm9pZCAwLFxuICAgICAgdG90YWxUb2tlbnM6IHZvaWQgMFxuICAgIH07XG4gICAgbGV0IGlzRmlyc3RDaHVuayA9IHRydWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogcmVzcG9uc2UucGlwZVRocm91Z2goXG4gICAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwic3RyZWFtLXN0YXJ0XCIsIHdhcm5pbmdzIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlUmF3Q2h1bmtzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwicmF3XCIsIHJhd1ZhbHVlOiBjaHVuay5yYXdWYWx1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2h1bmsuc3VjY2Vzcykge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBcImVycm9yXCI7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IGNodW5rLmVycm9yIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNodW5rLnZhbHVlO1xuICAgICAgICAgICAgaWYgKFwiZXJyb3JcIiBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBcImVycm9yXCI7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IHZhbHVlLmVycm9yIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGaXJzdENodW5rKSB7XG4gICAgICAgICAgICAgIGlzRmlyc3RDaHVuayA9IGZhbHNlO1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicmVzcG9uc2UtbWV0YWRhdGFcIixcbiAgICAgICAgICAgICAgICAuLi5nZXRSZXNwb25zZU1ldGFkYXRhMih2YWx1ZSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwidGV4dC1zdGFydFwiLCBpZDogXCIwXCIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUudXNhZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICB1c2FnZS5pbnB1dFRva2VucyA9IHZhbHVlLnVzYWdlLnByb21wdF90b2tlbnM7XG4gICAgICAgICAgICAgIHVzYWdlLm91dHB1dFRva2VucyA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zO1xuICAgICAgICAgICAgICB1c2FnZS50b3RhbFRva2VucyA9IHZhbHVlLnVzYWdlLnRvdGFsX3Rva2VucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNob2ljZSA9IHZhbHVlLmNob2ljZXNbMF07XG4gICAgICAgICAgICBpZiAoKGNob2ljZSA9PSBudWxsID8gdm9pZCAwIDogY2hvaWNlLmZpbmlzaF9yZWFzb24pICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgZmluaXNoUmVhc29uID0gbWFwT3BlbkFJRmluaXNoUmVhc29uMihjaG9pY2UuZmluaXNoX3JlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGNob2ljZSA9PSBudWxsID8gdm9pZCAwIDogY2hvaWNlLmxvZ3Byb2JzKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmxvZ3Byb2JzID0gY2hvaWNlLmxvZ3Byb2JzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChjaG9pY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGNob2ljZS50ZXh0KSAhPSBudWxsICYmIGNob2ljZS50ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRleHQtZGVsdGFcIixcbiAgICAgICAgICAgICAgICBpZDogXCIwXCIsXG4gICAgICAgICAgICAgICAgZGVsdGE6IGNob2ljZS50ZXh0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmx1c2goY29udHJvbGxlcikge1xuICAgICAgICAgICAgaWYgKCFpc0ZpcnN0Q2h1bmspIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJ0ZXh0LWVuZFwiLCBpZDogXCIwXCIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICB0eXBlOiBcImZpbmlzaFwiLFxuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24sXG4gICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEsXG4gICAgICAgICAgICAgIHVzYWdlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgcmVxdWVzdDogeyBib2R5IH0sXG4gICAgICByZXNwb25zZTogeyBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMgfVxuICAgIH07XG4gIH1cbn07XG5cbi8vIHNyYy9lbWJlZGRpbmcvb3BlbmFpLWVtYmVkZGluZy1tb2RlbC50c1xuaW1wb3J0IHtcbiAgVG9vTWFueUVtYmVkZGluZ1ZhbHVlc0ZvckNhbGxFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnMzLFxuICBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyIGFzIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIzLFxuICBwYXJzZVByb3ZpZGVyT3B0aW9ucyBhcyBwYXJzZVByb3ZpZGVyT3B0aW9uczMsXG4gIHBvc3RKc29uVG9BcGkgYXMgcG9zdEpzb25Ub0FwaTNcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcblxuLy8gc3JjL2VtYmVkZGluZy9vcGVuYWktZW1iZWRkaW5nLW9wdGlvbnMudHNcbmltcG9ydCB7XG4gIGxhenlWYWxpZGF0b3IgYXMgbGF6eVZhbGlkYXRvcjUsXG4gIHpvZFNjaGVtYSBhcyB6b2RTY2hlbWE1XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo2IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haUVtYmVkZGluZ1Byb3ZpZGVyT3B0aW9ucyA9IGxhenlWYWxpZGF0b3I1KFxuICAoKSA9PiB6b2RTY2hlbWE1KFxuICAgIHo2Lm9iamVjdCh7XG4gICAgICAvKipcbiAgICAgIFRoZSBudW1iZXIgb2YgZGltZW5zaW9ucyB0aGUgcmVzdWx0aW5nIG91dHB1dCBlbWJlZGRpbmdzIHNob3VsZCBoYXZlLlxuICAgICAgT25seSBzdXBwb3J0ZWQgaW4gdGV4dC1lbWJlZGRpbmctMyBhbmQgbGF0ZXIgbW9kZWxzLlxuICAgICAgICAgKi9cbiAgICAgIGRpbWVuc2lvbnM6IHo2Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0b1xuICAgICAgbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLiBMZWFybiBtb3JlLlxuICAgICAgKi9cbiAgICAgIHVzZXI6IHo2LnN0cmluZygpLm9wdGlvbmFsKClcbiAgICB9KVxuICApXG4pO1xuXG4vLyBzcmMvZW1iZWRkaW5nL29wZW5haS1lbWJlZGRpbmctYXBpLnRzXG5pbXBvcnQgeyBsYXp5VmFsaWRhdG9yIGFzIGxhenlWYWxpZGF0b3I2LCB6b2RTY2hlbWEgYXMgem9kU2NoZW1hNiB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo3IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haVRleHRFbWJlZGRpbmdSZXNwb25zZVNjaGVtYSA9IGxhenlWYWxpZGF0b3I2KFxuICAoKSA9PiB6b2RTY2hlbWE2KFxuICAgIHo3Lm9iamVjdCh7XG4gICAgICBkYXRhOiB6Ny5hcnJheSh6Ny5vYmplY3QoeyBlbWJlZGRpbmc6IHo3LmFycmF5KHo3Lm51bWJlcigpKSB9KSksXG4gICAgICB1c2FnZTogejcub2JqZWN0KHsgcHJvbXB0X3Rva2VuczogejcubnVtYmVyKCkgfSkubnVsbGlzaCgpXG4gICAgfSlcbiAgKVxuKTtcblxuLy8gc3JjL2VtYmVkZGluZy9vcGVuYWktZW1iZWRkaW5nLW1vZGVsLnRzXG52YXIgT3BlbkFJRW1iZWRkaW5nTW9kZWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG1vZGVsSWQsIGNvbmZpZykge1xuICAgIHRoaXMuc3BlY2lmaWNhdGlvblZlcnNpb24gPSBcInYyXCI7XG4gICAgdGhpcy5tYXhFbWJlZGRpbmdzUGVyQ2FsbCA9IDIwNDg7XG4gICAgdGhpcy5zdXBwb3J0c1BhcmFsbGVsQ2FsbHMgPSB0cnVlO1xuICAgIHRoaXMubW9kZWxJZCA9IG1vZGVsSWQ7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBhc3luYyBkb0VtYmVkKHtcbiAgICB2YWx1ZXMsXG4gICAgaGVhZGVycyxcbiAgICBhYm9ydFNpZ25hbCxcbiAgICBwcm92aWRlck9wdGlvbnNcbiAgfSkge1xuICAgIHZhciBfYTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA+IHRoaXMubWF4RW1iZWRkaW5nc1BlckNhbGwpIHtcbiAgICAgIHRocm93IG5ldyBUb29NYW55RW1iZWRkaW5nVmFsdWVzRm9yQ2FsbEVycm9yKHtcbiAgICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZCxcbiAgICAgICAgbWF4RW1iZWRkaW5nc1BlckNhbGw6IHRoaXMubWF4RW1iZWRkaW5nc1BlckNhbGwsXG4gICAgICAgIHZhbHVlc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG9wZW5haU9wdGlvbnMgPSAoX2EgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczMoe1xuICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICBzY2hlbWE6IG9wZW5haUVtYmVkZGluZ1Byb3ZpZGVyT3B0aW9uc1xuICAgIH0pKSAhPSBudWxsID8gX2EgOiB7fTtcbiAgICBjb25zdCB7XG4gICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICB2YWx1ZTogcmVzcG9uc2UsXG4gICAgICByYXdWYWx1ZVxuICAgIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpMyh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2VtYmVkZGluZ3NcIixcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IGNvbWJpbmVIZWFkZXJzMyh0aGlzLmNvbmZpZy5oZWFkZXJzKCksIGhlYWRlcnMpLFxuICAgICAgYm9keToge1xuICAgICAgICBtb2RlbDogdGhpcy5tb2RlbElkLFxuICAgICAgICBpbnB1dDogdmFsdWVzLFxuICAgICAgICBlbmNvZGluZ19mb3JtYXQ6IFwiZmxvYXRcIixcbiAgICAgICAgZGltZW5zaW9uczogb3BlbmFpT3B0aW9ucy5kaW1lbnNpb25zLFxuICAgICAgICB1c2VyOiBvcGVuYWlPcHRpb25zLnVzZXJcbiAgICAgIH0sXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIzKFxuICAgICAgICBvcGVuYWlUZXh0RW1iZWRkaW5nUmVzcG9uc2VTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBlbWJlZGRpbmdzOiByZXNwb25zZS5kYXRhLm1hcCgoaXRlbSkgPT4gaXRlbS5lbWJlZGRpbmcpLFxuICAgICAgdXNhZ2U6IHJlc3BvbnNlLnVzYWdlID8geyB0b2tlbnM6IHJlc3BvbnNlLnVzYWdlLnByb21wdF90b2tlbnMgfSA6IHZvaWQgMCxcbiAgICAgIHJlc3BvbnNlOiB7IGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycywgYm9keTogcmF3VmFsdWUgfVxuICAgIH07XG4gIH1cbn07XG5cbi8vIHNyYy9pbWFnZS9vcGVuYWktaW1hZ2UtbW9kZWwudHNcbmltcG9ydCB7XG4gIGNvbWJpbmVIZWFkZXJzIGFzIGNvbWJpbmVIZWFkZXJzNCxcbiAgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlciBhcyBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyNCxcbiAgcG9zdEpzb25Ub0FwaSBhcyBwb3N0SnNvblRvQXBpNFxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuXG4vLyBzcmMvaW1hZ2Uvb3BlbmFpLWltYWdlLWFwaS50c1xuaW1wb3J0IHsgbGF6eVZhbGlkYXRvciBhcyBsYXp5VmFsaWRhdG9yNywgem9kU2NoZW1hIGFzIHpvZFNjaGVtYTcgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6OCB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBvcGVuYWlJbWFnZVJlc3BvbnNlU2NoZW1hID0gbGF6eVZhbGlkYXRvcjcoXG4gICgpID0+IHpvZFNjaGVtYTcoXG4gICAgejgub2JqZWN0KHtcbiAgICAgIGRhdGE6IHo4LmFycmF5KFxuICAgICAgICB6OC5vYmplY3Qoe1xuICAgICAgICAgIGI2NF9qc29uOiB6OC5zdHJpbmcoKSxcbiAgICAgICAgICByZXZpc2VkX3Byb21wdDogejguc3RyaW5nKCkub3B0aW9uYWwoKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gIClcbik7XG5cbi8vIHNyYy9pbWFnZS9vcGVuYWktaW1hZ2Utb3B0aW9ucy50c1xudmFyIG1vZGVsTWF4SW1hZ2VzUGVyQ2FsbCA9IHtcbiAgXCJkYWxsLWUtM1wiOiAxLFxuICBcImRhbGwtZS0yXCI6IDEwLFxuICBcImdwdC1pbWFnZS0xXCI6IDEwLFxuICBcImdwdC1pbWFnZS0xLW1pbmlcIjogMTBcbn07XG52YXIgaGFzRGVmYXVsdFJlc3BvbnNlRm9ybWF0ID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICBcImdwdC1pbWFnZS0xXCIsXG4gIFwiZ3B0LWltYWdlLTEtbWluaVwiXG5dKTtcblxuLy8gc3JjL2ltYWdlL29wZW5haS1pbWFnZS1tb2RlbC50c1xudmFyIE9wZW5BSUltYWdlTW9kZWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG1vZGVsSWQsIGNvbmZpZykge1xuICAgIHRoaXMubW9kZWxJZCA9IG1vZGVsSWQ7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmVyc2lvbiA9IFwidjJcIjtcbiAgfVxuICBnZXQgbWF4SW1hZ2VzUGVyQ2FsbCgpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IG1vZGVsTWF4SW1hZ2VzUGVyQ2FsbFt0aGlzLm1vZGVsSWRdKSAhPSBudWxsID8gX2EgOiAxO1xuICB9XG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZG9HZW5lcmF0ZSh7XG4gICAgcHJvbXB0LFxuICAgIG4sXG4gICAgc2l6ZSxcbiAgICBhc3BlY3RSYXRpbyxcbiAgICBzZWVkLFxuICAgIHByb3ZpZGVyT3B0aW9ucyxcbiAgICBoZWFkZXJzLFxuICAgIGFib3J0U2lnbmFsXG4gIH0pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgICBpZiAoYXNwZWN0UmF0aW8gIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcImFzcGVjdFJhdGlvXCIsXG4gICAgICAgIGRldGFpbHM6IFwiVGhpcyBtb2RlbCBkb2VzIG5vdCBzdXBwb3J0IGFzcGVjdCByYXRpby4gVXNlIGBzaXplYCBpbnN0ZWFkLlwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNlZWQgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7IHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLCBzZXR0aW5nOiBcInNlZWRcIiB9KTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudERhdGUgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLmNvbmZpZy5faW50ZXJuYWwpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jdXJyZW50RGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpKSAhPSBudWxsID8gX2MgOiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICBjb25zdCB7IHZhbHVlOiByZXNwb25zZSwgcmVzcG9uc2VIZWFkZXJzIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpNCh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2ltYWdlcy9nZW5lcmF0aW9uc1wiLFxuICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWRcbiAgICAgIH0pLFxuICAgICAgaGVhZGVyczogY29tYmluZUhlYWRlcnM0KHRoaXMuY29uZmlnLmhlYWRlcnMoKSwgaGVhZGVycyksXG4gICAgICBib2R5OiB7XG4gICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsSWQsXG4gICAgICAgIHByb21wdCxcbiAgICAgICAgbixcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgLi4uKF9kID0gcHJvdmlkZXJPcHRpb25zLm9wZW5haSkgIT0gbnVsbCA/IF9kIDoge30sXG4gICAgICAgIC4uLiFoYXNEZWZhdWx0UmVzcG9uc2VGb3JtYXQuaGFzKHRoaXMubW9kZWxJZCkgPyB7IHJlc3BvbnNlX2Zvcm1hdDogXCJiNjRfanNvblwiIH0gOiB7fVxuICAgICAgfSxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlcjQoXG4gICAgICAgIG9wZW5haUltYWdlUmVzcG9uc2VTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpbWFnZXM6IHJlc3BvbnNlLmRhdGEubWFwKChpdGVtKSA9PiBpdGVtLmI2NF9qc29uKSxcbiAgICAgIHdhcm5pbmdzLFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgdGltZXN0YW1wOiBjdXJyZW50RGF0ZSxcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkLFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnNcbiAgICAgIH0sXG4gICAgICBwcm92aWRlck1ldGFkYXRhOiB7XG4gICAgICAgIG9wZW5haToge1xuICAgICAgICAgIGltYWdlczogcmVzcG9uc2UuZGF0YS5tYXAoXG4gICAgICAgICAgICAoaXRlbSkgPT4gaXRlbS5yZXZpc2VkX3Byb21wdCA/IHtcbiAgICAgICAgICAgICAgcmV2aXNlZFByb21wdDogaXRlbS5yZXZpc2VkX3Byb21wdFxuICAgICAgICAgICAgfSA6IG51bGxcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvdG9vbC9jb2RlLWludGVycHJldGVyLnRzXG5pbXBvcnQge1xuICBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEsXG4gIGxhenlTY2hlbWEsXG4gIHpvZFNjaGVtYSBhcyB6b2RTY2hlbWE4XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo5IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIGNvZGVJbnRlcnByZXRlcklucHV0U2NoZW1hID0gbGF6eVNjaGVtYShcbiAgKCkgPT4gem9kU2NoZW1hOChcbiAgICB6OS5vYmplY3Qoe1xuICAgICAgY29kZTogejkuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgY29udGFpbmVySWQ6IHo5LnN0cmluZygpXG4gICAgfSlcbiAgKVxuKTtcbnZhciBjb2RlSW50ZXJwcmV0ZXJPdXRwdXRTY2hlbWEgPSBsYXp5U2NoZW1hKFxuICAoKSA9PiB6b2RTY2hlbWE4KFxuICAgIHo5Lm9iamVjdCh7XG4gICAgICBvdXRwdXRzOiB6OS5hcnJheShcbiAgICAgICAgejkuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgejkub2JqZWN0KHsgdHlwZTogejkubGl0ZXJhbChcImxvZ3NcIiksIGxvZ3M6IHo5LnN0cmluZygpIH0pLFxuICAgICAgICAgIHo5Lm9iamVjdCh7IHR5cGU6IHo5LmxpdGVyYWwoXCJpbWFnZVwiKSwgdXJsOiB6OS5zdHJpbmcoKSB9KVxuICAgICAgICBdKVxuICAgICAgKS5udWxsaXNoKClcbiAgICB9KVxuICApXG4pO1xudmFyIGNvZGVJbnRlcnByZXRlckFyZ3NTY2hlbWEgPSBsYXp5U2NoZW1hKFxuICAoKSA9PiB6b2RTY2hlbWE4KFxuICAgIHo5Lm9iamVjdCh7XG4gICAgICBjb250YWluZXI6IHo5LnVuaW9uKFtcbiAgICAgICAgejkuc3RyaW5nKCksXG4gICAgICAgIHo5Lm9iamVjdCh7XG4gICAgICAgICAgZmlsZUlkczogejkuYXJyYXkoejkuc3RyaW5nKCkpLm9wdGlvbmFsKClcbiAgICAgICAgfSlcbiAgICAgIF0pLm9wdGlvbmFsKClcbiAgICB9KVxuICApXG4pO1xudmFyIGNvZGVJbnRlcnByZXRlclRvb2xGYWN0b3J5ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hKHtcbiAgaWQ6IFwib3BlbmFpLmNvZGVfaW50ZXJwcmV0ZXJcIixcbiAgbmFtZTogXCJjb2RlX2ludGVycHJldGVyXCIsXG4gIGlucHV0U2NoZW1hOiBjb2RlSW50ZXJwcmV0ZXJJbnB1dFNjaGVtYSxcbiAgb3V0cHV0U2NoZW1hOiBjb2RlSW50ZXJwcmV0ZXJPdXRwdXRTY2hlbWFcbn0pO1xudmFyIGNvZGVJbnRlcnByZXRlciA9IChhcmdzID0ge30pID0+IHtcbiAgcmV0dXJuIGNvZGVJbnRlcnByZXRlclRvb2xGYWN0b3J5KGFyZ3MpO1xufTtcblxuLy8gc3JjL3Rvb2wvZmlsZS1zZWFyY2gudHNcbmltcG9ydCB7XG4gIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSBhcyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEyLFxuICBsYXp5U2NoZW1hIGFzIGxhenlTY2hlbWEyLFxuICB6b2RTY2hlbWEgYXMgem9kU2NoZW1hOVxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6MTAgfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgY29tcGFyaXNvbkZpbHRlclNjaGVtYSA9IHoxMC5vYmplY3Qoe1xuICBrZXk6IHoxMC5zdHJpbmcoKSxcbiAgdHlwZTogejEwLmVudW0oW1wiZXFcIiwgXCJuZVwiLCBcImd0XCIsIFwiZ3RlXCIsIFwibHRcIiwgXCJsdGVcIl0pLFxuICB2YWx1ZTogejEwLnVuaW9uKFt6MTAuc3RyaW5nKCksIHoxMC5udW1iZXIoKSwgejEwLmJvb2xlYW4oKV0pXG59KTtcbnZhciBjb21wb3VuZEZpbHRlclNjaGVtYSA9IHoxMC5vYmplY3Qoe1xuICB0eXBlOiB6MTAuZW51bShbXCJhbmRcIiwgXCJvclwiXSksXG4gIGZpbHRlcnM6IHoxMC5hcnJheShcbiAgICB6MTAudW5pb24oW2NvbXBhcmlzb25GaWx0ZXJTY2hlbWEsIHoxMC5sYXp5KCgpID0+IGNvbXBvdW5kRmlsdGVyU2NoZW1hKV0pXG4gIClcbn0pO1xudmFyIGZpbGVTZWFyY2hBcmdzU2NoZW1hID0gbGF6eVNjaGVtYTIoXG4gICgpID0+IHpvZFNjaGVtYTkoXG4gICAgejEwLm9iamVjdCh7XG4gICAgICB2ZWN0b3JTdG9yZUlkczogejEwLmFycmF5KHoxMC5zdHJpbmcoKSksXG4gICAgICBtYXhOdW1SZXN1bHRzOiB6MTAubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICAgIHJhbmtpbmc6IHoxMC5vYmplY3Qoe1xuICAgICAgICByYW5rZXI6IHoxMC5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICBzY29yZVRocmVzaG9sZDogejEwLm51bWJlcigpLm9wdGlvbmFsKClcbiAgICAgIH0pLm9wdGlvbmFsKCksXG4gICAgICBmaWx0ZXJzOiB6MTAudW5pb24oW2NvbXBhcmlzb25GaWx0ZXJTY2hlbWEsIGNvbXBvdW5kRmlsdGVyU2NoZW1hXSkub3B0aW9uYWwoKVxuICAgIH0pXG4gIClcbik7XG52YXIgZmlsZVNlYXJjaE91dHB1dFNjaGVtYSA9IGxhenlTY2hlbWEyKFxuICAoKSA9PiB6b2RTY2hlbWE5KFxuICAgIHoxMC5vYmplY3Qoe1xuICAgICAgcXVlcmllczogejEwLmFycmF5KHoxMC5zdHJpbmcoKSksXG4gICAgICByZXN1bHRzOiB6MTAuYXJyYXkoXG4gICAgICAgIHoxMC5vYmplY3Qoe1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHoxMC5yZWNvcmQoejEwLnN0cmluZygpLCB6MTAudW5rbm93bigpKSxcbiAgICAgICAgICBmaWxlSWQ6IHoxMC5zdHJpbmcoKSxcbiAgICAgICAgICBmaWxlbmFtZTogejEwLnN0cmluZygpLFxuICAgICAgICAgIHNjb3JlOiB6MTAubnVtYmVyKCksXG4gICAgICAgICAgdGV4dDogejEwLnN0cmluZygpXG4gICAgICAgIH0pXG4gICAgICApLm51bGxhYmxlKClcbiAgICB9KVxuICApXG4pO1xudmFyIGZpbGVTZWFyY2ggPSBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEyKHtcbiAgaWQ6IFwib3BlbmFpLmZpbGVfc2VhcmNoXCIsXG4gIG5hbWU6IFwiZmlsZV9zZWFyY2hcIixcbiAgaW5wdXRTY2hlbWE6IHoxMC5vYmplY3Qoe30pLFxuICBvdXRwdXRTY2hlbWE6IGZpbGVTZWFyY2hPdXRwdXRTY2hlbWFcbn0pO1xuXG4vLyBzcmMvdG9vbC9pbWFnZS1nZW5lcmF0aW9uLnRzXG5pbXBvcnQge1xuICBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEgYXMgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hMyxcbiAgbGF6eVNjaGVtYSBhcyBsYXp5U2NoZW1hMyxcbiAgem9kU2NoZW1hIGFzIHpvZFNjaGVtYTEwXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMSB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBpbWFnZUdlbmVyYXRpb25BcmdzU2NoZW1hID0gbGF6eVNjaGVtYTMoXG4gICgpID0+IHpvZFNjaGVtYTEwKFxuICAgIHoxMS5vYmplY3Qoe1xuICAgICAgYmFja2dyb3VuZDogejExLmVudW0oW1wiYXV0b1wiLCBcIm9wYXF1ZVwiLCBcInRyYW5zcGFyZW50XCJdKS5vcHRpb25hbCgpLFxuICAgICAgaW5wdXRGaWRlbGl0eTogejExLmVudW0oW1wibG93XCIsIFwiaGlnaFwiXSkub3B0aW9uYWwoKSxcbiAgICAgIGlucHV0SW1hZ2VNYXNrOiB6MTEub2JqZWN0KHtcbiAgICAgICAgZmlsZUlkOiB6MTEuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgaW1hZ2VVcmw6IHoxMS5zdHJpbmcoKS5vcHRpb25hbCgpXG4gICAgICB9KS5vcHRpb25hbCgpLFxuICAgICAgbW9kZWw6IHoxMS5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgbW9kZXJhdGlvbjogejExLmVudW0oW1wiYXV0b1wiXSkub3B0aW9uYWwoKSxcbiAgICAgIG91dHB1dENvbXByZXNzaW9uOiB6MTEubnVtYmVyKCkuaW50KCkubWluKDApLm1heCgxMDApLm9wdGlvbmFsKCksXG4gICAgICBvdXRwdXRGb3JtYXQ6IHoxMS5lbnVtKFtcInBuZ1wiLCBcImpwZWdcIiwgXCJ3ZWJwXCJdKS5vcHRpb25hbCgpLFxuICAgICAgcGFydGlhbEltYWdlczogejExLm51bWJlcigpLmludCgpLm1pbigwKS5tYXgoMykub3B0aW9uYWwoKSxcbiAgICAgIHF1YWxpdHk6IHoxMS5lbnVtKFtcImF1dG9cIiwgXCJsb3dcIiwgXCJtZWRpdW1cIiwgXCJoaWdoXCJdKS5vcHRpb25hbCgpLFxuICAgICAgc2l6ZTogejExLmVudW0oW1wiMTAyNHgxMDI0XCIsIFwiMTAyNHgxNTM2XCIsIFwiMTUzNngxMDI0XCIsIFwiYXV0b1wiXSkub3B0aW9uYWwoKVxuICAgIH0pLnN0cmljdCgpXG4gIClcbik7XG52YXIgaW1hZ2VHZW5lcmF0aW9uSW5wdXRTY2hlbWEgPSBsYXp5U2NoZW1hMygoKSA9PiB6b2RTY2hlbWExMCh6MTEub2JqZWN0KHt9KSkpO1xudmFyIGltYWdlR2VuZXJhdGlvbk91dHB1dFNjaGVtYSA9IGxhenlTY2hlbWEzKFxuICAoKSA9PiB6b2RTY2hlbWExMCh6MTEub2JqZWN0KHsgcmVzdWx0OiB6MTEuc3RyaW5nKCkgfSkpXG4pO1xudmFyIGltYWdlR2VuZXJhdGlvblRvb2xGYWN0b3J5ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hMyh7XG4gIGlkOiBcIm9wZW5haS5pbWFnZV9nZW5lcmF0aW9uXCIsXG4gIG5hbWU6IFwiaW1hZ2VfZ2VuZXJhdGlvblwiLFxuICBpbnB1dFNjaGVtYTogaW1hZ2VHZW5lcmF0aW9uSW5wdXRTY2hlbWEsXG4gIG91dHB1dFNjaGVtYTogaW1hZ2VHZW5lcmF0aW9uT3V0cHV0U2NoZW1hXG59KTtcbnZhciBpbWFnZUdlbmVyYXRpb24gPSAoYXJncyA9IHt9KSA9PiB7XG4gIHJldHVybiBpbWFnZUdlbmVyYXRpb25Ub29sRmFjdG9yeShhcmdzKTtcbn07XG5cbi8vIHNyYy90b29sL2xvY2FsLXNoZWxsLnRzXG5pbXBvcnQge1xuICBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEgYXMgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hNCxcbiAgbGF6eVNjaGVtYSBhcyBsYXp5U2NoZW1hNCxcbiAgem9kU2NoZW1hIGFzIHpvZFNjaGVtYTExXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMiB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBsb2NhbFNoZWxsSW5wdXRTY2hlbWEgPSBsYXp5U2NoZW1hNChcbiAgKCkgPT4gem9kU2NoZW1hMTEoXG4gICAgejEyLm9iamVjdCh7XG4gICAgICBhY3Rpb246IHoxMi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTIubGl0ZXJhbChcImV4ZWNcIiksXG4gICAgICAgIGNvbW1hbmQ6IHoxMi5hcnJheSh6MTIuc3RyaW5nKCkpLFxuICAgICAgICB0aW1lb3V0TXM6IHoxMi5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICB1c2VyOiB6MTIuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgd29ya2luZ0RpcmVjdG9yeTogejEyLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIGVudjogejEyLnJlY29yZCh6MTIuc3RyaW5nKCksIHoxMi5zdHJpbmcoKSkub3B0aW9uYWwoKVxuICAgICAgfSlcbiAgICB9KVxuICApXG4pO1xudmFyIGxvY2FsU2hlbGxPdXRwdXRTY2hlbWEgPSBsYXp5U2NoZW1hNChcbiAgKCkgPT4gem9kU2NoZW1hMTEoejEyLm9iamVjdCh7IG91dHB1dDogejEyLnN0cmluZygpIH0pKVxuKTtcbnZhciBsb2NhbFNoZWxsID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hNCh7XG4gIGlkOiBcIm9wZW5haS5sb2NhbF9zaGVsbFwiLFxuICBuYW1lOiBcImxvY2FsX3NoZWxsXCIsXG4gIGlucHV0U2NoZW1hOiBsb2NhbFNoZWxsSW5wdXRTY2hlbWEsXG4gIG91dHB1dFNjaGVtYTogbG9jYWxTaGVsbE91dHB1dFNjaGVtYVxufSk7XG5cbi8vIHNyYy90b29sL3dlYi1zZWFyY2gudHNcbmltcG9ydCB7XG4gIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSBhcyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWE1LFxuICBsYXp5U2NoZW1hIGFzIGxhenlTY2hlbWE1LFxuICB6b2RTY2hlbWEgYXMgem9kU2NoZW1hMTJcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejEzIH0gZnJvbSBcInpvZC92NFwiO1xudmFyIHdlYlNlYXJjaEFyZ3NTY2hlbWEgPSBsYXp5U2NoZW1hNShcbiAgKCkgPT4gem9kU2NoZW1hMTIoXG4gICAgejEzLm9iamVjdCh7XG4gICAgICBmaWx0ZXJzOiB6MTMub2JqZWN0KHsgYWxsb3dlZERvbWFpbnM6IHoxMy5hcnJheSh6MTMuc3RyaW5nKCkpLm9wdGlvbmFsKCkgfSkub3B0aW9uYWwoKSxcbiAgICAgIHNlYXJjaENvbnRleHRTaXplOiB6MTMuZW51bShbXCJsb3dcIiwgXCJtZWRpdW1cIiwgXCJoaWdoXCJdKS5vcHRpb25hbCgpLFxuICAgICAgdXNlckxvY2F0aW9uOiB6MTMub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejEzLmxpdGVyYWwoXCJhcHByb3hpbWF0ZVwiKSxcbiAgICAgICAgY291bnRyeTogejEzLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIGNpdHk6IHoxMy5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICByZWdpb246IHoxMy5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0aW1lem9uZTogejEzLnN0cmluZygpLm9wdGlvbmFsKClcbiAgICAgIH0pLm9wdGlvbmFsKClcbiAgICB9KVxuICApXG4pO1xudmFyIHdlYlNlYXJjaElucHV0U2NoZW1hID0gbGF6eVNjaGVtYTUoKCkgPT4gem9kU2NoZW1hMTIoejEzLm9iamVjdCh7fSkpKTtcbnZhciB3ZWJTZWFyY2hPdXRwdXRTY2hlbWEgPSBsYXp5U2NoZW1hNShcbiAgKCkgPT4gem9kU2NoZW1hMTIoXG4gICAgejEzLm9iamVjdCh7XG4gICAgICBhY3Rpb246IHoxMy5kaXNjcmltaW5hdGVkVW5pb24oXCJ0eXBlXCIsIFtcbiAgICAgICAgejEzLm9iamVjdCh7XG4gICAgICAgICAgdHlwZTogejEzLmxpdGVyYWwoXCJzZWFyY2hcIiksXG4gICAgICAgICAgcXVlcnk6IHoxMy5zdHJpbmcoKS5vcHRpb25hbCgpXG4gICAgICAgIH0pLFxuICAgICAgICB6MTMub2JqZWN0KHtcbiAgICAgICAgICB0eXBlOiB6MTMubGl0ZXJhbChcIm9wZW5QYWdlXCIpLFxuICAgICAgICAgIHVybDogejEzLnN0cmluZygpXG4gICAgICAgIH0pLFxuICAgICAgICB6MTMub2JqZWN0KHtcbiAgICAgICAgICB0eXBlOiB6MTMubGl0ZXJhbChcImZpbmRcIiksXG4gICAgICAgICAgdXJsOiB6MTMuc3RyaW5nKCksXG4gICAgICAgICAgcGF0dGVybjogejEzLnN0cmluZygpXG4gICAgICAgIH0pXG4gICAgICBdKVxuICAgIH0pXG4gIClcbik7XG52YXIgd2ViU2VhcmNoVG9vbEZhY3RvcnkgPSBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWE1KHtcbiAgaWQ6IFwib3BlbmFpLndlYl9zZWFyY2hcIixcbiAgbmFtZTogXCJ3ZWJfc2VhcmNoXCIsXG4gIGlucHV0U2NoZW1hOiB3ZWJTZWFyY2hJbnB1dFNjaGVtYSxcbiAgb3V0cHV0U2NoZW1hOiB3ZWJTZWFyY2hPdXRwdXRTY2hlbWFcbn0pO1xudmFyIHdlYlNlYXJjaCA9IChhcmdzID0ge30pID0+IHdlYlNlYXJjaFRvb2xGYWN0b3J5KGFyZ3MpO1xuXG4vLyBzcmMvdG9vbC93ZWItc2VhcmNoLXByZXZpZXcudHNcbmltcG9ydCB7XG4gIGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSBhcyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWE2LFxuICBsYXp5U2NoZW1hIGFzIGxhenlTY2hlbWE2LFxuICB6b2RTY2hlbWEgYXMgem9kU2NoZW1hMTNcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejE0IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIHdlYlNlYXJjaFByZXZpZXdBcmdzU2NoZW1hID0gbGF6eVNjaGVtYTYoXG4gICgpID0+IHpvZFNjaGVtYTEzKFxuICAgIHoxNC5vYmplY3Qoe1xuICAgICAgc2VhcmNoQ29udGV4dFNpemU6IHoxNC5lbnVtKFtcImxvd1wiLCBcIm1lZGl1bVwiLCBcImhpZ2hcIl0pLm9wdGlvbmFsKCksXG4gICAgICB1c2VyTG9jYXRpb246IHoxNC5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTQubGl0ZXJhbChcImFwcHJveGltYXRlXCIpLFxuICAgICAgICBjb3VudHJ5OiB6MTQuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgY2l0eTogejE0LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHJlZ2lvbjogejE0LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHRpbWV6b25lOiB6MTQuc3RyaW5nKCkub3B0aW9uYWwoKVxuICAgICAgfSkub3B0aW9uYWwoKVxuICAgIH0pXG4gIClcbik7XG52YXIgd2ViU2VhcmNoUHJldmlld0lucHV0U2NoZW1hID0gbGF6eVNjaGVtYTYoXG4gICgpID0+IHpvZFNjaGVtYTEzKHoxNC5vYmplY3Qoe30pKVxuKTtcbnZhciB3ZWJTZWFyY2hQcmV2aWV3T3V0cHV0U2NoZW1hID0gbGF6eVNjaGVtYTYoXG4gICgpID0+IHpvZFNjaGVtYTEzKFxuICAgIHoxNC5vYmplY3Qoe1xuICAgICAgYWN0aW9uOiB6MTQuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgIHoxNC5vYmplY3Qoe1xuICAgICAgICAgIHR5cGU6IHoxNC5saXRlcmFsKFwic2VhcmNoXCIpLFxuICAgICAgICAgIHF1ZXJ5OiB6MTQuc3RyaW5nKCkub3B0aW9uYWwoKVxuICAgICAgICB9KSxcbiAgICAgICAgejE0Lm9iamVjdCh7XG4gICAgICAgICAgdHlwZTogejE0LmxpdGVyYWwoXCJvcGVuUGFnZVwiKSxcbiAgICAgICAgICB1cmw6IHoxNC5zdHJpbmcoKVxuICAgICAgICB9KSxcbiAgICAgICAgejE0Lm9iamVjdCh7XG4gICAgICAgICAgdHlwZTogejE0LmxpdGVyYWwoXCJmaW5kXCIpLFxuICAgICAgICAgIHVybDogejE0LnN0cmluZygpLFxuICAgICAgICAgIHBhdHRlcm46IHoxNC5zdHJpbmcoKVxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICB9KVxuICApXG4pO1xudmFyIHdlYlNlYXJjaFByZXZpZXcgPSBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWE2KHtcbiAgaWQ6IFwib3BlbmFpLndlYl9zZWFyY2hfcHJldmlld1wiLFxuICBuYW1lOiBcIndlYl9zZWFyY2hfcHJldmlld1wiLFxuICBpbnB1dFNjaGVtYTogd2ViU2VhcmNoUHJldmlld0lucHV0U2NoZW1hLFxuICBvdXRwdXRTY2hlbWE6IHdlYlNlYXJjaFByZXZpZXdPdXRwdXRTY2hlbWFcbn0pO1xuXG4vLyBzcmMvb3BlbmFpLXRvb2xzLnRzXG52YXIgb3BlbmFpVG9vbHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgQ29kZSBJbnRlcnByZXRlciB0b29sIGFsbG93cyBtb2RlbHMgdG8gd3JpdGUgYW5kIHJ1biBQeXRob24gY29kZSBpbiBhXG4gICAqIHNhbmRib3hlZCBlbnZpcm9ubWVudCB0byBzb2x2ZSBjb21wbGV4IHByb2JsZW1zIGluIGRvbWFpbnMgbGlrZSBkYXRhIGFuYWx5c2lzLFxuICAgKiBjb2RpbmcsIGFuZCBtYXRoLlxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gVGhlIGNvbnRhaW5lciB0byB1c2UgZm9yIHRoZSBjb2RlIGludGVycHJldGVyLlxuICAgKlxuICAgKiBNdXN0IGhhdmUgbmFtZSBgY29kZV9pbnRlcnByZXRlcmAuXG4gICAqL1xuICBjb2RlSW50ZXJwcmV0ZXIsXG4gIC8qKlxuICAgKiBGaWxlIHNlYXJjaCBpcyBhIHRvb2wgYXZhaWxhYmxlIGluIHRoZSBSZXNwb25zZXMgQVBJLiBJdCBlbmFibGVzIG1vZGVscyB0b1xuICAgKiByZXRyaWV2ZSBpbmZvcm1hdGlvbiBpbiBhIGtub3dsZWRnZSBiYXNlIG9mIHByZXZpb3VzbHkgdXBsb2FkZWQgZmlsZXMgdGhyb3VnaFxuICAgKiBzZW1hbnRpYyBhbmQga2V5d29yZCBzZWFyY2guXG4gICAqXG4gICAqIE11c3QgaGF2ZSBuYW1lIGBmaWxlX3NlYXJjaGAuXG4gICAqXG4gICAqIEBwYXJhbSB2ZWN0b3JTdG9yZUlkcyAtIFRoZSB2ZWN0b3Igc3RvcmUgSURzIHRvIHVzZSBmb3IgdGhlIGZpbGUgc2VhcmNoLlxuICAgKiBAcGFyYW0gbWF4TnVtUmVzdWx0cyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiAgICogQHBhcmFtIHJhbmtpbmcgLSBUaGUgcmFua2luZyBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGZpbGUgc2VhcmNoLlxuICAgKiBAcGFyYW0gZmlsdGVycyAtIFRoZSBmaWx0ZXJzIHRvIHVzZSBmb3IgdGhlIGZpbGUgc2VhcmNoLlxuICAgKi9cbiAgZmlsZVNlYXJjaCxcbiAgLyoqXG4gICAqIFRoZSBpbWFnZSBnZW5lcmF0aW9uIHRvb2wgYWxsb3dzIHlvdSB0byBnZW5lcmF0ZSBpbWFnZXMgdXNpbmcgYSB0ZXh0IHByb21wdCxcbiAgICogYW5kIG9wdGlvbmFsbHkgaW1hZ2UgaW5wdXRzLiBJdCBsZXZlcmFnZXMgdGhlIEdQVCBJbWFnZSBtb2RlbCxcbiAgICogYW5kIGF1dG9tYXRpY2FsbHkgb3B0aW1pemVzIHRleHQgaW5wdXRzIGZvciBpbXByb3ZlZCBwZXJmb3JtYW5jZS5cbiAgICpcbiAgICogTXVzdCBoYXZlIG5hbWUgYGltYWdlX2dlbmVyYXRpb25gLlxuICAgKlxuICAgKiBAcGFyYW0gc2l6ZSAtIEltYWdlIGRpbWVuc2lvbnMgKGUuZy4sIDEwMjR4MTAyNCwgMTAyNHgxNTM2KVxuICAgKiBAcGFyYW0gcXVhbGl0eSAtIFJlbmRlcmluZyBxdWFsaXR5IChlLmcuIGxvdywgbWVkaXVtLCBoaWdoKVxuICAgKiBAcGFyYW0gZm9ybWF0IC0gRmlsZSBvdXRwdXQgZm9ybWF0XG4gICAqIEBwYXJhbSBjb21wcmVzc2lvbiAtIENvbXByZXNzaW9uIGxldmVsICgwLTEwMCUpIGZvciBKUEVHIGFuZCBXZWJQIGZvcm1hdHNcbiAgICogQHBhcmFtIGJhY2tncm91bmQgLSBUcmFuc3BhcmVudCBvciBvcGFxdWVcbiAgICovXG4gIGltYWdlR2VuZXJhdGlvbixcbiAgLyoqXG4gICAqIExvY2FsIHNoZWxsIGlzIGEgdG9vbCB0aGF0IGFsbG93cyBhZ2VudHMgdG8gcnVuIHNoZWxsIGNvbW1hbmRzIGxvY2FsbHlcbiAgICogb24gYSBtYWNoaW5lIHlvdSBvciB0aGUgdXNlciBwcm92aWRlcy5cbiAgICpcbiAgICogU3VwcG9ydGVkIG1vZGVsczogYGdwdC01LWNvZGV4YCBhbmQgYGNvZGV4LW1pbmktbGF0ZXN0YFxuICAgKlxuICAgKiBNdXN0IGhhdmUgbmFtZSBgbG9jYWxfc2hlbGxgLlxuICAgKi9cbiAgbG9jYWxTaGVsbCxcbiAgLyoqXG4gICAqIFdlYiBzZWFyY2ggYWxsb3dzIG1vZGVscyB0byBhY2Nlc3MgdXAtdG8tZGF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBpbnRlcm5ldFxuICAgKiBhbmQgcHJvdmlkZSBhbnN3ZXJzIHdpdGggc291cmNlZCBjaXRhdGlvbnMuXG4gICAqXG4gICAqIE11c3QgaGF2ZSBuYW1lIGB3ZWJfc2VhcmNoX3ByZXZpZXdgLlxuICAgKlxuICAgKiBAcGFyYW0gc2VhcmNoQ29udGV4dFNpemUgLSBUaGUgc2VhcmNoIGNvbnRleHQgc2l6ZSB0byB1c2UgZm9yIHRoZSB3ZWIgc2VhcmNoLlxuICAgKiBAcGFyYW0gdXNlckxvY2F0aW9uIC0gVGhlIHVzZXIgbG9jYXRpb24gdG8gdXNlIGZvciB0aGUgd2ViIHNlYXJjaC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGB3ZWJTZWFyY2hgIGluc3RlYWQuXG4gICAqL1xuICB3ZWJTZWFyY2hQcmV2aWV3LFxuICAvKipcbiAgICogV2ViIHNlYXJjaCBhbGxvd3MgbW9kZWxzIHRvIGFjY2VzcyB1cC10by1kYXRlIGluZm9ybWF0aW9uIGZyb20gdGhlIGludGVybmV0XG4gICAqIGFuZCBwcm92aWRlIGFuc3dlcnMgd2l0aCBzb3VyY2VkIGNpdGF0aW9ucy5cbiAgICpcbiAgICogTXVzdCBoYXZlIG5hbWUgYHdlYl9zZWFyY2hgLlxuICAgKlxuICAgKiBAcGFyYW0gZmlsdGVycyAtIFRoZSBmaWx0ZXJzIHRvIHVzZSBmb3IgdGhlIHdlYiBzZWFyY2guXG4gICAqIEBwYXJhbSBzZWFyY2hDb250ZXh0U2l6ZSAtIFRoZSBzZWFyY2ggY29udGV4dCBzaXplIHRvIHVzZSBmb3IgdGhlIHdlYiBzZWFyY2guXG4gICAqIEBwYXJhbSB1c2VyTG9jYXRpb24gLSBUaGUgdXNlciBsb2NhdGlvbiB0byB1c2UgZm9yIHRoZSB3ZWIgc2VhcmNoLlxuICAgKi9cbiAgd2ViU2VhcmNoXG59O1xuXG4vLyBzcmMvcmVzcG9uc2VzL29wZW5haS1yZXNwb25zZXMtbGFuZ3VhZ2UtbW9kZWwudHNcbmltcG9ydCB7XG4gIEFQSUNhbGxFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnM1LFxuICBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlciBhcyBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlcjMsXG4gIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIgYXMgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlcjUsXG4gIGdlbmVyYXRlSWQgYXMgZ2VuZXJhdGVJZDIsXG4gIHBhcnNlUHJvdmlkZXJPcHRpb25zIGFzIHBhcnNlUHJvdmlkZXJPcHRpb25zNSxcbiAgcG9zdEpzb25Ub0FwaSBhcyBwb3N0SnNvblRvQXBpNVxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuXG4vLyBzcmMvcmVzcG9uc2VzL2NvbnZlcnQtdG8tb3BlbmFpLXJlc3BvbnNlcy1pbnB1dC50c1xuaW1wb3J0IHtcbiAgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IgYXMgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3I0XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5pbXBvcnQge1xuICBjb252ZXJ0VG9CYXNlNjQgYXMgY29udmVydFRvQmFzZTY0MixcbiAgcGFyc2VQcm92aWRlck9wdGlvbnMgYXMgcGFyc2VQcm92aWRlck9wdGlvbnM0LFxuICB2YWxpZGF0ZVR5cGVzXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxNSB9IGZyb20gXCJ6b2QvdjRcIjtcbmZ1bmN0aW9uIGlzRmlsZUlkKGRhdGEsIHByZWZpeGVzKSB7XG4gIGlmICghcHJlZml4ZXMpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHByZWZpeGVzLnNvbWUoKHByZWZpeCkgPT4gZGF0YS5zdGFydHNXaXRoKHByZWZpeCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY29udmVydFRvT3BlbkFJUmVzcG9uc2VzSW5wdXQoe1xuICBwcm9tcHQsXG4gIHN5c3RlbU1lc3NhZ2VNb2RlLFxuICBmaWxlSWRQcmVmaXhlcyxcbiAgc3RvcmUsXG4gIGhhc0xvY2FsU2hlbGxUb29sID0gZmFsc2Vcbn0pIHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICBjb25zdCBpbnB1dCA9IFtdO1xuICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuICBmb3IgKGNvbnN0IHsgcm9sZSwgY29udGVudCB9IG9mIHByb21wdCkge1xuICAgIHN3aXRjaCAocm9sZSkge1xuICAgICAgY2FzZSBcInN5c3RlbVwiOiB7XG4gICAgICAgIHN3aXRjaCAoc3lzdGVtTWVzc2FnZU1vZGUpIHtcbiAgICAgICAgICBjYXNlIFwic3lzdGVtXCI6IHtcbiAgICAgICAgICAgIGlucHV0LnB1c2goeyByb2xlOiBcInN5c3RlbVwiLCBjb250ZW50IH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJkZXZlbG9wZXJcIjoge1xuICAgICAgICAgICAgaW5wdXQucHVzaCh7IHJvbGU6IFwiZGV2ZWxvcGVyXCIsIGNvbnRlbnQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcInJlbW92ZVwiOiB7XG4gICAgICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcInN5c3RlbSBtZXNzYWdlcyBhcmUgcmVtb3ZlZCBmb3IgdGhpcyBtb2RlbFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gc3lzdGVtTWVzc2FnZU1vZGU7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBVbnN1cHBvcnRlZCBzeXN0ZW0gbWVzc2FnZSBtb2RlOiAke19leGhhdXN0aXZlQ2hlY2t9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidXNlclwiOiB7XG4gICAgICAgIGlucHV0LnB1c2goe1xuICAgICAgICAgIHJvbGU6IFwidXNlclwiLFxuICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQubWFwKChwYXJ0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hMiwgX2IyLCBfYzI7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJpbnB1dF90ZXh0XCIsIHRleHQ6IHBhcnQudGV4dCB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCJmaWxlXCI6IHtcbiAgICAgICAgICAgICAgICBpZiAocGFydC5tZWRpYVR5cGUuc3RhcnRzV2l0aChcImltYWdlL1wiKSkge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbWVkaWFUeXBlID0gcGFydC5tZWRpYVR5cGUgPT09IFwiaW1hZ2UvKlwiID8gXCJpbWFnZS9qcGVnXCIgOiBwYXJ0Lm1lZGlhVHlwZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5wdXRfaW1hZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgLi4ucGFydC5kYXRhIGluc3RhbmNlb2YgVVJMID8geyBpbWFnZV91cmw6IHBhcnQuZGF0YS50b1N0cmluZygpIH0gOiB0eXBlb2YgcGFydC5kYXRhID09PSBcInN0cmluZ1wiICYmIGlzRmlsZUlkKHBhcnQuZGF0YSwgZmlsZUlkUHJlZml4ZXMpID8geyBmaWxlX2lkOiBwYXJ0LmRhdGEgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBpbWFnZV91cmw6IGBkYXRhOiR7bWVkaWFUeXBlfTtiYXNlNjQsJHtjb252ZXJ0VG9CYXNlNjQyKHBhcnQuZGF0YSl9YFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IChfYjIgPSAoX2EyID0gcGFydC5wcm92aWRlck9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYTIub3BlbmFpKSA9PSBudWxsID8gdm9pZCAwIDogX2IyLmltYWdlRGV0YWlsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydC5tZWRpYVR5cGUgPT09IFwiYXBwbGljYXRpb24vcGRmXCIpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LmRhdGEgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImlucHV0X2ZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlX3VybDogcGFydC5kYXRhLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5wdXRfZmlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAuLi50eXBlb2YgcGFydC5kYXRhID09PSBcInN0cmluZ1wiICYmIGlzRmlsZUlkKHBhcnQuZGF0YSwgZmlsZUlkUHJlZml4ZXMpID8geyBmaWxlX2lkOiBwYXJ0LmRhdGEgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogKF9jMiA9IHBhcnQuZmlsZW5hbWUpICE9IG51bGwgPyBfYzIgOiBgcGFydC0ke2luZGV4fS5wZGZgLFxuICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0YTogYGRhdGE6YXBwbGljYXRpb24vcGRmO2Jhc2U2NCwke2NvbnZlcnRUb0Jhc2U2NDIocGFydC5kYXRhKX1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjQoe1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbmFsaXR5OiBgZmlsZSBwYXJ0IG1lZGlhIHR5cGUgJHtwYXJ0Lm1lZGlhVHlwZX1gXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYXNzaXN0YW50XCI6IHtcbiAgICAgICAgY29uc3QgcmVhc29uaW5nTWVzc2FnZXMgPSB7fTtcbiAgICAgICAgY29uc3QgdG9vbENhbGxQYXJ0cyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgY29udGVudCkge1xuICAgICAgICAgIHN3aXRjaCAocGFydC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgIGNvbnN0IGlkID0gKF9iID0gKF9hID0gcGFydC5wcm92aWRlck9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5vcGVuYWkpID09IG51bGwgPyB2b2lkIDAgOiBfYi5pdGVtSWQ7XG4gICAgICAgICAgICAgIGlmIChzdG9yZSAmJiBpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQucHVzaCh7IHR5cGU6IFwiaXRlbV9yZWZlcmVuY2VcIiwgaWQgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5wdXQucHVzaCh7XG4gICAgICAgICAgICAgICAgcm9sZTogXCJhc3Npc3RhbnRcIixcbiAgICAgICAgICAgICAgICBjb250ZW50OiBbeyB0eXBlOiBcIm91dHB1dF90ZXh0XCIsIHRleHQ6IHBhcnQudGV4dCB9XSxcbiAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidG9vbC1jYWxsXCI6IHtcbiAgICAgICAgICAgICAgdG9vbENhbGxQYXJ0c1twYXJ0LnRvb2xDYWxsSWRdID0gcGFydDtcbiAgICAgICAgICAgICAgaWYgKHBhcnQucHJvdmlkZXJFeGVjdXRlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGlkID0gKF9kID0gKF9jID0gcGFydC5wcm92aWRlck9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYy5vcGVuYWkpID09IG51bGwgPyB2b2lkIDAgOiBfZC5pdGVtSWQ7XG4gICAgICAgICAgICAgIGlmIChzdG9yZSAmJiBpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQucHVzaCh7IHR5cGU6IFwiaXRlbV9yZWZlcmVuY2VcIiwgaWQgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGhhc0xvY2FsU2hlbGxUb29sICYmIHBhcnQudG9vbE5hbWUgPT09IFwibG9jYWxfc2hlbGxcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZElucHV0ID0gYXdhaXQgdmFsaWRhdGVUeXBlcyh7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogcGFydC5pbnB1dCxcbiAgICAgICAgICAgICAgICAgIHNjaGVtYTogbG9jYWxTaGVsbElucHV0U2NoZW1hXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaW5wdXQucHVzaCh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcImxvY2FsX3NoZWxsX2NhbGxcIixcbiAgICAgICAgICAgICAgICAgIGNhbGxfaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXhlY1wiLFxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBwYXJzZWRJbnB1dC5hY3Rpb24uY29tbWFuZCxcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dF9tczogcGFyc2VkSW5wdXQuYWN0aW9uLnRpbWVvdXRNcyxcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogcGFyc2VkSW5wdXQuYWN0aW9uLnVzZXIsXG4gICAgICAgICAgICAgICAgICAgIHdvcmtpbmdfZGlyZWN0b3J5OiBwYXJzZWRJbnB1dC5hY3Rpb24ud29ya2luZ0RpcmVjdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgZW52OiBwYXJzZWRJbnB1dC5hY3Rpb24uZW52XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5wdXQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmdW5jdGlvbl9jYWxsXCIsXG4gICAgICAgICAgICAgICAgY2FsbF9pZDogcGFydC50b29sQ2FsbElkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBhcnQudG9vbE5hbWUsXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBKU09OLnN0cmluZ2lmeShwYXJ0LmlucHV0KSxcbiAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhc3Npc3RhbnQgdG9vbCByZXN1bHQgcGFydHMgYXJlIGZyb20gcHJvdmlkZXItZXhlY3V0ZWQgdG9vbHM6XG4gICAgICAgICAgICBjYXNlIFwidG9vbC1yZXN1bHRcIjoge1xuICAgICAgICAgICAgICBpZiAoc3RvcmUpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5wdXNoKHsgdHlwZTogXCJpdGVtX3JlZmVyZW5jZVwiLCBpZDogcGFydC50b29sQ2FsbElkIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFJlc3VsdHMgZm9yIE9wZW5BSSB0b29sICR7cGFydC50b29sTmFtZX0gYXJlIG5vdCBzZW50IHRvIHRoZSBBUEkgd2hlbiBzdG9yZSBpcyBmYWxzZWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJyZWFzb25pbmdcIjoge1xuICAgICAgICAgICAgICBjb25zdCBwcm92aWRlck9wdGlvbnMgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczQoe1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyT3B0aW9uczogcGFydC5wcm92aWRlck9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2NoZW1hOiBvcGVuYWlSZXNwb25zZXNSZWFzb25pbmdQcm92aWRlck9wdGlvbnNTY2hlbWFcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IHJlYXNvbmluZ0lkID0gcHJvdmlkZXJPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcm92aWRlck9wdGlvbnMuaXRlbUlkO1xuICAgICAgICAgICAgICBpZiAocmVhc29uaW5nSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYXNvbmluZ01lc3NhZ2UgPSByZWFzb25pbmdNZXNzYWdlc1tyZWFzb25pbmdJZF07XG4gICAgICAgICAgICAgICAgaWYgKHN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocmVhc29uaW5nTWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnB1c2goeyB0eXBlOiBcIml0ZW1fcmVmZXJlbmNlXCIsIGlkOiByZWFzb25pbmdJZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uaW5nTWVzc2FnZXNbcmVhc29uaW5nSWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlYXNvbmluZ0lkLFxuICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnk6IFtdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHN1bW1hcnlQYXJ0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcnQudGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bW1hcnlQYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN1bW1hcnlfdGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHBhcnQudGV4dFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVhc29uaW5nTWVzc2FnZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgQ2Fubm90IGFwcGVuZCBlbXB0eSByZWFzb25pbmcgcGFydCB0byBleGlzdGluZyByZWFzb25pbmcgc2VxdWVuY2UuIFNraXBwaW5nIHJlYXNvbmluZyBwYXJ0OiAke0pTT04uc3RyaW5naWZ5KHBhcnQpfS5gXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHJlYXNvbmluZ01lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICByZWFzb25pbmdNZXNzYWdlc1tyZWFzb25pbmdJZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICBpZDogcmVhc29uaW5nSWQsXG4gICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkX2NvbnRlbnQ6IHByb3ZpZGVyT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogcHJvdmlkZXJPcHRpb25zLnJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogc3VtbWFyeVBhcnRzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnB1c2gocmVhc29uaW5nTWVzc2FnZXNbcmVhc29uaW5nSWRdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ01lc3NhZ2Uuc3VtbWFyeS5wdXNoKC4uLnN1bW1hcnlQYXJ0cyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvdmlkZXJPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcm92aWRlck9wdGlvbnMucmVhc29uaW5nRW5jcnlwdGVkQ29udGVudCkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ01lc3NhZ2UuZW5jcnlwdGVkX2NvbnRlbnQgPSBwcm92aWRlck9wdGlvbnMucmVhc29uaW5nRW5jcnlwdGVkQ29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBOb24tT3BlbkFJIHJlYXNvbmluZyBwYXJ0cyBhcmUgbm90IHN1cHBvcnRlZC4gU2tpcHBpbmcgcmVhc29uaW5nIHBhcnQ6ICR7SlNPTi5zdHJpbmdpZnkocGFydCl9LmBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidG9vbFwiOiB7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBjb250ZW50KSB7XG4gICAgICAgICAgY29uc3Qgb3V0cHV0ID0gcGFydC5vdXRwdXQ7XG4gICAgICAgICAgaWYgKGhhc0xvY2FsU2hlbGxUb29sICYmIHBhcnQudG9vbE5hbWUgPT09IFwibG9jYWxfc2hlbGxcIiAmJiBvdXRwdXQudHlwZSA9PT0gXCJqc29uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZE91dHB1dCA9IGF3YWl0IHZhbGlkYXRlVHlwZXMoe1xuICAgICAgICAgICAgICB2YWx1ZTogb3V0cHV0LnZhbHVlLFxuICAgICAgICAgICAgICBzY2hlbWE6IGxvY2FsU2hlbGxPdXRwdXRTY2hlbWFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW5wdXQucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwibG9jYWxfc2hlbGxfY2FsbF9vdXRwdXRcIixcbiAgICAgICAgICAgICAgY2FsbF9pZDogcGFydC50b29sQ2FsbElkLFxuICAgICAgICAgICAgICBvdXRwdXQ6IHBhcnNlZE91dHB1dC5vdXRwdXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBjb250ZW50VmFsdWU7XG4gICAgICAgICAgc3dpdGNoIChvdXRwdXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvci10ZXh0XCI6XG4gICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IG91dHB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwianNvblwiOlxuICAgICAgICAgICAgY2FzZSBcImVycm9yLWpzb25cIjpcbiAgICAgICAgICAgICAgY29udGVudFZhbHVlID0gSlNPTi5zdHJpbmdpZnkob3V0cHV0LnZhbHVlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29udGVudFwiOlxuICAgICAgICAgICAgICBjb250ZW50VmFsdWUgPSBvdXRwdXQudmFsdWUubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogXCJpbnB1dF90ZXh0XCIsIHRleHQ6IGl0ZW0udGV4dCB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lZGlhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubWVkaWFUeXBlLnN0YXJ0c1dpdGgoXCJpbWFnZS9cIikgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnB1dF9pbWFnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGltYWdlX3VybDogYGRhdGE6JHtpdGVtLm1lZGlhVHlwZX07YmFzZTY0LCR7aXRlbS5kYXRhfWBcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImlucHV0X2ZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogXCJkYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRhOiBgZGF0YToke2l0ZW0ubWVkaWFUeXBlfTtiYXNlNjQsJHtpdGVtLmRhdGF9YFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnB1dC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25fY2FsbF9vdXRwdXRcIixcbiAgICAgICAgICAgIGNhbGxfaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgIG91dHB1dDogY29udGVudFZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSByb2xlO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHJvbGU6ICR7X2V4aGF1c3RpdmVDaGVja31gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgaW5wdXQsIHdhcm5pbmdzIH07XG59XG52YXIgb3BlbmFpUmVzcG9uc2VzUmVhc29uaW5nUHJvdmlkZXJPcHRpb25zU2NoZW1hID0gejE1Lm9iamVjdCh7XG4gIGl0ZW1JZDogejE1LnN0cmluZygpLm51bGxpc2goKSxcbiAgcmVhc29uaW5nRW5jcnlwdGVkQ29udGVudDogejE1LnN0cmluZygpLm51bGxpc2goKVxufSk7XG5cbi8vIHNyYy9yZXNwb25zZXMvbWFwLW9wZW5haS1yZXNwb25zZXMtZmluaXNoLXJlYXNvbi50c1xuZnVuY3Rpb24gbWFwT3BlbkFJUmVzcG9uc2VGaW5pc2hSZWFzb24oe1xuICBmaW5pc2hSZWFzb24sXG4gIGhhc0Z1bmN0aW9uQ2FsbFxufSkge1xuICBzd2l0Y2ggKGZpbmlzaFJlYXNvbikge1xuICAgIGNhc2Ugdm9pZCAwOlxuICAgIGNhc2UgbnVsbDpcbiAgICAgIHJldHVybiBoYXNGdW5jdGlvbkNhbGwgPyBcInRvb2wtY2FsbHNcIiA6IFwic3RvcFwiO1xuICAgIGNhc2UgXCJtYXhfb3V0cHV0X3Rva2Vuc1wiOlxuICAgICAgcmV0dXJuIFwibGVuZ3RoXCI7XG4gICAgY2FzZSBcImNvbnRlbnRfZmlsdGVyXCI6XG4gICAgICByZXR1cm4gXCJjb250ZW50LWZpbHRlclwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gaGFzRnVuY3Rpb25DYWxsID8gXCJ0b29sLWNhbGxzXCIgOiBcInVua25vd25cIjtcbiAgfVxufVxuXG4vLyBzcmMvcmVzcG9uc2VzL29wZW5haS1yZXNwb25zZXMtYXBpLnRzXG5pbXBvcnQge1xuICBsYXp5VmFsaWRhdG9yIGFzIGxhenlWYWxpZGF0b3I4LFxuICB6b2RTY2hlbWEgYXMgem9kU2NoZW1hMTRcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejE2IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haVJlc3BvbnNlc0NodW5rU2NoZW1hID0gbGF6eVZhbGlkYXRvcjgoXG4gICgpID0+IHpvZFNjaGVtYTE0KFxuICAgIHoxNi51bmlvbihbXG4gICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZXNwb25zZS5vdXRwdXRfdGV4dC5kZWx0YVwiKSxcbiAgICAgICAgaXRlbV9pZDogejE2LnN0cmluZygpLFxuICAgICAgICBkZWx0YTogejE2LnN0cmluZygpLFxuICAgICAgICBsb2dwcm9iczogejE2LmFycmF5KFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdG9rZW46IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGxvZ3Byb2I6IHoxNi5udW1iZXIoKSxcbiAgICAgICAgICAgIHRvcF9sb2dwcm9iczogejE2LmFycmF5KFxuICAgICAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0b2tlbjogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIGxvZ3Byb2I6IHoxNi5udW1iZXIoKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgICkubnVsbGlzaCgpXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYuZW51bShbXCJyZXNwb25zZS5jb21wbGV0ZWRcIiwgXCJyZXNwb25zZS5pbmNvbXBsZXRlXCJdKSxcbiAgICAgICAgcmVzcG9uc2U6IHoxNi5vYmplY3Qoe1xuICAgICAgICAgIGluY29tcGxldGVfZGV0YWlsczogejE2Lm9iamVjdCh7IHJlYXNvbjogejE2LnN0cmluZygpIH0pLm51bGxpc2goKSxcbiAgICAgICAgICB1c2FnZTogejE2Lm9iamVjdCh7XG4gICAgICAgICAgICBpbnB1dF90b2tlbnM6IHoxNi5udW1iZXIoKSxcbiAgICAgICAgICAgIGlucHV0X3Rva2Vuc19kZXRhaWxzOiB6MTYub2JqZWN0KHsgY2FjaGVkX3Rva2VuczogejE2Lm51bWJlcigpLm51bGxpc2goKSB9KS5udWxsaXNoKCksXG4gICAgICAgICAgICBvdXRwdXRfdG9rZW5zOiB6MTYubnVtYmVyKCksXG4gICAgICAgICAgICBvdXRwdXRfdG9rZW5zX2RldGFpbHM6IHoxNi5vYmplY3QoeyByZWFzb25pbmdfdG9rZW5zOiB6MTYubnVtYmVyKCkubnVsbGlzaCgpIH0pLm51bGxpc2goKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHNlcnZpY2VfdGllcjogejE2LnN0cmluZygpLm51bGxpc2goKVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZXNwb25zZS5jcmVhdGVkXCIpLFxuICAgICAgICByZXNwb25zZTogejE2Lm9iamVjdCh7XG4gICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICBjcmVhdGVkX2F0OiB6MTYubnVtYmVyKCksXG4gICAgICAgICAgbW9kZWw6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICBzZXJ2aWNlX3RpZXI6IHoxNi5zdHJpbmcoKS5udWxsaXNoKClcbiAgICAgICAgfSlcbiAgICAgIH0pLFxuICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwicmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWRcIiksXG4gICAgICAgIG91dHB1dF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICBpdGVtOiB6MTYuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcIm1lc3NhZ2VcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlYXNvbmluZ1wiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBlbmNyeXB0ZWRfY29udGVudDogejE2LnN0cmluZygpLm51bGxpc2goKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJmdW5jdGlvbl9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGNhbGxfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIG5hbWU6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogejE2LnN0cmluZygpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcIndlYl9zZWFyY2hfY2FsbFwiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBzdGF0dXM6IHoxNi5zdHJpbmcoKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJjb21wdXRlcl9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YXR1czogejE2LnN0cmluZygpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImZpbGVfc2VhcmNoX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImltYWdlX2dlbmVyYXRpb25fY2FsbFwiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwiY29kZV9pbnRlcnByZXRlcl9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGNvbnRhaW5lcl9pZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgY29kZTogejE2LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgICAgICAgICBvdXRwdXRzOiB6MTYuYXJyYXkoXG4gICAgICAgICAgICAgIHoxNi5kaXNjcmltaW5hdGVkVW5pb24oXCJ0eXBlXCIsIFtcbiAgICAgICAgICAgICAgICB6MTYub2JqZWN0KHsgdHlwZTogejE2LmxpdGVyYWwoXCJsb2dzXCIpLCBsb2dzOiB6MTYuc3RyaW5nKCkgfSksXG4gICAgICAgICAgICAgICAgejE2Lm9iamVjdCh7IHR5cGU6IHoxNi5saXRlcmFsKFwiaW1hZ2VcIiksIHVybDogejE2LnN0cmluZygpIH0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApLm51bGxhYmxlKCksXG4gICAgICAgICAgICBzdGF0dXM6IHoxNi5zdHJpbmcoKVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmVcIiksXG4gICAgICAgIG91dHB1dF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICBpdGVtOiB6MTYuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcIm1lc3NhZ2VcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlYXNvbmluZ1wiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBlbmNyeXB0ZWRfY29udGVudDogejE2LnN0cmluZygpLm51bGxpc2goKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJmdW5jdGlvbl9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGNhbGxfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIG5hbWU6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgc3RhdHVzOiB6MTYubGl0ZXJhbChcImNvbXBsZXRlZFwiKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJjb2RlX2ludGVycHJldGVyX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgY29kZTogejE2LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgICAgICAgICBjb250YWluZXJfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIG91dHB1dHM6IHoxNi5hcnJheShcbiAgICAgICAgICAgICAgejE2LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgICAgICAgICAgIHoxNi5vYmplY3QoeyB0eXBlOiB6MTYubGl0ZXJhbChcImxvZ3NcIiksIGxvZ3M6IHoxNi5zdHJpbmcoKSB9KSxcbiAgICAgICAgICAgICAgICB6MTYub2JqZWN0KHsgdHlwZTogejE2LmxpdGVyYWwoXCJpbWFnZVwiKSwgdXJsOiB6MTYuc3RyaW5nKCkgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICkubnVsbGFibGUoKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJpbWFnZV9nZW5lcmF0aW9uX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgcmVzdWx0OiB6MTYuc3RyaW5nKClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwid2ViX3NlYXJjaF9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YXR1czogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgYWN0aW9uOiB6MTYuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwic2VhcmNoXCIpLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB6MTYuc3RyaW5nKCkubnVsbGlzaCgpXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcIm9wZW5fcGFnZVwiKSxcbiAgICAgICAgICAgICAgICB1cmw6IHoxNi5zdHJpbmcoKVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJmaW5kXCIpLFxuICAgICAgICAgICAgICAgIHVybDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIHBhdHRlcm46IHoxNi5zdHJpbmcoKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwiZmlsZV9zZWFyY2hfY2FsbFwiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBxdWVyaWVzOiB6MTYuYXJyYXkoejE2LnN0cmluZygpKSxcbiAgICAgICAgICAgIHJlc3VsdHM6IHoxNi5hcnJheShcbiAgICAgICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogejE2LnJlY29yZCh6MTYuc3RyaW5nKCksIHoxNi51bmtub3duKCkpLFxuICAgICAgICAgICAgICAgIGZpbGVfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIHNjb3JlOiB6MTYubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgdGV4dDogejE2LnN0cmluZygpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLm51bGxpc2goKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJsb2NhbF9zaGVsbF9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGNhbGxfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIGFjdGlvbjogejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwiZXhlY1wiKSxcbiAgICAgICAgICAgICAgY29tbWFuZDogejE2LmFycmF5KHoxNi5zdHJpbmcoKSksXG4gICAgICAgICAgICAgIHRpbWVvdXRfbXM6IHoxNi5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgICB1c2VyOiB6MTYuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgICAgd29ya2luZ19kaXJlY3Rvcnk6IHoxNi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICAgICAgICBlbnY6IHoxNi5yZWNvcmQoejE2LnN0cmluZygpLCB6MTYuc3RyaW5nKCkpLm9wdGlvbmFsKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImNvbXB1dGVyX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgc3RhdHVzOiB6MTYubGl0ZXJhbChcImNvbXBsZXRlZFwiKVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhXCIpLFxuICAgICAgICBpdGVtX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgIG91dHB1dF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICBkZWx0YTogejE2LnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlc3BvbnNlLmltYWdlX2dlbmVyYXRpb25fY2FsbC5wYXJ0aWFsX2ltYWdlXCIpLFxuICAgICAgICBpdGVtX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgIG91dHB1dF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICBwYXJ0aWFsX2ltYWdlX2I2NDogejE2LnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlc3BvbnNlLmNvZGVfaW50ZXJwcmV0ZXJfY2FsbF9jb2RlLmRlbHRhXCIpLFxuICAgICAgICBpdGVtX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgIG91dHB1dF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICBkZWx0YTogejE2LnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInJlc3BvbnNlLmNvZGVfaW50ZXJwcmV0ZXJfY2FsbF9jb2RlLmRvbmVcIiksXG4gICAgICAgIGl0ZW1faWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgb3V0cHV0X2luZGV4OiB6MTYubnVtYmVyKCksXG4gICAgICAgIGNvZGU6IHoxNi5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZXNwb25zZS5vdXRwdXRfdGV4dC5hbm5vdGF0aW9uLmFkZGVkXCIpLFxuICAgICAgICBhbm5vdGF0aW9uOiB6MTYuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInVybF9jaXRhdGlvblwiKSxcbiAgICAgICAgICAgIHVybDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgdGl0bGU6IHoxNi5zdHJpbmcoKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJmaWxlX2NpdGF0aW9uXCIpLFxuICAgICAgICAgICAgZmlsZV9pZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgZmlsZW5hbWU6IHoxNi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICBpbmRleDogejE2Lm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgICAgICAgIHN0YXJ0X2luZGV4OiB6MTYubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgZW5kX2luZGV4OiB6MTYubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgcXVvdGU6IHoxNi5zdHJpbmcoKS5udWxsaXNoKClcbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgfSksXG4gICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV9wYXJ0LmFkZGVkXCIpLFxuICAgICAgICBpdGVtX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgIHN1bW1hcnlfaW5kZXg6IHoxNi5udW1iZXIoKVxuICAgICAgfSksXG4gICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV90ZXh0LmRlbHRhXCIpLFxuICAgICAgICBpdGVtX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgIHN1bW1hcnlfaW5kZXg6IHoxNi5udW1iZXIoKSxcbiAgICAgICAgZGVsdGE6IHoxNi5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV9wYXJ0LmRvbmVcIiksXG4gICAgICAgIGl0ZW1faWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgc3VtbWFyeV9pbmRleDogejE2Lm51bWJlcigpXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImVycm9yXCIpLFxuICAgICAgICBjb2RlOiB6MTYuc3RyaW5nKCksXG4gICAgICAgIG1lc3NhZ2U6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgcGFyYW06IHoxNi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgIHNlcXVlbmNlX251bWJlcjogejE2Lm51bWJlcigpXG4gICAgICB9KSxcbiAgICAgIHoxNi5vYmplY3QoeyB0eXBlOiB6MTYuc3RyaW5nKCkgfSkubG9vc2UoKS50cmFuc2Zvcm0oKHZhbHVlKSA9PiAoe1xuICAgICAgICB0eXBlOiBcInVua25vd25fY2h1bmtcIixcbiAgICAgICAgbWVzc2FnZTogdmFsdWUudHlwZVxuICAgICAgfSkpXG4gICAgICAvLyBmYWxsYmFjayBmb3IgdW5rbm93biBjaHVua3NcbiAgICBdKVxuICApXG4pO1xudmFyIG9wZW5haVJlc3BvbnNlc1Jlc3BvbnNlU2NoZW1hID0gbGF6eVZhbGlkYXRvcjgoXG4gICgpID0+IHpvZFNjaGVtYTE0KFxuICAgIHoxNi5vYmplY3Qoe1xuICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgIGNyZWF0ZWRfYXQ6IHoxNi5udW1iZXIoKSxcbiAgICAgIGVycm9yOiB6MTYub2JqZWN0KHtcbiAgICAgICAgY29kZTogejE2LnN0cmluZygpLFxuICAgICAgICBtZXNzYWdlOiB6MTYuc3RyaW5nKClcbiAgICAgIH0pLm51bGxpc2goKSxcbiAgICAgIG1vZGVsOiB6MTYuc3RyaW5nKCksXG4gICAgICBvdXRwdXQ6IHoxNi5hcnJheShcbiAgICAgICAgejE2LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJtZXNzYWdlXCIpLFxuICAgICAgICAgICAgcm9sZTogejE2LmxpdGVyYWwoXCJhc3Npc3RhbnRcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgY29udGVudDogejE2LmFycmF5KFxuICAgICAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcIm91dHB1dF90ZXh0XCIpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsb2dwcm9iczogejE2LmFycmF5KFxuICAgICAgICAgICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIGxvZ3Byb2I6IHoxNi5udW1iZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9wX2xvZ3Byb2JzOiB6MTYuYXJyYXkoXG4gICAgICAgICAgICAgICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9ncHJvYjogejE2Lm51bWJlcigpXG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uczogejE2LmFycmF5KFxuICAgICAgICAgICAgICAgICAgejE2LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgICAgICAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcInVybF9jaXRhdGlvblwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZF9pbmRleDogejE2Lm51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgIHVybDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB6MTYuc3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwiZmlsZV9jaXRhdGlvblwiKSxcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHoxNi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHoxNi5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnRfaW5kZXg6IHoxNi5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgICAgICAgICAgZW5kX2luZGV4OiB6MTYubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICAgICAgICAgIHF1b3RlOiB6MTYuc3RyaW5nKCkubnVsbGlzaCgpXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImNvbnRhaW5lcl9maWxlX2NpdGF0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwid2ViX3NlYXJjaF9jYWxsXCIpLFxuICAgICAgICAgICAgaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIHN0YXR1czogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgYWN0aW9uOiB6MTYuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwic2VhcmNoXCIpLFxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB6MTYuc3RyaW5nKCkubnVsbGlzaCgpXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcIm9wZW5fcGFnZVwiKSxcbiAgICAgICAgICAgICAgICB1cmw6IHoxNi5zdHJpbmcoKVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJmaW5kXCIpLFxuICAgICAgICAgICAgICAgIHVybDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIHBhdHRlcm46IHoxNi5zdHJpbmcoKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwiZmlsZV9zZWFyY2hfY2FsbFwiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBxdWVyaWVzOiB6MTYuYXJyYXkoejE2LnN0cmluZygpKSxcbiAgICAgICAgICAgIHJlc3VsdHM6IHoxNi5hcnJheShcbiAgICAgICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogejE2LnJlY29yZCh6MTYuc3RyaW5nKCksIHoxNi51bmtub3duKCkpLFxuICAgICAgICAgICAgICAgIGZpbGVfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBmaWxlbmFtZTogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIHNjb3JlOiB6MTYubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgdGV4dDogejE2LnN0cmluZygpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLm51bGxpc2goKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJjb2RlX2ludGVycHJldGVyX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgY29kZTogejE2LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgICAgICAgICBjb250YWluZXJfaWQ6IHoxNi5zdHJpbmcoKSxcbiAgICAgICAgICAgIG91dHB1dHM6IHoxNi5hcnJheShcbiAgICAgICAgICAgICAgejE2LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgICAgICAgICAgIHoxNi5vYmplY3QoeyB0eXBlOiB6MTYubGl0ZXJhbChcImxvZ3NcIiksIGxvZ3M6IHoxNi5zdHJpbmcoKSB9KSxcbiAgICAgICAgICAgICAgICB6MTYub2JqZWN0KHsgdHlwZTogejE2LmxpdGVyYWwoXCJpbWFnZVwiKSwgdXJsOiB6MTYuc3RyaW5nKCkgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICkubnVsbGFibGUoKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJpbWFnZV9nZW5lcmF0aW9uX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgcmVzdWx0OiB6MTYuc3RyaW5nKClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB6MTYub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwibG9jYWxfc2hlbGxfY2FsbFwiKSxcbiAgICAgICAgICAgIGlkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBjYWxsX2lkOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBhY3Rpb246IHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImV4ZWNcIiksXG4gICAgICAgICAgICAgIGNvbW1hbmQ6IHoxNi5hcnJheSh6MTYuc3RyaW5nKCkpLFxuICAgICAgICAgICAgICB0aW1lb3V0X21zOiB6MTYubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgICAgdXNlcjogejE2LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICAgIHdvcmtpbmdfZGlyZWN0b3J5OiB6MTYuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgICAgZW52OiB6MTYucmVjb3JkKHoxNi5zdHJpbmcoKSwgejE2LnN0cmluZygpKS5vcHRpb25hbCgpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJmdW5jdGlvbl9jYWxsXCIpLFxuICAgICAgICAgICAgY2FsbF9pZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgbmFtZTogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgYXJndW1lbnRzOiB6MTYuc3RyaW5nKCksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgejE2Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6MTYubGl0ZXJhbChcImNvbXB1dGVyX2NhbGxcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgc3RhdHVzOiB6MTYuc3RyaW5nKCkub3B0aW9uYWwoKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogejE2LmxpdGVyYWwoXCJyZWFzb25pbmdcIiksXG4gICAgICAgICAgICBpZDogejE2LnN0cmluZygpLFxuICAgICAgICAgICAgZW5jcnlwdGVkX2NvbnRlbnQ6IHoxNi5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICBzdW1tYXJ5OiB6MTYuYXJyYXkoXG4gICAgICAgICAgICAgIHoxNi5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoxNi5saXRlcmFsKFwic3VtbWFyeV90ZXh0XCIpLFxuICAgICAgICAgICAgICAgIHRleHQ6IHoxNi5zdHJpbmcoKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgIF0pXG4gICAgICApLFxuICAgICAgc2VydmljZV90aWVyOiB6MTYuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgaW5jb21wbGV0ZV9kZXRhaWxzOiB6MTYub2JqZWN0KHsgcmVhc29uOiB6MTYuc3RyaW5nKCkgfSkubnVsbGlzaCgpLFxuICAgICAgdXNhZ2U6IHoxNi5vYmplY3Qoe1xuICAgICAgICBpbnB1dF90b2tlbnM6IHoxNi5udW1iZXIoKSxcbiAgICAgICAgaW5wdXRfdG9rZW5zX2RldGFpbHM6IHoxNi5vYmplY3QoeyBjYWNoZWRfdG9rZW5zOiB6MTYubnVtYmVyKCkubnVsbGlzaCgpIH0pLm51bGxpc2goKSxcbiAgICAgICAgb3V0cHV0X3Rva2VuczogejE2Lm51bWJlcigpLFxuICAgICAgICBvdXRwdXRfdG9rZW5zX2RldGFpbHM6IHoxNi5vYmplY3QoeyByZWFzb25pbmdfdG9rZW5zOiB6MTYubnVtYmVyKCkubnVsbGlzaCgpIH0pLm51bGxpc2goKVxuICAgICAgfSlcbiAgICB9KVxuICApXG4pO1xuXG4vLyBzcmMvcmVzcG9uc2VzL29wZW5haS1yZXNwb25zZXMtb3B0aW9ucy50c1xuaW1wb3J0IHtcbiAgbGF6eVZhbGlkYXRvciBhcyBsYXp5VmFsaWRhdG9yOSxcbiAgem9kU2NoZW1hIGFzIHpvZFNjaGVtYTE1XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxNyB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBUT1BfTE9HUFJPQlNfTUFYID0gMjA7XG52YXIgb3BlbmFpUmVzcG9uc2VzUmVhc29uaW5nTW9kZWxJZHMgPSBbXG4gIFwibzFcIixcbiAgXCJvMS0yMDI0LTEyLTE3XCIsXG4gIFwibzMtbWluaVwiLFxuICBcIm8zLW1pbmktMjAyNS0wMS0zMVwiLFxuICBcIm8zXCIsXG4gIFwibzMtMjAyNS0wNC0xNlwiLFxuICBcIm80LW1pbmlcIixcbiAgXCJvNC1taW5pLTIwMjUtMDQtMTZcIixcbiAgXCJjb2RleC1taW5pLWxhdGVzdFwiLFxuICBcImNvbXB1dGVyLXVzZS1wcmV2aWV3XCIsXG4gIFwiZ3B0LTVcIixcbiAgXCJncHQtNS0yMDI1LTA4LTA3XCIsXG4gIFwiZ3B0LTUtY29kZXhcIixcbiAgXCJncHQtNS1taW5pXCIsXG4gIFwiZ3B0LTUtbWluaS0yMDI1LTA4LTA3XCIsXG4gIFwiZ3B0LTUtbmFub1wiLFxuICBcImdwdC01LW5hbm8tMjAyNS0wOC0wN1wiLFxuICBcImdwdC01LXByb1wiLFxuICBcImdwdC01LXByby0yMDI1LTEwLTA2XCJcbl07XG52YXIgb3BlbmFpUmVzcG9uc2VzTW9kZWxJZHMgPSBbXG4gIFwiZ3B0LTQuMVwiLFxuICBcImdwdC00LjEtMjAyNS0wNC0xNFwiLFxuICBcImdwdC00LjEtbWluaVwiLFxuICBcImdwdC00LjEtbWluaS0yMDI1LTA0LTE0XCIsXG4gIFwiZ3B0LTQuMS1uYW5vXCIsXG4gIFwiZ3B0LTQuMS1uYW5vLTIwMjUtMDQtMTRcIixcbiAgXCJncHQtNG9cIixcbiAgXCJncHQtNG8tMjAyNC0wNS0xM1wiLFxuICBcImdwdC00by0yMDI0LTA4LTA2XCIsXG4gIFwiZ3B0LTRvLTIwMjQtMTEtMjBcIixcbiAgXCJncHQtNG8tYXVkaW8tcHJldmlld1wiLFxuICBcImdwdC00by1hdWRpby1wcmV2aWV3LTIwMjQtMTAtMDFcIixcbiAgXCJncHQtNG8tYXVkaW8tcHJldmlldy0yMDI0LTEyLTE3XCIsXG4gIFwiZ3B0LTRvLXNlYXJjaC1wcmV2aWV3XCIsXG4gIFwiZ3B0LTRvLXNlYXJjaC1wcmV2aWV3LTIwMjUtMDMtMTFcIixcbiAgXCJncHQtNG8tbWluaS1zZWFyY2gtcHJldmlld1wiLFxuICBcImdwdC00by1taW5pLXNlYXJjaC1wcmV2aWV3LTIwMjUtMDMtMTFcIixcbiAgXCJncHQtNG8tbWluaVwiLFxuICBcImdwdC00by1taW5pLTIwMjQtMDctMThcIixcbiAgXCJncHQtNC10dXJib1wiLFxuICBcImdwdC00LXR1cmJvLTIwMjQtMDQtMDlcIixcbiAgXCJncHQtNC10dXJiby1wcmV2aWV3XCIsXG4gIFwiZ3B0LTQtMDEyNS1wcmV2aWV3XCIsXG4gIFwiZ3B0LTQtMTEwNi1wcmV2aWV3XCIsXG4gIFwiZ3B0LTRcIixcbiAgXCJncHQtNC0wNjEzXCIsXG4gIFwiZ3B0LTQuNS1wcmV2aWV3XCIsXG4gIFwiZ3B0LTQuNS1wcmV2aWV3LTIwMjUtMDItMjdcIixcbiAgXCJncHQtMy41LXR1cmJvLTAxMjVcIixcbiAgXCJncHQtMy41LXR1cmJvXCIsXG4gIFwiZ3B0LTMuNS10dXJiby0xMTA2XCIsXG4gIFwiY2hhdGdwdC00by1sYXRlc3RcIixcbiAgXCJncHQtNS1jaGF0LWxhdGVzdFwiLFxuICAuLi5vcGVuYWlSZXNwb25zZXNSZWFzb25pbmdNb2RlbElkc1xuXTtcbnZhciBvcGVuYWlSZXNwb25zZXNQcm92aWRlck9wdGlvbnNTY2hlbWEgPSBsYXp5VmFsaWRhdG9yOShcbiAgKCkgPT4gem9kU2NoZW1hMTUoXG4gICAgejE3Lm9iamVjdCh7XG4gICAgICBpbmNsdWRlOiB6MTcuYXJyYXkoXG4gICAgICAgIHoxNy5lbnVtKFtcbiAgICAgICAgICBcInJlYXNvbmluZy5lbmNyeXB0ZWRfY29udGVudFwiLFxuICAgICAgICAgIC8vIGhhbmRsZWQgaW50ZXJuYWxseSBieSBkZWZhdWx0LCBvbmx5IG5lZWRlZCBmb3IgdW5rbm93biByZWFzb25pbmcgbW9kZWxzXG4gICAgICAgICAgXCJmaWxlX3NlYXJjaF9jYWxsLnJlc3VsdHNcIixcbiAgICAgICAgICBcIm1lc3NhZ2Uub3V0cHV0X3RleHQubG9ncHJvYnNcIlxuICAgICAgICBdKVxuICAgICAgKS5udWxsaXNoKCksXG4gICAgICBpbnN0cnVjdGlvbnM6IHoxNy5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRva2Vucy5cbiAgICAgICAqXG4gICAgICAgKiBTZXR0aW5nIHRvIHRydWUgd2lsbCByZXR1cm4gdGhlIGxvZyBwcm9iYWJpbGl0aWVzIG9mIHRoZSB0b2tlbnMgdGhhdFxuICAgICAgICogd2VyZSBnZW5lcmF0ZWQuXG4gICAgICAgKlxuICAgICAgICogU2V0dGluZyB0byBhIG51bWJlciB3aWxsIHJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRvcCBuXG4gICAgICAgKiB0b2tlbnMgdGhhdCB3ZXJlIGdlbmVyYXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcmVzcG9uc2VzL2NyZWF0ZVxuICAgICAgICogQHNlZSBodHRwczovL2Nvb2tib29rLm9wZW5haS5jb20vZXhhbXBsZXMvdXNpbmdfbG9ncHJvYnNcbiAgICAgICAqL1xuICAgICAgbG9ncHJvYnM6IHoxNy51bmlvbihbejE3LmJvb2xlYW4oKSwgejE3Lm51bWJlcigpLm1pbigxKS5tYXgoVE9QX0xPR1BST0JTX01BWCldKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG90YWwgY2FsbHMgdG8gYnVpbHQtaW4gdG9vbHMgdGhhdCBjYW4gYmUgcHJvY2Vzc2VkIGluIGEgcmVzcG9uc2UuXG4gICAgICAgKiBUaGlzIG1heGltdW0gbnVtYmVyIGFwcGxpZXMgYWNyb3NzIGFsbCBidWlsdC1pbiB0b29sIGNhbGxzLCBub3QgcGVyIGluZGl2aWR1YWwgdG9vbC5cbiAgICAgICAqIEFueSBmdXJ0aGVyIGF0dGVtcHRzIHRvIGNhbGwgYSB0b29sIGJ5IHRoZSBtb2RlbCB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICAgKi9cbiAgICAgIG1heFRvb2xDYWxsczogejE3Lm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgIG1ldGFkYXRhOiB6MTcuYW55KCkubnVsbGlzaCgpLFxuICAgICAgcGFyYWxsZWxUb29sQ2FsbHM6IHoxNy5ib29sZWFuKCkubnVsbGlzaCgpLFxuICAgICAgcHJldmlvdXNSZXNwb25zZUlkOiB6MTcuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgcHJvbXB0Q2FjaGVLZXk6IHoxNy5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICByZWFzb25pbmdFZmZvcnQ6IHoxNy5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICByZWFzb25pbmdTdW1tYXJ5OiB6MTcuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgc2FmZXR5SWRlbnRpZmllcjogejE3LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgIHNlcnZpY2VUaWVyOiB6MTcuZW51bShbXCJhdXRvXCIsIFwiZmxleFwiLCBcInByaW9yaXR5XCIsIFwiZGVmYXVsdFwiXSkubnVsbGlzaCgpLFxuICAgICAgc3RvcmU6IHoxNy5ib29sZWFuKCkubnVsbGlzaCgpLFxuICAgICAgc3RyaWN0SnNvblNjaGVtYTogejE3LmJvb2xlYW4oKS5udWxsaXNoKCksXG4gICAgICB0ZXh0VmVyYm9zaXR5OiB6MTcuZW51bShbXCJsb3dcIiwgXCJtZWRpdW1cIiwgXCJoaWdoXCJdKS5udWxsaXNoKCksXG4gICAgICB0cnVuY2F0aW9uOiB6MTcuZW51bShbXCJhdXRvXCIsIFwiZGlzYWJsZWRcIl0pLm51bGxpc2goKSxcbiAgICAgIHVzZXI6IHoxNy5zdHJpbmcoKS5udWxsaXNoKClcbiAgICB9KVxuICApXG4pO1xuXG4vLyBzcmMvcmVzcG9uc2VzL29wZW5haS1yZXNwb25zZXMtcHJlcGFyZS10b29scy50c1xuaW1wb3J0IHtcbiAgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IgYXMgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3I1XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZVR5cGVzIGFzIHZhbGlkYXRlVHlwZXMyIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVSZXNwb25zZXNUb29scyh7XG4gIHRvb2xzLFxuICB0b29sQ2hvaWNlLFxuICBzdHJpY3RKc29uU2NoZW1hXG59KSB7XG4gIHRvb2xzID0gKHRvb2xzID09IG51bGwgPyB2b2lkIDAgOiB0b29scy5sZW5ndGgpID8gdG9vbHMgOiB2b2lkIDA7XG4gIGNvbnN0IHRvb2xXYXJuaW5ncyA9IFtdO1xuICBpZiAodG9vbHMgPT0gbnVsbCkge1xuICAgIHJldHVybiB7IHRvb2xzOiB2b2lkIDAsIHRvb2xDaG9pY2U6IHZvaWQgMCwgdG9vbFdhcm5pbmdzIH07XG4gIH1cbiAgY29uc3Qgb3BlbmFpVG9vbHMyID0gW107XG4gIGZvciAoY29uc3QgdG9vbCBvZiB0b29scykge1xuICAgIHN3aXRjaCAodG9vbC50eXBlKSB7XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgb3BlbmFpVG9vbHMyLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgICAgcGFyYW1ldGVyczogdG9vbC5pbnB1dFNjaGVtYSxcbiAgICAgICAgICBzdHJpY3Q6IHN0cmljdEpzb25TY2hlbWFcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInByb3ZpZGVyLWRlZmluZWRcIjoge1xuICAgICAgICBzd2l0Y2ggKHRvb2wuaWQpIHtcbiAgICAgICAgICBjYXNlIFwib3BlbmFpLmZpbGVfc2VhcmNoXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBhd2FpdCB2YWxpZGF0ZVR5cGVzMih7XG4gICAgICAgICAgICAgIHZhbHVlOiB0b29sLmFyZ3MsXG4gICAgICAgICAgICAgIHNjaGVtYTogZmlsZVNlYXJjaEFyZ3NTY2hlbWFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3BlbmFpVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcImZpbGVfc2VhcmNoXCIsXG4gICAgICAgICAgICAgIHZlY3Rvcl9zdG9yZV9pZHM6IGFyZ3MudmVjdG9yU3RvcmVJZHMsXG4gICAgICAgICAgICAgIG1heF9udW1fcmVzdWx0czogYXJncy5tYXhOdW1SZXN1bHRzLFxuICAgICAgICAgICAgICByYW5raW5nX29wdGlvbnM6IGFyZ3MucmFua2luZyA/IHtcbiAgICAgICAgICAgICAgICByYW5rZXI6IGFyZ3MucmFua2luZy5yYW5rZXIsXG4gICAgICAgICAgICAgICAgc2NvcmVfdGhyZXNob2xkOiBhcmdzLnJhbmtpbmcuc2NvcmVUaHJlc2hvbGRcbiAgICAgICAgICAgICAgfSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgZmlsdGVyczogYXJncy5maWx0ZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwib3BlbmFpLmxvY2FsX3NoZWxsXCI6IHtcbiAgICAgICAgICAgIG9wZW5haVRvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJsb2NhbF9zaGVsbFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwib3BlbmFpLndlYl9zZWFyY2hfcHJldmlld1wiOiB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gYXdhaXQgdmFsaWRhdGVUeXBlczIoe1xuICAgICAgICAgICAgICB2YWx1ZTogdG9vbC5hcmdzLFxuICAgICAgICAgICAgICBzY2hlbWE6IHdlYlNlYXJjaFByZXZpZXdBcmdzU2NoZW1hXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wZW5haVRvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJ3ZWJfc2VhcmNoX3ByZXZpZXdcIixcbiAgICAgICAgICAgICAgc2VhcmNoX2NvbnRleHRfc2l6ZTogYXJncy5zZWFyY2hDb250ZXh0U2l6ZSxcbiAgICAgICAgICAgICAgdXNlcl9sb2NhdGlvbjogYXJncy51c2VyTG9jYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJvcGVuYWkud2ViX3NlYXJjaFwiOiB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gYXdhaXQgdmFsaWRhdGVUeXBlczIoe1xuICAgICAgICAgICAgICB2YWx1ZTogdG9vbC5hcmdzLFxuICAgICAgICAgICAgICBzY2hlbWE6IHdlYlNlYXJjaEFyZ3NTY2hlbWFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3BlbmFpVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgZmlsdGVyczogYXJncy5maWx0ZXJzICE9IG51bGwgPyB7IGFsbG93ZWRfZG9tYWluczogYXJncy5maWx0ZXJzLmFsbG93ZWREb21haW5zIH0gOiB2b2lkIDAsXG4gICAgICAgICAgICAgIHNlYXJjaF9jb250ZXh0X3NpemU6IGFyZ3Muc2VhcmNoQ29udGV4dFNpemUsXG4gICAgICAgICAgICAgIHVzZXJfbG9jYXRpb246IGFyZ3MudXNlckxvY2F0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwib3BlbmFpLmNvZGVfaW50ZXJwcmV0ZXJcIjoge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGF3YWl0IHZhbGlkYXRlVHlwZXMyKHtcbiAgICAgICAgICAgICAgdmFsdWU6IHRvb2wuYXJncyxcbiAgICAgICAgICAgICAgc2NoZW1hOiBjb2RlSW50ZXJwcmV0ZXJBcmdzU2NoZW1hXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wZW5haVRvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJjb2RlX2ludGVycHJldGVyXCIsXG4gICAgICAgICAgICAgIGNvbnRhaW5lcjogYXJncy5jb250YWluZXIgPT0gbnVsbCA/IHsgdHlwZTogXCJhdXRvXCIsIGZpbGVfaWRzOiB2b2lkIDAgfSA6IHR5cGVvZiBhcmdzLmNvbnRhaW5lciA9PT0gXCJzdHJpbmdcIiA/IGFyZ3MuY29udGFpbmVyIDogeyB0eXBlOiBcImF1dG9cIiwgZmlsZV9pZHM6IGFyZ3MuY29udGFpbmVyLmZpbGVJZHMgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcIm9wZW5haS5pbWFnZV9nZW5lcmF0aW9uXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBhd2FpdCB2YWxpZGF0ZVR5cGVzMih7XG4gICAgICAgICAgICAgIHZhbHVlOiB0b29sLmFyZ3MsXG4gICAgICAgICAgICAgIHNjaGVtYTogaW1hZ2VHZW5lcmF0aW9uQXJnc1NjaGVtYVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvcGVuYWlUb29sczIucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2VfZ2VuZXJhdGlvblwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBhcmdzLmJhY2tncm91bmQsXG4gICAgICAgICAgICAgIGlucHV0X2ZpZGVsaXR5OiBhcmdzLmlucHV0RmlkZWxpdHksXG4gICAgICAgICAgICAgIGlucHV0X2ltYWdlX21hc2s6IGFyZ3MuaW5wdXRJbWFnZU1hc2sgPyB7XG4gICAgICAgICAgICAgICAgZmlsZV9pZDogYXJncy5pbnB1dEltYWdlTWFzay5maWxlSWQsXG4gICAgICAgICAgICAgICAgaW1hZ2VfdXJsOiBhcmdzLmlucHV0SW1hZ2VNYXNrLmltYWdlVXJsXG4gICAgICAgICAgICAgIH0gOiB2b2lkIDAsXG4gICAgICAgICAgICAgIG1vZGVsOiBhcmdzLm1vZGVsLFxuICAgICAgICAgICAgICBzaXplOiBhcmdzLnNpemUsXG4gICAgICAgICAgICAgIHF1YWxpdHk6IGFyZ3MucXVhbGl0eSxcbiAgICAgICAgICAgICAgbW9kZXJhdGlvbjogYXJncy5tb2RlcmF0aW9uLFxuICAgICAgICAgICAgICBvdXRwdXRfZm9ybWF0OiBhcmdzLm91dHB1dEZvcm1hdCxcbiAgICAgICAgICAgICAgb3V0cHV0X2NvbXByZXNzaW9uOiBhcmdzLm91dHB1dENvbXByZXNzaW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRvb2xXYXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC10b29sXCIsIHRvb2wgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAodG9vbENob2ljZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHsgdG9vbHM6IG9wZW5haVRvb2xzMiwgdG9vbENob2ljZTogdm9pZCAwLCB0b29sV2FybmluZ3MgfTtcbiAgfVxuICBjb25zdCB0eXBlID0gdG9vbENob2ljZS50eXBlO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwiYXV0b1wiOlxuICAgIGNhc2UgXCJub25lXCI6XG4gICAgY2FzZSBcInJlcXVpcmVkXCI6XG4gICAgICByZXR1cm4geyB0b29sczogb3BlbmFpVG9vbHMyLCB0b29sQ2hvaWNlOiB0eXBlLCB0b29sV2FybmluZ3MgfTtcbiAgICBjYXNlIFwidG9vbFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9vbHM6IG9wZW5haVRvb2xzMixcbiAgICAgICAgdG9vbENob2ljZTogdG9vbENob2ljZS50b29sTmFtZSA9PT0gXCJjb2RlX2ludGVycHJldGVyXCIgfHwgdG9vbENob2ljZS50b29sTmFtZSA9PT0gXCJmaWxlX3NlYXJjaFwiIHx8IHRvb2xDaG9pY2UudG9vbE5hbWUgPT09IFwiaW1hZ2VfZ2VuZXJhdGlvblwiIHx8IHRvb2xDaG9pY2UudG9vbE5hbWUgPT09IFwid2ViX3NlYXJjaF9wcmV2aWV3XCIgfHwgdG9vbENob2ljZS50b29sTmFtZSA9PT0gXCJ3ZWJfc2VhcmNoXCIgPyB7IHR5cGU6IHRvb2xDaG9pY2UudG9vbE5hbWUgfSA6IHsgdHlwZTogXCJmdW5jdGlvblwiLCBuYW1lOiB0b29sQ2hvaWNlLnRvb2xOYW1lIH0sXG4gICAgICAgIHRvb2xXYXJuaW5nc1xuICAgICAgfTtcbiAgICBkZWZhdWx0OiB7XG4gICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gdHlwZTtcbiAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjUoe1xuICAgICAgICBmdW5jdGlvbmFsaXR5OiBgdG9vbCBjaG9pY2UgdHlwZTogJHtfZXhoYXVzdGl2ZUNoZWNrfWBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBzcmMvcmVzcG9uc2VzL29wZW5haS1yZXNwb25zZXMtbGFuZ3VhZ2UtbW9kZWwudHNcbnZhciBPcGVuQUlSZXNwb25zZXNMYW5ndWFnZU1vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLnNwZWNpZmljYXRpb25WZXJzaW9uID0gXCJ2MlwiO1xuICAgIHRoaXMuc3VwcG9ydGVkVXJscyA9IHtcbiAgICAgIFwiaW1hZ2UvKlwiOiBbL15odHRwcz86XFwvXFwvLiokL10sXG4gICAgICBcImFwcGxpY2F0aW9uL3BkZlwiOiBbL15odHRwcz86XFwvXFwvLiokL11cbiAgICB9O1xuICAgIHRoaXMubW9kZWxJZCA9IG1vZGVsSWQ7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBhc3luYyBnZXRBcmdzKHtcbiAgICBtYXhPdXRwdXRUb2tlbnMsXG4gICAgdGVtcGVyYXR1cmUsXG4gICAgc3RvcFNlcXVlbmNlcyxcbiAgICB0b3BQLFxuICAgIHRvcEssXG4gICAgcHJlc2VuY2VQZW5hbHR5LFxuICAgIGZyZXF1ZW5jeVBlbmFsdHksXG4gICAgc2VlZCxcbiAgICBwcm9tcHQsXG4gICAgcHJvdmlkZXJPcHRpb25zLFxuICAgIHRvb2xzLFxuICAgIHRvb2xDaG9pY2UsXG4gICAgcmVzcG9uc2VGb3JtYXRcbiAgfSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuICAgIGNvbnN0IG1vZGVsQ29uZmlnID0gZ2V0UmVzcG9uc2VzTW9kZWxDb25maWcodGhpcy5tb2RlbElkKTtcbiAgICBpZiAodG9wSyAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsIHNldHRpbmc6IFwidG9wS1wiIH0pO1xuICAgIH1cbiAgICBpZiAoc2VlZCAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsIHNldHRpbmc6IFwic2VlZFwiIH0pO1xuICAgIH1cbiAgICBpZiAocHJlc2VuY2VQZW5hbHR5ICE9IG51bGwpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJwcmVzZW5jZVBlbmFsdHlcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChmcmVxdWVuY3lQZW5hbHR5ICE9IG51bGwpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJmcmVxdWVuY3lQZW5hbHR5XCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3RvcFNlcXVlbmNlcyAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsIHNldHRpbmc6IFwic3RvcFNlcXVlbmNlc1wiIH0pO1xuICAgIH1cbiAgICBjb25zdCBvcGVuYWlPcHRpb25zID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnM1KHtcbiAgICAgIHByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgcHJvdmlkZXJPcHRpb25zLFxuICAgICAgc2NoZW1hOiBvcGVuYWlSZXNwb25zZXNQcm92aWRlck9wdGlvbnNTY2hlbWFcbiAgICB9KTtcbiAgICBjb25zdCB7IGlucHV0LCB3YXJuaW5nczogaW5wdXRXYXJuaW5ncyB9ID0gYXdhaXQgY29udmVydFRvT3BlbkFJUmVzcG9uc2VzSW5wdXQoe1xuICAgICAgcHJvbXB0LFxuICAgICAgc3lzdGVtTWVzc2FnZU1vZGU6IG1vZGVsQ29uZmlnLnN5c3RlbU1lc3NhZ2VNb2RlLFxuICAgICAgZmlsZUlkUHJlZml4ZXM6IHRoaXMuY29uZmlnLmZpbGVJZFByZWZpeGVzLFxuICAgICAgc3RvcmU6IChfYSA9IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuc3RvcmUpICE9IG51bGwgPyBfYSA6IHRydWUsXG4gICAgICBoYXNMb2NhbFNoZWxsVG9vbDogaGFzT3BlbkFJVG9vbChcIm9wZW5haS5sb2NhbF9zaGVsbFwiKVxuICAgIH0pO1xuICAgIHdhcm5pbmdzLnB1c2goLi4uaW5wdXRXYXJuaW5ncyk7XG4gICAgY29uc3Qgc3RyaWN0SnNvblNjaGVtYSA9IChfYiA9IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuc3RyaWN0SnNvblNjaGVtYSkgIT0gbnVsbCA/IF9iIDogZmFsc2U7XG4gICAgbGV0IGluY2x1ZGUgPSBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmluY2x1ZGU7XG4gICAgZnVuY3Rpb24gYWRkSW5jbHVkZShrZXkpIHtcbiAgICAgIGlmIChpbmNsdWRlID09IG51bGwpIHtcbiAgICAgICAgaW5jbHVkZSA9IFtrZXldO1xuICAgICAgfSBlbHNlIGlmICghaW5jbHVkZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIGluY2x1ZGUgPSBbLi4uaW5jbHVkZSwga2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzT3BlbkFJVG9vbChpZCkge1xuICAgICAgcmV0dXJuICh0b29scyA9PSBudWxsID8gdm9pZCAwIDogdG9vbHMuZmluZChcbiAgICAgICAgKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gXCJwcm92aWRlci1kZWZpbmVkXCIgJiYgdG9vbC5pZCA9PT0gaWRcbiAgICAgICkpICE9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHRvcExvZ3Byb2JzID0gdHlwZW9mIChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzKSA9PT0gXCJudW1iZXJcIiA/IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMubG9ncHJvYnMgOiAob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5sb2dwcm9icykgPT09IHRydWUgPyBUT1BfTE9HUFJPQlNfTUFYIDogdm9pZCAwO1xuICAgIGlmICh0b3BMb2dwcm9icykge1xuICAgICAgYWRkSW5jbHVkZShcIm1lc3NhZ2Uub3V0cHV0X3RleHQubG9ncHJvYnNcIik7XG4gICAgfVxuICAgIGNvbnN0IHdlYlNlYXJjaFRvb2xOYW1lID0gKF9jID0gdG9vbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHRvb2xzLmZpbmQoXG4gICAgICAodG9vbCkgPT4gdG9vbC50eXBlID09PSBcInByb3ZpZGVyLWRlZmluZWRcIiAmJiAodG9vbC5pZCA9PT0gXCJvcGVuYWkud2ViX3NlYXJjaFwiIHx8IHRvb2wuaWQgPT09IFwib3BlbmFpLndlYl9zZWFyY2hfcHJldmlld1wiKVxuICAgICkpID09IG51bGwgPyB2b2lkIDAgOiBfYy5uYW1lO1xuICAgIGlmICh3ZWJTZWFyY2hUb29sTmFtZSkge1xuICAgICAgYWRkSW5jbHVkZShcIndlYl9zZWFyY2hfY2FsbC5hY3Rpb24uc291cmNlc1wiKTtcbiAgICB9XG4gICAgaWYgKGhhc09wZW5BSVRvb2woXCJvcGVuYWkuY29kZV9pbnRlcnByZXRlclwiKSkge1xuICAgICAgYWRkSW5jbHVkZShcImNvZGVfaW50ZXJwcmV0ZXJfY2FsbC5vdXRwdXRzXCIpO1xuICAgIH1cbiAgICBjb25zdCBzdG9yZSA9IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuc3RvcmU7XG4gICAgaWYgKHN0b3JlID09PSBmYWxzZSAmJiBtb2RlbENvbmZpZy5pc1JlYXNvbmluZ01vZGVsKSB7XG4gICAgICBhZGRJbmNsdWRlKFwicmVhc29uaW5nLmVuY3J5cHRlZF9jb250ZW50XCIpO1xuICAgIH1cbiAgICBjb25zdCBiYXNlQXJncyA9IHtcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsSWQsXG4gICAgICBpbnB1dCxcbiAgICAgIHRlbXBlcmF0dXJlLFxuICAgICAgdG9wX3A6IHRvcFAsXG4gICAgICBtYXhfb3V0cHV0X3Rva2VuczogbWF4T3V0cHV0VG9rZW5zLFxuICAgICAgLi4uKChyZXNwb25zZUZvcm1hdCA9PSBudWxsID8gdm9pZCAwIDogcmVzcG9uc2VGb3JtYXQudHlwZSkgPT09IFwianNvblwiIHx8IChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnRleHRWZXJib3NpdHkpKSAmJiB7XG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAuLi4ocmVzcG9uc2VGb3JtYXQgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3BvbnNlRm9ybWF0LnR5cGUpID09PSBcImpzb25cIiAmJiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHJlc3BvbnNlRm9ybWF0LnNjaGVtYSAhPSBudWxsID8ge1xuICAgICAgICAgICAgICB0eXBlOiBcImpzb25fc2NoZW1hXCIsXG4gICAgICAgICAgICAgIHN0cmljdDogc3RyaWN0SnNvblNjaGVtYSxcbiAgICAgICAgICAgICAgbmFtZTogKF9kID0gcmVzcG9uc2VGb3JtYXQubmFtZSkgIT0gbnVsbCA/IF9kIDogXCJyZXNwb25zZVwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcmVzcG9uc2VGb3JtYXQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgIHNjaGVtYTogcmVzcG9uc2VGb3JtYXQuc2NoZW1hXG4gICAgICAgICAgICB9IDogeyB0eXBlOiBcImpzb25fb2JqZWN0XCIgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgLi4uKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMudGV4dFZlcmJvc2l0eSkgJiYge1xuICAgICAgICAgICAgdmVyYm9zaXR5OiBvcGVuYWlPcHRpb25zLnRleHRWZXJib3NpdHlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBwcm92aWRlciBvcHRpb25zOlxuICAgICAgbWF4X3Rvb2xfY2FsbHM6IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMubWF4VG9vbENhbGxzLFxuICAgICAgbWV0YWRhdGE6IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMubWV0YWRhdGEsXG4gICAgICBwYXJhbGxlbF90b29sX2NhbGxzOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnBhcmFsbGVsVG9vbENhbGxzLFxuICAgICAgcHJldmlvdXNfcmVzcG9uc2VfaWQ6IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMucHJldmlvdXNSZXNwb25zZUlkLFxuICAgICAgc3RvcmUsXG4gICAgICB1c2VyOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnVzZXIsXG4gICAgICBpbnN0cnVjdGlvbnM6IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuaW5zdHJ1Y3Rpb25zLFxuICAgICAgc2VydmljZV90aWVyOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnNlcnZpY2VUaWVyLFxuICAgICAgaW5jbHVkZSxcbiAgICAgIHByb21wdF9jYWNoZV9rZXk6IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMucHJvbXB0Q2FjaGVLZXksXG4gICAgICBzYWZldHlfaWRlbnRpZmllcjogb3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5zYWZldHlJZGVudGlmaWVyLFxuICAgICAgdG9wX2xvZ3Byb2JzOiB0b3BMb2dwcm9icyxcbiAgICAgIHRydW5jYXRpb246IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMudHJ1bmNhdGlvbixcbiAgICAgIC8vIG1vZGVsLXNwZWNpZmljIHNldHRpbmdzOlxuICAgICAgLi4ubW9kZWxDb25maWcuaXNSZWFzb25pbmdNb2RlbCAmJiAoKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMucmVhc29uaW5nRWZmb3J0KSAhPSBudWxsIHx8IChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnJlYXNvbmluZ1N1bW1hcnkpICE9IG51bGwpICYmIHtcbiAgICAgICAgcmVhc29uaW5nOiB7XG4gICAgICAgICAgLi4uKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMucmVhc29uaW5nRWZmb3J0KSAhPSBudWxsICYmIHtcbiAgICAgICAgICAgIGVmZm9ydDogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdFZmZvcnRcbiAgICAgICAgICB9LFxuICAgICAgICAgIC4uLihvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnJlYXNvbmluZ1N1bW1hcnkpICE9IG51bGwgJiYge1xuICAgICAgICAgICAgc3VtbWFyeTogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdTdW1tYXJ5XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAobW9kZWxDb25maWcuaXNSZWFzb25pbmdNb2RlbCkge1xuICAgICAgaWYgKGJhc2VBcmdzLnRlbXBlcmF0dXJlICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MudGVtcGVyYXR1cmUgPSB2b2lkIDA7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwidGVtcGVyYXR1cmVcIixcbiAgICAgICAgICBkZXRhaWxzOiBcInRlbXBlcmF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy50b3BfcCAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRvcF9wID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRvcFBcIixcbiAgICAgICAgICBkZXRhaWxzOiBcInRvcFAgaXMgbm90IHN1cHBvcnRlZCBmb3IgcmVhc29uaW5nIG1vZGVsc1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMucmVhc29uaW5nRWZmb3J0KSAhPSBudWxsKSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwicmVhc29uaW5nRWZmb3J0XCIsXG4gICAgICAgICAgZGV0YWlsczogXCJyZWFzb25pbmdFZmZvcnQgaXMgbm90IHN1cHBvcnRlZCBmb3Igbm9uLXJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICgob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdTdW1tYXJ5KSAhPSBudWxsKSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwicmVhc29uaW5nU3VtbWFyeVwiLFxuICAgICAgICAgIGRldGFpbHM6IFwicmVhc29uaW5nU3VtbWFyeSBpcyBub3Qgc3VwcG9ydGVkIGZvciBub24tcmVhc29uaW5nIG1vZGVsc1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuc2VydmljZVRpZXIpID09PSBcImZsZXhcIiAmJiAhbW9kZWxDb25maWcuc3VwcG9ydHNGbGV4UHJvY2Vzc2luZykge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInNlcnZpY2VUaWVyXCIsXG4gICAgICAgIGRldGFpbHM6IFwiZmxleCBwcm9jZXNzaW5nIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBvMywgbzQtbWluaSwgYW5kIGdwdC01IG1vZGVsc1wiXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBiYXNlQXJncy5zZXJ2aWNlX3RpZXI7XG4gICAgfVxuICAgIGlmICgob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5zZXJ2aWNlVGllcikgPT09IFwicHJpb3JpdHlcIiAmJiAhbW9kZWxDb25maWcuc3VwcG9ydHNQcmlvcml0eVByb2Nlc3NpbmcpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJzZXJ2aWNlVGllclwiLFxuICAgICAgICBkZXRhaWxzOiBcInByaW9yaXR5IHByb2Nlc3NpbmcgaXMgb25seSBhdmFpbGFibGUgZm9yIHN1cHBvcnRlZCBtb2RlbHMgKGdwdC00LCBncHQtNSwgZ3B0LTUtbWluaSwgbzMsIG80LW1pbmkpIGFuZCByZXF1aXJlcyBFbnRlcnByaXNlIGFjY2Vzcy4gZ3B0LTUtbmFubyBpcyBub3Qgc3VwcG9ydGVkXCJcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIGJhc2VBcmdzLnNlcnZpY2VfdGllcjtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgdG9vbHM6IG9wZW5haVRvb2xzMixcbiAgICAgIHRvb2xDaG9pY2U6IG9wZW5haVRvb2xDaG9pY2UsXG4gICAgICB0b29sV2FybmluZ3NcbiAgICB9ID0gYXdhaXQgcHJlcGFyZVJlc3BvbnNlc1Rvb2xzKHtcbiAgICAgIHRvb2xzLFxuICAgICAgdG9vbENob2ljZSxcbiAgICAgIHN0cmljdEpzb25TY2hlbWFcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgd2ViU2VhcmNoVG9vbE5hbWUsXG4gICAgICBhcmdzOiB7XG4gICAgICAgIC4uLmJhc2VBcmdzLFxuICAgICAgICB0b29sczogb3BlbmFpVG9vbHMyLFxuICAgICAgICB0b29sX2Nob2ljZTogb3BlbmFpVG9vbENob2ljZVxuICAgICAgfSxcbiAgICAgIHdhcm5pbmdzOiBbLi4ud2FybmluZ3MsIC4uLnRvb2xXYXJuaW5nc10sXG4gICAgICBzdG9yZVxuICAgIH07XG4gIH1cbiAgYXN5bmMgZG9HZW5lcmF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2ksIF9qLCBfaywgX2wsIF9tLCBfbiwgX28sIF9wLCBfcSwgX3IsIF9zO1xuICAgIGNvbnN0IHtcbiAgICAgIGFyZ3M6IGJvZHksXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHdlYlNlYXJjaFRvb2xOYW1lXG4gICAgfSA9IGF3YWl0IHRoaXMuZ2V0QXJncyhvcHRpb25zKTtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgcGF0aDogXCIvcmVzcG9uc2VzXCIsXG4gICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWRcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICB2YWx1ZTogcmVzcG9uc2UsXG4gICAgICByYXdWYWx1ZTogcmF3UmVzcG9uc2VcbiAgICB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaTUoe1xuICAgICAgdXJsLFxuICAgICAgaGVhZGVyczogY29tYmluZUhlYWRlcnM1KHRoaXMuY29uZmlnLmhlYWRlcnMoKSwgb3B0aW9ucy5oZWFkZXJzKSxcbiAgICAgIGJvZHksXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXI1KFxuICAgICAgICBvcGVuYWlSZXNwb25zZXNSZXNwb25zZVNjaGVtYVxuICAgICAgKSxcbiAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgZmV0Y2g6IHRoaXMuY29uZmlnLmZldGNoXG4gICAgfSk7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgQVBJQ2FsbEVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UuZXJyb3IubWVzc2FnZSxcbiAgICAgICAgdXJsLFxuICAgICAgICByZXF1ZXN0Qm9keVZhbHVlczogYm9keSxcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIHJlc3BvbnNlQm9keTogcmF3UmVzcG9uc2UsXG4gICAgICAgIGlzUmV0cnlhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnQgPSBbXTtcbiAgICBjb25zdCBsb2dwcm9icyA9IFtdO1xuICAgIGxldCBoYXNGdW5jdGlvbkNhbGwgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcmVzcG9uc2Uub3V0cHV0KSB7XG4gICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xuICAgICAgICBjYXNlIFwicmVhc29uaW5nXCI6IHtcbiAgICAgICAgICBpZiAocGFydC5zdW1tYXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcGFydC5zdW1tYXJ5LnB1c2goeyB0eXBlOiBcInN1bW1hcnlfdGV4dFwiLCB0ZXh0OiBcIlwiIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IHN1bW1hcnkgb2YgcGFydC5zdW1tYXJ5KSB7XG4gICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcInJlYXNvbmluZ1wiLFxuICAgICAgICAgICAgICB0ZXh0OiBzdW1tYXJ5LnRleHQsXG4gICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICAgIGl0ZW1JZDogcGFydC5pZCxcbiAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQ6IChfYSA9IHBhcnQuZW5jcnlwdGVkX2NvbnRlbnQpICE9IG51bGwgPyBfYSA6IG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsXCI6IHtcbiAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogXCJpbWFnZV9nZW5lcmF0aW9uXCIsXG4gICAgICAgICAgICBpbnB1dDogXCJ7fVwiLFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwiaW1hZ2VfZ2VuZXJhdGlvblwiLFxuICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgIHJlc3VsdDogcGFydC5yZXN1bHRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImxvY2FsX3NoZWxsX2NhbGxcIjoge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5jYWxsX2lkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwibG9jYWxfc2hlbGxcIixcbiAgICAgICAgICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGFjdGlvbjogcGFydC5hY3Rpb25cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnQuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnRQYXJ0IG9mIHBhcnQuY29udGVudCkge1xuICAgICAgICAgICAgaWYgKCgoX2MgPSAoX2IgPSBvcHRpb25zLnByb3ZpZGVyT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLm9wZW5haSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmxvZ3Byb2JzKSAmJiBjb250ZW50UGFydC5sb2dwcm9icykge1xuICAgICAgICAgICAgICBsb2dwcm9icy5wdXNoKGNvbnRlbnRQYXJ0LmxvZ3Byb2JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICB0ZXh0OiBjb250ZW50UGFydC50ZXh0LFxuICAgICAgICAgICAgICBwcm92aWRlck1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnQuaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGNvbnRlbnRQYXJ0LmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uLnR5cGUgPT09IFwidXJsX2NpdGF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJzb3VyY2VcIixcbiAgICAgICAgICAgICAgICAgIHNvdXJjZVR5cGU6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgICBpZDogKF9mID0gKF9lID0gKF9kID0gdGhpcy5jb25maWcpLmdlbmVyYXRlSWQpID09IG51bGwgPyB2b2lkIDAgOiBfZS5jYWxsKF9kKSkgIT0gbnVsbCA/IF9mIDogZ2VuZXJhdGVJZDIoKSxcbiAgICAgICAgICAgICAgICAgIHVybDogYW5ub3RhdGlvbi51cmwsXG4gICAgICAgICAgICAgICAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFubm90YXRpb24udHlwZSA9PT0gXCJmaWxlX2NpdGF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJzb3VyY2VcIixcbiAgICAgICAgICAgICAgICAgIHNvdXJjZVR5cGU6IFwiZG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiAoX2kgPSAoX2ggPSAoX2cgPSB0aGlzLmNvbmZpZykuZ2VuZXJhdGVJZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9oLmNhbGwoX2cpKSAhPSBudWxsID8gX2kgOiBnZW5lcmF0ZUlkMigpLFxuICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBcInRleHQvcGxhaW5cIixcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiAoX2sgPSAoX2ogPSBhbm5vdGF0aW9uLnF1b3RlKSAhPSBudWxsID8gX2ogOiBhbm5vdGF0aW9uLmZpbGVuYW1lKSAhPSBudWxsID8gX2sgOiBcIkRvY3VtZW50XCIsXG4gICAgICAgICAgICAgICAgICBmaWxlbmFtZTogKF9sID0gYW5ub3RhdGlvbi5maWxlbmFtZSkgIT0gbnVsbCA/IF9sIDogYW5ub3RhdGlvbi5maWxlX2lkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uX2NhbGxcIjoge1xuICAgICAgICAgIGhhc0Z1bmN0aW9uQ2FsbCA9IHRydWU7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmNhbGxfaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogcGFydC5uYW1lLFxuICAgICAgICAgICAgaW5wdXQ6IHBhcnQuYXJndW1lbnRzLFxuICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnQuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ3ZWJfc2VhcmNoX2NhbGxcIjoge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5pZCxcbiAgICAgICAgICAgIHRvb2xOYW1lOiB3ZWJTZWFyY2hUb29sTmFtZSAhPSBudWxsID8gd2ViU2VhcmNoVG9vbE5hbWUgOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeSh7fSksXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogd2ViU2VhcmNoVG9vbE5hbWUgIT0gbnVsbCA/IHdlYlNlYXJjaFRvb2xOYW1lIDogXCJ3ZWJfc2VhcmNoXCIsXG4gICAgICAgICAgICByZXN1bHQ6IG1hcFdlYlNlYXJjaE91dHB1dChwYXJ0LmFjdGlvbiksXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvbXB1dGVyX2NhbGxcIjoge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5pZCxcbiAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvbXB1dGVyX3VzZVwiLFxuICAgICAgICAgICAgaW5wdXQ6IFwiXCIsXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogXCJjb21wdXRlcl91c2VcIixcbiAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICB0eXBlOiBcImNvbXB1dGVyX3VzZV90b29sX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICBzdGF0dXM6IHBhcnQuc3RhdHVzIHx8IFwiY29tcGxldGVkXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImZpbGVfc2VhcmNoX2NhbGxcIjoge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5pZCxcbiAgICAgICAgICAgIHRvb2xOYW1lOiBcImZpbGVfc2VhcmNoXCIsXG4gICAgICAgICAgICBpbnB1dDogXCJ7fVwiLFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwiZmlsZV9zZWFyY2hcIixcbiAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICBxdWVyaWVzOiBwYXJ0LnF1ZXJpZXMsXG4gICAgICAgICAgICAgIHJlc3VsdHM6IChfbiA9IChfbSA9IHBhcnQucmVzdWx0cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9tLm1hcCgocmVzdWx0KSA9PiAoe1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHJlc3VsdC5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGZpbGVJZDogcmVzdWx0LmZpbGVfaWQsXG4gICAgICAgICAgICAgICAgZmlsZW5hbWU6IHJlc3VsdC5maWxlbmFtZSxcbiAgICAgICAgICAgICAgICBzY29yZTogcmVzdWx0LnNjb3JlLFxuICAgICAgICAgICAgICAgIHRleHQ6IHJlc3VsdC50ZXh0XG4gICAgICAgICAgICAgIH0pKSkgIT0gbnVsbCA/IF9uIDogbnVsbFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY29kZV9pbnRlcnByZXRlcl9jYWxsXCI6IHtcbiAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogXCJjb2RlX2ludGVycHJldGVyXCIsXG4gICAgICAgICAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICBjb2RlOiBwYXJ0LmNvZGUsXG4gICAgICAgICAgICAgIGNvbnRhaW5lcklkOiBwYXJ0LmNvbnRhaW5lcl9pZFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogXCJjb2RlX2ludGVycHJldGVyXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgb3V0cHV0czogcGFydC5vdXRwdXRzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHByb3ZpZGVyTWV0YWRhdGEgPSB7XG4gICAgICBvcGVuYWk6IHsgcmVzcG9uc2VJZDogcmVzcG9uc2UuaWQgfVxuICAgIH07XG4gICAgaWYgKGxvZ3Byb2JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmxvZ3Byb2JzID0gbG9ncHJvYnM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzcG9uc2Uuc2VydmljZV90aWVyID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBwcm92aWRlck1ldGFkYXRhLm9wZW5haS5zZXJ2aWNlVGllciA9IHJlc3BvbnNlLnNlcnZpY2VfdGllcjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBmaW5pc2hSZWFzb246IG1hcE9wZW5BSVJlc3BvbnNlRmluaXNoUmVhc29uKHtcbiAgICAgICAgZmluaXNoUmVhc29uOiAoX28gPSByZXNwb25zZS5pbmNvbXBsZXRlX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfby5yZWFzb24sXG4gICAgICAgIGhhc0Z1bmN0aW9uQ2FsbFxuICAgICAgfSksXG4gICAgICB1c2FnZToge1xuICAgICAgICBpbnB1dFRva2VuczogcmVzcG9uc2UudXNhZ2UuaW5wdXRfdG9rZW5zLFxuICAgICAgICBvdXRwdXRUb2tlbnM6IHJlc3BvbnNlLnVzYWdlLm91dHB1dF90b2tlbnMsXG4gICAgICAgIHRvdGFsVG9rZW5zOiByZXNwb25zZS51c2FnZS5pbnB1dF90b2tlbnMgKyByZXNwb25zZS51c2FnZS5vdXRwdXRfdG9rZW5zLFxuICAgICAgICByZWFzb25pbmdUb2tlbnM6IChfcSA9IChfcCA9IHJlc3BvbnNlLnVzYWdlLm91dHB1dF90b2tlbnNfZGV0YWlscykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wLnJlYXNvbmluZ190b2tlbnMpICE9IG51bGwgPyBfcSA6IHZvaWQgMCxcbiAgICAgICAgY2FjaGVkSW5wdXRUb2tlbnM6IChfcyA9IChfciA9IHJlc3BvbnNlLnVzYWdlLmlucHV0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX3IuY2FjaGVkX3Rva2VucykgIT0gbnVsbCA/IF9zIDogdm9pZCAwXG4gICAgICB9LFxuICAgICAgcmVxdWVzdDogeyBib2R5IH0sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICBpZDogcmVzcG9uc2UuaWQsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUocmVzcG9uc2UuY3JlYXRlZF9hdCAqIDFlMyksXG4gICAgICAgIG1vZGVsSWQ6IHJlc3BvbnNlLm1vZGVsLFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGJvZHk6IHJhd1Jlc3BvbnNlXG4gICAgICB9LFxuICAgICAgcHJvdmlkZXJNZXRhZGF0YSxcbiAgICAgIHdhcm5pbmdzXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb1N0cmVhbShvcHRpb25zKSB7XG4gICAgY29uc3Qge1xuICAgICAgYXJnczogYm9keSxcbiAgICAgIHdhcm5pbmdzLFxuICAgICAgd2ViU2VhcmNoVG9vbE5hbWUsXG4gICAgICBzdG9yZVxuICAgIH0gPSBhd2FpdCB0aGlzLmdldEFyZ3Mob3B0aW9ucyk7XG4gICAgY29uc3QgeyByZXNwb25zZUhlYWRlcnMsIHZhbHVlOiByZXNwb25zZSB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaTUoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgICBwYXRoOiBcIi9yZXNwb25zZXNcIixcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IGNvbWJpbmVIZWFkZXJzNSh0aGlzLmNvbmZpZy5oZWFkZXJzKCksIG9wdGlvbnMuaGVhZGVycyksXG4gICAgICBib2R5OiB7XG4gICAgICAgIC4uLmJvZHksXG4gICAgICAgIHN0cmVhbTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIzKFxuICAgICAgICBvcGVuYWlSZXNwb25zZXNDaHVua1NjaGVtYVxuICAgICAgKSxcbiAgICAgIGFib3J0U2lnbmFsOiBvcHRpb25zLmFib3J0U2lnbmFsLFxuICAgICAgZmV0Y2g6IHRoaXMuY29uZmlnLmZldGNoXG4gICAgfSk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGZpbmlzaFJlYXNvbiA9IFwidW5rbm93blwiO1xuICAgIGNvbnN0IHVzYWdlID0ge1xuICAgICAgaW5wdXRUb2tlbnM6IHZvaWQgMCxcbiAgICAgIG91dHB1dFRva2Vuczogdm9pZCAwLFxuICAgICAgdG90YWxUb2tlbnM6IHZvaWQgMFxuICAgIH07XG4gICAgY29uc3QgbG9ncHJvYnMgPSBbXTtcbiAgICBsZXQgcmVzcG9uc2VJZCA9IG51bGw7XG4gICAgY29uc3Qgb25nb2luZ1Rvb2xDYWxscyA9IHt9O1xuICAgIGxldCBoYXNGdW5jdGlvbkNhbGwgPSBmYWxzZTtcbiAgICBjb25zdCBhY3RpdmVSZWFzb25pbmcgPSB7fTtcbiAgICBsZXQgc2VydmljZVRpZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogcmVzcG9uc2UucGlwZVRocm91Z2goXG4gICAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwic3RyZWFtLXN0YXJ0XCIsIHdhcm5pbmdzIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2osIF9rLCBfbCwgX20sIF9uLCBfbywgX3AsIF9xLCBfciwgX3MsIF90LCBfdSwgX3Y7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlUmF3Q2h1bmtzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwicmF3XCIsIHJhd1ZhbHVlOiBjaHVuay5yYXdWYWx1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2h1bmsuc3VjY2Vzcykge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBcImVycm9yXCI7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IGNodW5rLmVycm9yIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNodW5rLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJmdW5jdGlvbl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBvbmdvaW5nVG9vbENhbGxzW3ZhbHVlLm91dHB1dF9pbmRleF0gPSB7XG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogdmFsdWUuaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5jYWxsX2lkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5jYWxsX2lkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHZhbHVlLml0ZW0ubmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJ3ZWJfc2VhcmNoX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB3ZWJTZWFyY2hUb29sTmFtZSAhPSBudWxsID8gd2ViU2VhcmNoVG9vbE5hbWUgOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHdlYlNlYXJjaFRvb2xOYW1lICE9IG51bGwgPyB3ZWJTZWFyY2hUb29sTmFtZSA6IFwid2ViX3NlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeSh7fSksXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImNvbXB1dGVyX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvbXB1dGVyX3VzZVwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1pbnB1dC1zdGFydFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb21wdXRlcl91c2VcIixcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiY29kZV9pbnRlcnByZXRlcl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBvbmdvaW5nVG9vbENhbGxzW3ZhbHVlLm91dHB1dF9pbmRleF0gPSB7XG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb2RlX2ludGVycHJldGVyXCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgY29kZUludGVycHJldGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcklkOiB2YWx1ZS5pdGVtLmNvbnRhaW5lcl9pZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1pbnB1dC1zdGFydFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb2RlX2ludGVycHJldGVyXCIsXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1pbnB1dC1kZWx0YVwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICBkZWx0YTogYHtcImNvbnRhaW5lcklkXCI6XCIke3ZhbHVlLml0ZW0uY29udGFpbmVyX2lkfVwiLFwiY29kZVwiOlwiYFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJmaWxlX3NlYXJjaF9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJmaWxlX3NlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwie31cIixcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJpbWFnZV9nZW5lcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICBpbnB1dDogXCJ7fVwiLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiB2YWx1ZS5pdGVtLmlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlT3V0cHV0SXRlbUFkZGVkQ2h1bmsodmFsdWUpICYmIHZhbHVlLml0ZW0udHlwZSA9PT0gXCJyZWFzb25pbmdcIikge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVJlYXNvbmluZ1t2YWx1ZS5pdGVtLmlkXSA9IHtcbiAgICAgICAgICAgICAgICAgIGVuY3J5cHRlZENvbnRlbnQ6IHZhbHVlLml0ZW0uZW5jcnlwdGVkX2NvbnRlbnQsXG4gICAgICAgICAgICAgICAgICBzdW1tYXJ5UGFydHM6IHsgMDogXCJhY3RpdmVcIiB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmctc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiBgJHt2YWx1ZS5pdGVtLmlkfTowYCxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQ6IChfYSA9IHZhbHVlLml0ZW0uZW5jcnlwdGVkX2NvbnRlbnQpICE9IG51bGwgPyBfYSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VPdXRwdXRJdGVtRG9uZUNodW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgICBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImZ1bmN0aW9uX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBoYXNGdW5jdGlvbkNhbGwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5jYWxsX2lkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmNhbGxfaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogdmFsdWUuaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IHZhbHVlLml0ZW0uYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHZhbHVlLml0ZW0uaWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJ3ZWJfc2VhcmNoX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDogbWFwV2ViU2VhcmNoT3V0cHV0KHZhbHVlLml0ZW0uYWN0aW9uKSxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiY29tcHV0ZXJfY2FsbFwiKSB7XG4gICAgICAgICAgICAgICAgb25nb2luZ1Rvb2xDYWxsc1t2YWx1ZS5vdXRwdXRfaW5kZXhdID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvbXB1dGVyX3VzZVwiLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb21wdXRlcl91c2VcIixcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNvbXB1dGVyX3VzZV90b29sX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHZhbHVlLml0ZW0uc3RhdHVzIHx8IFwiY29tcGxldGVkXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImZpbGVfc2VhcmNoX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImZpbGVfc2VhcmNoXCIsXG4gICAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcmllczogdmFsdWUuaXRlbS5xdWVyaWVzLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiAoX2MgPSAoX2IgPSB2YWx1ZS5pdGVtLnJlc3VsdHMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5tYXAoKHJlc3VsdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiByZXN1bHQuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlSWQ6IHJlc3VsdC5maWxlX2lkLFxuICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByZXN1bHQuZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IHJlc3VsdC5zY29yZSxcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXN1bHQudGV4dFxuICAgICAgICAgICAgICAgICAgICB9KSkpICE9IG51bGwgPyBfYyA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImNvZGVfaW50ZXJwcmV0ZXJfY2FsbFwiKSB7XG4gICAgICAgICAgICAgICAgb25nb2luZ1Rvb2xDYWxsc1t2YWx1ZS5vdXRwdXRfaW5kZXhdID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29kZV9pbnRlcnByZXRlclwiLFxuICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dHM6IHZhbHVlLml0ZW0ub3V0cHV0c1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImltYWdlX2dlbmVyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHZhbHVlLml0ZW0ucmVzdWx0XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJsb2NhbF9zaGVsbF9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBvbmdvaW5nVG9vbENhbGxzW3ZhbHVlLm91dHB1dF9pbmRleF0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmNhbGxfaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJsb2NhbF9zaGVsbFwiLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJleGVjXCIsXG4gICAgICAgICAgICAgICAgICAgICAgY29tbWFuZDogdmFsdWUuaXRlbS5hY3Rpb24uY29tbWFuZCxcbiAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0TXM6IHZhbHVlLml0ZW0uYWN0aW9uLnRpbWVvdXRfbXMsXG4gICAgICAgICAgICAgICAgICAgICAgdXNlcjogdmFsdWUuaXRlbS5hY3Rpb24udXNlcixcbiAgICAgICAgICAgICAgICAgICAgICB3b3JraW5nRGlyZWN0b3J5OiB2YWx1ZS5pdGVtLmFjdGlvbi53b3JraW5nX2RpcmVjdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgICBlbnY6IHZhbHVlLml0ZW0uYWN0aW9uLmVudlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7IGl0ZW1JZDogdmFsdWUuaXRlbS5pZCB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJyZWFzb25pbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVJlYXNvbmluZ1BhcnQgPSBhY3RpdmVSZWFzb25pbmdbdmFsdWUuaXRlbS5pZF07XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeVBhcnRJbmRpY2VzID0gT2JqZWN0LmVudHJpZXMoXG4gICAgICAgICAgICAgICAgICBhY3RpdmVSZWFzb25pbmdQYXJ0LnN1bW1hcnlQYXJ0c1xuICAgICAgICAgICAgICAgICkuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgKFtfLCBzdGF0dXNdKSA9PiBzdGF0dXMgPT09IFwiYWN0aXZlXCIgfHwgc3RhdHVzID09PSBcImNhbi1jb25jbHVkZVwiXG4gICAgICAgICAgICAgICAgKS5tYXAoKFtzdW1tYXJ5SW5kZXhdKSA9PiBzdW1tYXJ5SW5kZXgpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3VtbWFyeUluZGV4IG9mIHN1bW1hcnlQYXJ0SW5kaWNlcykge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmctZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBgJHt2YWx1ZS5pdGVtLmlkfToke3N1bW1hcnlJbmRleH1gLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlck1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb25pbmdFbmNyeXB0ZWRDb250ZW50OiAoX2QgPSB2YWx1ZS5pdGVtLmVuY3J5cHRlZF9jb250ZW50KSAhPSBudWxsID8gX2QgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlIGFjdGl2ZVJlYXNvbmluZ1t2YWx1ZS5pdGVtLmlkXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgY29uc3QgdG9vbENhbGwgPSBvbmdvaW5nVG9vbENhbGxzW3ZhbHVlLm91dHB1dF9pbmRleF07XG4gICAgICAgICAgICAgIGlmICh0b29sQ2FsbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1pbnB1dC1kZWx0YVwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsLnRvb2xDYWxsSWQsXG4gICAgICAgICAgICAgICAgICBkZWx0YTogdmFsdWUuZGVsdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlQ29kZUludGVycHJldGVyQ2FsbENvZGVEZWx0YUNodW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgICBjb25zdCB0b29sQ2FsbCA9IG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKHRvb2xDYWxsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBkZWx0YSBpcyBjb2RlLCB3aGljaCBpcyBlbWJlZGRpbmcgaW4gYSBKU09OIHN0cmluZy5cbiAgICAgICAgICAgICAgICAgIC8vIFRvIGVzY2FwZSBpdCwgd2UgdXNlIEpTT04uc3RyaW5naWZ5IGFuZCBzbGljZSB0byByZW1vdmUgdGhlIG91dGVyIHF1b3Rlcy5cbiAgICAgICAgICAgICAgICAgIGRlbHRhOiBKU09OLnN0cmluZ2lmeSh2YWx1ZS5kZWx0YSkuc2xpY2UoMSwgLTEpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxDb2RlRG9uZUNodW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgICBjb25zdCB0b29sQ2FsbCA9IG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKHRvb2xDYWxsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgIGRlbHRhOiAnXCJ9J1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwudG9vbENhbGxJZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdG9vbENhbGwudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvZGVfaW50ZXJwcmV0ZXJcIixcbiAgICAgICAgICAgICAgICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHZhbHVlLmNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcklkOiB0b29sQ2FsbC5jb2RlSW50ZXJwcmV0ZXIuY29udGFpbmVySWRcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VDcmVhdGVkQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlSWQgPSB2YWx1ZS5yZXNwb25zZS5pZDtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlc3BvbnNlLW1ldGFkYXRhXCIsXG4gICAgICAgICAgICAgICAgaWQ6IHZhbHVlLnJlc3BvbnNlLmlkLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUodmFsdWUucmVzcG9uc2UuY3JlYXRlZF9hdCAqIDFlMyksXG4gICAgICAgICAgICAgICAgbW9kZWxJZDogdmFsdWUucmVzcG9uc2UubW9kZWxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVGV4dERlbHRhQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW1faWQsXG4gICAgICAgICAgICAgICAgZGVsdGE6IHZhbHVlLmRlbHRhXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoKChfZiA9IChfZSA9IG9wdGlvbnMucHJvdmlkZXJPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2Uub3BlbmFpKSA9PSBudWxsID8gdm9pZCAwIDogX2YubG9ncHJvYnMpICYmIHZhbHVlLmxvZ3Byb2JzKSB7XG4gICAgICAgICAgICAgICAgbG9ncHJvYnMucHVzaCh2YWx1ZS5sb2dwcm9icyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gXCJyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV9wYXJ0LmFkZGVkXCIpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLnN1bW1hcnlfaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlUmVhc29uaW5nUGFydCA9IGFjdGl2ZVJlYXNvbmluZ1t2YWx1ZS5pdGVtX2lkXTtcbiAgICAgICAgICAgICAgICBhY3RpdmVSZWFzb25pbmdQYXJ0LnN1bW1hcnlQYXJ0c1t2YWx1ZS5zdW1tYXJ5X2luZGV4XSA9IFwiYWN0aXZlXCI7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdW1tYXJ5SW5kZXggb2YgT2JqZWN0LmtleXMoXG4gICAgICAgICAgICAgICAgICBhY3RpdmVSZWFzb25pbmdQYXJ0LnN1bW1hcnlQYXJ0c1xuICAgICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVSZWFzb25pbmdQYXJ0LnN1bW1hcnlQYXJ0c1tzdW1tYXJ5SW5kZXhdID09PSBcImNhbi1jb25jbHVkZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmctZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IGAke3ZhbHVlLml0ZW1faWR9OiR7c3VtbWFyeUluZGV4fWAsXG4gICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YTogeyBvcGVuYWk6IHsgaXRlbUlkOiB2YWx1ZS5pdGVtX2lkIH0gfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUmVhc29uaW5nUGFydC5zdW1tYXJ5UGFydHNbc3VtbWFyeUluZGV4XSA9IFwiY29uY2x1ZGVkXCI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInJlYXNvbmluZy1zdGFydFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IGAke3ZhbHVlLml0ZW1faWR9OiR7dmFsdWUuc3VtbWFyeV9pbmRleH1gLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHZhbHVlLml0ZW1faWQsXG4gICAgICAgICAgICAgICAgICAgICAgcmVhc29uaW5nRW5jcnlwdGVkQ29udGVudDogKF9oID0gKF9nID0gYWN0aXZlUmVhc29uaW5nW3ZhbHVlLml0ZW1faWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2cuZW5jcnlwdGVkQ29udGVudCkgIT0gbnVsbCA/IF9oIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gXCJyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV90ZXh0LmRlbHRhXCIpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlYXNvbmluZy1kZWx0YVwiLFxuICAgICAgICAgICAgICAgIGlkOiBgJHt2YWx1ZS5pdGVtX2lkfToke3ZhbHVlLnN1bW1hcnlfaW5kZXh9YCxcbiAgICAgICAgICAgICAgICBkZWx0YTogdmFsdWUuZGVsdGEsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogdmFsdWUuaXRlbV9pZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09IFwicmVzcG9uc2UucmVhc29uaW5nX3N1bW1hcnlfcGFydC5kb25lXCIpIHtcbiAgICAgICAgICAgICAgaWYgKHN0b3JlKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVhc29uaW5nLWVuZFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IGAke3ZhbHVlLml0ZW1faWR9OiR7dmFsdWUuc3VtbWFyeV9pbmRleH1gLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBvcGVuYWk6IHsgaXRlbUlkOiB2YWx1ZS5pdGVtX2lkIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhY3RpdmVSZWFzb25pbmdbdmFsdWUuaXRlbV9pZF0uc3VtbWFyeVBhcnRzW3ZhbHVlLnN1bW1hcnlfaW5kZXhdID0gXCJjb25jbHVkZWRcIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVSZWFzb25pbmdbdmFsdWUuaXRlbV9pZF0uc3VtbWFyeVBhcnRzW3ZhbHVlLnN1bW1hcnlfaW5kZXhdID0gXCJjYW4tY29uY2x1ZGVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlRmluaXNoZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgZmluaXNoUmVhc29uID0gbWFwT3BlbkFJUmVzcG9uc2VGaW5pc2hSZWFzb24oe1xuICAgICAgICAgICAgICAgIGZpbmlzaFJlYXNvbjogKF9pID0gdmFsdWUucmVzcG9uc2UuaW5jb21wbGV0ZV9kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2kucmVhc29uLFxuICAgICAgICAgICAgICAgIGhhc0Z1bmN0aW9uQ2FsbFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdXNhZ2UuaW5wdXRUb2tlbnMgPSB2YWx1ZS5yZXNwb25zZS51c2FnZS5pbnB1dF90b2tlbnM7XG4gICAgICAgICAgICAgIHVzYWdlLm91dHB1dFRva2VucyA9IHZhbHVlLnJlc3BvbnNlLnVzYWdlLm91dHB1dF90b2tlbnM7XG4gICAgICAgICAgICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gdmFsdWUucmVzcG9uc2UudXNhZ2UuaW5wdXRfdG9rZW5zICsgdmFsdWUucmVzcG9uc2UudXNhZ2Uub3V0cHV0X3Rva2VucztcbiAgICAgICAgICAgICAgdXNhZ2UucmVhc29uaW5nVG9rZW5zID0gKF9rID0gKF9qID0gdmFsdWUucmVzcG9uc2UudXNhZ2Uub3V0cHV0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2oucmVhc29uaW5nX3Rva2VucykgIT0gbnVsbCA/IF9rIDogdm9pZCAwO1xuICAgICAgICAgICAgICB1c2FnZS5jYWNoZWRJbnB1dFRva2VucyA9IChfbSA9IChfbCA9IHZhbHVlLnJlc3BvbnNlLnVzYWdlLmlucHV0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2wuY2FjaGVkX3Rva2VucykgIT0gbnVsbCA/IF9tIDogdm9pZCAwO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnJlc3BvbnNlLnNlcnZpY2VfdGllciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VUaWVyID0gdmFsdWUucmVzcG9uc2Uuc2VydmljZV90aWVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VBbm5vdGF0aW9uQWRkZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmFubm90YXRpb24udHlwZSA9PT0gXCJ1cmxfY2l0YXRpb25cIikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICAgICAgICAgICAgc291cmNlVHlwZTogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgIGlkOiAoX3AgPSAoX28gPSAoX24gPSBzZWxmLmNvbmZpZykuZ2VuZXJhdGVJZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9vLmNhbGwoX24pKSAhPSBudWxsID8gX3AgOiBnZW5lcmF0ZUlkMigpLFxuICAgICAgICAgICAgICAgICAgdXJsOiB2YWx1ZS5hbm5vdGF0aW9uLnVybCxcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiB2YWx1ZS5hbm5vdGF0aW9uLnRpdGxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuYW5ub3RhdGlvbi50eXBlID09PSBcImZpbGVfY2l0YXRpb25cIikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICAgICAgICAgICAgc291cmNlVHlwZTogXCJkb2N1bWVudFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IChfcyA9IChfciA9IChfcSA9IHNlbGYuY29uZmlnKS5nZW5lcmF0ZUlkKSA9PSBudWxsID8gdm9pZCAwIDogX3IuY2FsbChfcSkpICE9IG51bGwgPyBfcyA6IGdlbmVyYXRlSWQyKCksXG4gICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICAgICAgICAgICAgdGl0bGU6IChfdSA9IChfdCA9IHZhbHVlLmFubm90YXRpb24ucXVvdGUpICE9IG51bGwgPyBfdCA6IHZhbHVlLmFubm90YXRpb24uZmlsZW5hbWUpICE9IG51bGwgPyBfdSA6IFwiRG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAoX3YgPSB2YWx1ZS5hbm5vdGF0aW9uLmZpbGVuYW1lKSAhPSBudWxsID8gX3YgOiB2YWx1ZS5hbm5vdGF0aW9uLmZpbGVfaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Vycm9yQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmx1c2goY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VJZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGxvZ3Byb2JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkubG9ncHJvYnMgPSBsb2dwcm9icztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXJ2aWNlVGllciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLnNlcnZpY2VUaWVyID0gc2VydmljZVRpZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICB0eXBlOiBcImZpbmlzaFwiLFxuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24sXG4gICAgICAgICAgICAgIHVzYWdlLFxuICAgICAgICAgICAgICBwcm92aWRlck1ldGFkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgcmVxdWVzdDogeyBib2R5IH0sXG4gICAgICByZXNwb25zZTogeyBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMgfVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBpc1RleHREZWx0YUNodW5rKGNodW5rKSB7XG4gIHJldHVybiBjaHVuay50eXBlID09PSBcInJlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlT3V0cHV0SXRlbURvbmVDaHVuayhjaHVuaykge1xuICByZXR1cm4gY2h1bmsudHlwZSA9PT0gXCJyZXNwb25zZS5vdXRwdXRfaXRlbS5kb25lXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlRmluaXNoZWRDaHVuayhjaHVuaykge1xuICByZXR1cm4gY2h1bmsudHlwZSA9PT0gXCJyZXNwb25zZS5jb21wbGV0ZWRcIiB8fCBjaHVuay50eXBlID09PSBcInJlc3BvbnNlLmluY29tcGxldGVcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VDcmVhdGVkQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2UuY3JlYXRlZFwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGFcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsQ29kZURlbHRhQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2UuY29kZV9pbnRlcnByZXRlcl9jYWxsX2NvZGUuZGVsdGFcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsQ29kZURvbmVDaHVuayhjaHVuaykge1xuICByZXR1cm4gY2h1bmsudHlwZSA9PT0gXCJyZXNwb25zZS5jb2RlX2ludGVycHJldGVyX2NhbGxfY29kZS5kb25lXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlT3V0cHV0SXRlbUFkZGVkQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWRcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VBbm5vdGF0aW9uQWRkZWRDaHVuayhjaHVuaykge1xuICByZXR1cm4gY2h1bmsudHlwZSA9PT0gXCJyZXNwb25zZS5vdXRwdXRfdGV4dC5hbm5vdGF0aW9uLmFkZGVkXCI7XG59XG5mdW5jdGlvbiBpc0Vycm9yQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwiZXJyb3JcIjtcbn1cbmZ1bmN0aW9uIGdldFJlc3BvbnNlc01vZGVsQ29uZmlnKG1vZGVsSWQpIHtcbiAgY29uc3Qgc3VwcG9ydHNGbGV4UHJvY2Vzc2luZzIgPSBtb2RlbElkLnN0YXJ0c1dpdGgoXCJvM1wiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJvNC1taW5pXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01XCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1jaGF0XCIpO1xuICBjb25zdCBzdXBwb3J0c1ByaW9yaXR5UHJvY2Vzc2luZzIgPSBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNFwiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1taW5pXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01XCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1uYW5vXCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1jaGF0XCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm8zXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm80LW1pbmlcIik7XG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcInN5c3RlbVwiLFxuICAgIHN1cHBvcnRzRmxleFByb2Nlc3Npbmc6IHN1cHBvcnRzRmxleFByb2Nlc3NpbmcyLFxuICAgIHN1cHBvcnRzUHJpb3JpdHlQcm9jZXNzaW5nOiBzdXBwb3J0c1ByaW9yaXR5UHJvY2Vzc2luZzJcbiAgfTtcbiAgaWYgKG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGVmYXVsdHMsXG4gICAgICBpc1JlYXNvbmluZ01vZGVsOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgaWYgKG1vZGVsSWQuc3RhcnRzV2l0aChcIm9cIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTVcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiY29kZXgtXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcImNvbXB1dGVyLXVzZVwiKSkge1xuICAgIGlmIChtb2RlbElkLnN0YXJ0c1dpdGgoXCJvMS1taW5pXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm8xLXByZXZpZXdcIikpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRlZmF1bHRzLFxuICAgICAgICBpc1JlYXNvbmluZ01vZGVsOiB0cnVlLFxuICAgICAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJyZW1vdmVcIlxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmRlZmF1bHRzLFxuICAgICAgaXNSZWFzb25pbmdNb2RlbDogdHJ1ZSxcbiAgICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcImRldmVsb3BlclwiXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLmRlZmF1bHRzLFxuICAgIGlzUmVhc29uaW5nTW9kZWw6IGZhbHNlXG4gIH07XG59XG5mdW5jdGlvbiBtYXBXZWJTZWFyY2hPdXRwdXQoYWN0aW9uKSB7XG4gIHZhciBfYTtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgXCJzZWFyY2hcIjpcbiAgICAgIHJldHVybiB7IGFjdGlvbjogeyB0eXBlOiBcInNlYXJjaFwiLCBxdWVyeTogKF9hID0gYWN0aW9uLnF1ZXJ5KSAhPSBudWxsID8gX2EgOiB2b2lkIDAgfSB9O1xuICAgIGNhc2UgXCJvcGVuX3BhZ2VcIjpcbiAgICAgIHJldHVybiB7IGFjdGlvbjogeyB0eXBlOiBcIm9wZW5QYWdlXCIsIHVybDogYWN0aW9uLnVybCB9IH07XG4gICAgY2FzZSBcImZpbmRcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjdGlvbjogeyB0eXBlOiBcImZpbmRcIiwgdXJsOiBhY3Rpb24udXJsLCBwYXR0ZXJuOiBhY3Rpb24ucGF0dGVybiB9XG4gICAgICB9O1xuICB9XG59XG5cbi8vIHNyYy9zcGVlY2gvb3BlbmFpLXNwZWVjaC1tb2RlbC50c1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnM2LFxuICBjcmVhdGVCaW5hcnlSZXNwb25zZUhhbmRsZXIsXG4gIHBhcnNlUHJvdmlkZXJPcHRpb25zIGFzIHBhcnNlUHJvdmlkZXJPcHRpb25zNixcbiAgcG9zdEpzb25Ub0FwaSBhcyBwb3N0SnNvblRvQXBpNlxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuXG4vLyBzcmMvc3BlZWNoL29wZW5haS1zcGVlY2gtb3B0aW9ucy50c1xuaW1wb3J0IHtcbiAgbGF6eVZhbGlkYXRvciBhcyBsYXp5VmFsaWRhdG9yMTAsXG4gIHpvZFNjaGVtYSBhcyB6b2RTY2hlbWExNlxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6MTggfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgb3BlbmFpU3BlZWNoUHJvdmlkZXJPcHRpb25zU2NoZW1hID0gbGF6eVZhbGlkYXRvcjEwKFxuICAoKSA9PiB6b2RTY2hlbWExNihcbiAgICB6MTgub2JqZWN0KHtcbiAgICAgIGluc3RydWN0aW9uczogejE4LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgIHNwZWVkOiB6MTgubnVtYmVyKCkubWluKDAuMjUpLm1heCg0KS5kZWZhdWx0KDEpLm51bGxpc2goKVxuICAgIH0pXG4gIClcbik7XG5cbi8vIHNyYy9zcGVlY2gvb3BlbmFpLXNwZWVjaC1tb2RlbC50c1xudmFyIE9wZW5BSVNwZWVjaE1vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuc3BlY2lmaWNhdGlvblZlcnNpb24gPSBcInYyXCI7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBhc3luYyBnZXRBcmdzKHtcbiAgICB0ZXh0LFxuICAgIHZvaWNlID0gXCJhbGxveVwiLFxuICAgIG91dHB1dEZvcm1hdCA9IFwibXAzXCIsXG4gICAgc3BlZWQsXG4gICAgaW5zdHJ1Y3Rpb25zLFxuICAgIGxhbmd1YWdlLFxuICAgIHByb3ZpZGVyT3B0aW9uc1xuICB9KSB7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgICBjb25zdCBvcGVuQUlPcHRpb25zID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnM2KHtcbiAgICAgIHByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgcHJvdmlkZXJPcHRpb25zLFxuICAgICAgc2NoZW1hOiBvcGVuYWlTcGVlY2hQcm92aWRlck9wdGlvbnNTY2hlbWFcbiAgICB9KTtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHtcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsSWQsXG4gICAgICBpbnB1dDogdGV4dCxcbiAgICAgIHZvaWNlLFxuICAgICAgcmVzcG9uc2VfZm9ybWF0OiBcIm1wM1wiLFxuICAgICAgc3BlZWQsXG4gICAgICBpbnN0cnVjdGlvbnNcbiAgICB9O1xuICAgIGlmIChvdXRwdXRGb3JtYXQpIHtcbiAgICAgIGlmIChbXCJtcDNcIiwgXCJvcHVzXCIsIFwiYWFjXCIsIFwiZmxhY1wiLCBcIndhdlwiLCBcInBjbVwiXS5pbmNsdWRlcyhvdXRwdXRGb3JtYXQpKSB7XG4gICAgICAgIHJlcXVlc3RCb2R5LnJlc3BvbnNlX2Zvcm1hdCA9IG91dHB1dEZvcm1hdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICAgIHNldHRpbmc6IFwib3V0cHV0Rm9ybWF0XCIsXG4gICAgICAgICAgZGV0YWlsczogYFVuc3VwcG9ydGVkIG91dHB1dCBmb3JtYXQ6ICR7b3V0cHV0Rm9ybWF0fS4gVXNpbmcgbXAzIGluc3RlYWQuYFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wZW5BSU9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHNwZWVjaE1vZGVsT3B0aW9ucyA9IHt9O1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gc3BlZWNoTW9kZWxPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3BlZWNoTW9kZWxPcHRpb25zW2tleV07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmVxdWVzdEJvZHlba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYW5ndWFnZSkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcImxhbmd1YWdlXCIsXG4gICAgICAgIGRldGFpbHM6IGBPcGVuQUkgc3BlZWNoIG1vZGVscyBkbyBub3Qgc3VwcG9ydCBsYW5ndWFnZSBzZWxlY3Rpb24uIExhbmd1YWdlIHBhcmFtZXRlciBcIiR7bGFuZ3VhZ2V9XCIgd2FzIGlnbm9yZWQuYFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByZXF1ZXN0Qm9keSxcbiAgICAgIHdhcm5pbmdzXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb0dlbmVyYXRlKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IChfYyA9IChfYiA9IChfYSA9IHRoaXMuY29uZmlnLl9pbnRlcm5hbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmN1cnJlbnREYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSkpICE9IG51bGwgPyBfYyA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHsgcmVxdWVzdEJvZHksIHdhcm5pbmdzIH0gPSBhd2FpdCB0aGlzLmdldEFyZ3Mob3B0aW9ucyk7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWU6IGF1ZGlvLFxuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgcmF3VmFsdWU6IHJhd1Jlc3BvbnNlXG4gICAgfSA9IGF3YWl0IHBvc3RKc29uVG9BcGk2KHtcbiAgICAgIHVybDogdGhpcy5jb25maWcudXJsKHtcbiAgICAgICAgcGF0aDogXCIvYXVkaW8vc3BlZWNoXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczYodGhpcy5jb25maWcuaGVhZGVycygpLCBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgYm9keTogcmVxdWVzdEJvZHksXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUJpbmFyeVJlc3BvbnNlSGFuZGxlcigpLFxuICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICBmZXRjaDogdGhpcy5jb25maWcuZmV0Y2hcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgYXVkaW8sXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHJlcXVlc3Q6IHtcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpXG4gICAgICB9LFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgdGltZXN0YW1wOiBjdXJyZW50RGF0ZSxcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkLFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGJvZHk6IHJhd1Jlc3BvbnNlXG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gc3JjL3RyYW5zY3JpcHRpb24vb3BlbmFpLXRyYW5zY3JpcHRpb24tbW9kZWwudHNcbmltcG9ydCB7XG4gIGNvbWJpbmVIZWFkZXJzIGFzIGNvbWJpbmVIZWFkZXJzNyxcbiAgY29udmVydEJhc2U2NFRvVWludDhBcnJheSxcbiAgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlciBhcyBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyNixcbiAgbWVkaWFUeXBlVG9FeHRlbnNpb24sXG4gIHBhcnNlUHJvdmlkZXJPcHRpb25zIGFzIHBhcnNlUHJvdmlkZXJPcHRpb25zNyxcbiAgcG9zdEZvcm1EYXRhVG9BcGlcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcblxuLy8gc3JjL3RyYW5zY3JpcHRpb24vb3BlbmFpLXRyYW5zY3JpcHRpb24tYXBpLnRzXG5pbXBvcnQgeyBsYXp5VmFsaWRhdG9yIGFzIGxhenlWYWxpZGF0b3IxMSwgem9kU2NoZW1hIGFzIHpvZFNjaGVtYTE3IH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejE5IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haVRyYW5zY3JpcHRpb25SZXNwb25zZVNjaGVtYSA9IGxhenlWYWxpZGF0b3IxMShcbiAgKCkgPT4gem9kU2NoZW1hMTcoXG4gICAgejE5Lm9iamVjdCh7XG4gICAgICB0ZXh0OiB6MTkuc3RyaW5nKCksXG4gICAgICBsYW5ndWFnZTogejE5LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgIGR1cmF0aW9uOiB6MTkubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgd29yZHM6IHoxOS5hcnJheShcbiAgICAgICAgejE5Lm9iamVjdCh7XG4gICAgICAgICAgd29yZDogejE5LnN0cmluZygpLFxuICAgICAgICAgIHN0YXJ0OiB6MTkubnVtYmVyKCksXG4gICAgICAgICAgZW5kOiB6MTkubnVtYmVyKClcbiAgICAgICAgfSlcbiAgICAgICkubnVsbGlzaCgpLFxuICAgICAgc2VnbWVudHM6IHoxOS5hcnJheShcbiAgICAgICAgejE5Lm9iamVjdCh7XG4gICAgICAgICAgaWQ6IHoxOS5udW1iZXIoKSxcbiAgICAgICAgICBzZWVrOiB6MTkubnVtYmVyKCksXG4gICAgICAgICAgc3RhcnQ6IHoxOS5udW1iZXIoKSxcbiAgICAgICAgICBlbmQ6IHoxOS5udW1iZXIoKSxcbiAgICAgICAgICB0ZXh0OiB6MTkuc3RyaW5nKCksXG4gICAgICAgICAgdG9rZW5zOiB6MTkuYXJyYXkoejE5Lm51bWJlcigpKSxcbiAgICAgICAgICB0ZW1wZXJhdHVyZTogejE5Lm51bWJlcigpLFxuICAgICAgICAgIGF2Z19sb2dwcm9iOiB6MTkubnVtYmVyKCksXG4gICAgICAgICAgY29tcHJlc3Npb25fcmF0aW86IHoxOS5udW1iZXIoKSxcbiAgICAgICAgICBub19zcGVlY2hfcHJvYjogejE5Lm51bWJlcigpXG4gICAgICAgIH0pXG4gICAgICApLm51bGxpc2goKVxuICAgIH0pXG4gIClcbik7XG5cbi8vIHNyYy90cmFuc2NyaXB0aW9uL29wZW5haS10cmFuc2NyaXB0aW9uLW9wdGlvbnMudHNcbmltcG9ydCB7XG4gIGxhenlWYWxpZGF0b3IgYXMgbGF6eVZhbGlkYXRvcjEyLFxuICB6b2RTY2hlbWEgYXMgem9kU2NoZW1hMThcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejIwIH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5BSVRyYW5zY3JpcHRpb25Qcm92aWRlck9wdGlvbnMgPSBsYXp5VmFsaWRhdG9yMTIoXG4gICgpID0+IHpvZFNjaGVtYTE4KFxuICAgIHoyMC5vYmplY3Qoe1xuICAgICAgLyoqXG4gICAgICAgKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIHRvIGluY2x1ZGUgaW4gdGhlIHRyYW5zY3JpcHRpb24gcmVzcG9uc2UuXG4gICAgICAgKi9cbiAgICAgIGluY2x1ZGU6IHoyMC5hcnJheSh6MjAuc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8gaW4gSVNPLTYzOS0xIGZvcm1hdC5cbiAgICAgICAqL1xuICAgICAgbGFuZ3VhZ2U6IHoyMC5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgLyoqXG4gICAgICAgKiBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbCdzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC5cbiAgICAgICAqL1xuICAgICAgcHJvbXB0OiB6MjAuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICAgKiBAZGVmYXVsdCAwXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlOiB6MjAubnVtYmVyKCkubWluKDApLm1heCgxKS5kZWZhdWx0KDApLm9wdGlvbmFsKCksXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0aW1lc3RhbXAgZ3JhbnVsYXJpdGllcyB0byBwb3B1bGF0ZSBmb3IgdGhpcyB0cmFuc2NyaXB0aW9uLlxuICAgICAgICogQGRlZmF1bHQgWydzZWdtZW50J11cbiAgICAgICAqL1xuICAgICAgdGltZXN0YW1wR3JhbnVsYXJpdGllczogejIwLmFycmF5KHoyMC5lbnVtKFtcIndvcmRcIiwgXCJzZWdtZW50XCJdKSkuZGVmYXVsdChbXCJzZWdtZW50XCJdKS5vcHRpb25hbCgpXG4gICAgfSlcbiAgKVxuKTtcblxuLy8gc3JjL3RyYW5zY3JpcHRpb24vb3BlbmFpLXRyYW5zY3JpcHRpb24tbW9kZWwudHNcbnZhciBsYW5ndWFnZU1hcCA9IHtcbiAgYWZyaWthYW5zOiBcImFmXCIsXG4gIGFyYWJpYzogXCJhclwiLFxuICBhcm1lbmlhbjogXCJoeVwiLFxuICBhemVyYmFpamFuaTogXCJhelwiLFxuICBiZWxhcnVzaWFuOiBcImJlXCIsXG4gIGJvc25pYW46IFwiYnNcIixcbiAgYnVsZ2FyaWFuOiBcImJnXCIsXG4gIGNhdGFsYW46IFwiY2FcIixcbiAgY2hpbmVzZTogXCJ6aFwiLFxuICBjcm9hdGlhbjogXCJoclwiLFxuICBjemVjaDogXCJjc1wiLFxuICBkYW5pc2g6IFwiZGFcIixcbiAgZHV0Y2g6IFwibmxcIixcbiAgZW5nbGlzaDogXCJlblwiLFxuICBlc3RvbmlhbjogXCJldFwiLFxuICBmaW5uaXNoOiBcImZpXCIsXG4gIGZyZW5jaDogXCJmclwiLFxuICBnYWxpY2lhbjogXCJnbFwiLFxuICBnZXJtYW46IFwiZGVcIixcbiAgZ3JlZWs6IFwiZWxcIixcbiAgaGVicmV3OiBcImhlXCIsXG4gIGhpbmRpOiBcImhpXCIsXG4gIGh1bmdhcmlhbjogXCJodVwiLFxuICBpY2VsYW5kaWM6IFwiaXNcIixcbiAgaW5kb25lc2lhbjogXCJpZFwiLFxuICBpdGFsaWFuOiBcIml0XCIsXG4gIGphcGFuZXNlOiBcImphXCIsXG4gIGthbm5hZGE6IFwia25cIixcbiAga2F6YWtoOiBcImtrXCIsXG4gIGtvcmVhbjogXCJrb1wiLFxuICBsYXR2aWFuOiBcImx2XCIsXG4gIGxpdGh1YW5pYW46IFwibHRcIixcbiAgbWFjZWRvbmlhbjogXCJta1wiLFxuICBtYWxheTogXCJtc1wiLFxuICBtYXJhdGhpOiBcIm1yXCIsXG4gIG1hb3JpOiBcIm1pXCIsXG4gIG5lcGFsaTogXCJuZVwiLFxuICBub3J3ZWdpYW46IFwibm9cIixcbiAgcGVyc2lhbjogXCJmYVwiLFxuICBwb2xpc2g6IFwicGxcIixcbiAgcG9ydHVndWVzZTogXCJwdFwiLFxuICByb21hbmlhbjogXCJyb1wiLFxuICBydXNzaWFuOiBcInJ1XCIsXG4gIHNlcmJpYW46IFwic3JcIixcbiAgc2xvdmFrOiBcInNrXCIsXG4gIHNsb3ZlbmlhbjogXCJzbFwiLFxuICBzcGFuaXNoOiBcImVzXCIsXG4gIHN3YWhpbGk6IFwic3dcIixcbiAgc3dlZGlzaDogXCJzdlwiLFxuICB0YWdhbG9nOiBcInRsXCIsXG4gIHRhbWlsOiBcInRhXCIsXG4gIHRoYWk6IFwidGhcIixcbiAgdHVya2lzaDogXCJ0clwiLFxuICB1a3JhaW5pYW46IFwidWtcIixcbiAgdXJkdTogXCJ1clwiLFxuICB2aWV0bmFtZXNlOiBcInZpXCIsXG4gIHdlbHNoOiBcImN5XCJcbn07XG52YXIgT3BlbkFJVHJhbnNjcmlwdGlvbk1vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuc3BlY2lmaWNhdGlvblZlcnNpb24gPSBcInYyXCI7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBhc3luYyBnZXRBcmdzKHtcbiAgICBhdWRpbyxcbiAgICBtZWRpYVR5cGUsXG4gICAgcHJvdmlkZXJPcHRpb25zXG4gIH0pIHtcbiAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuICAgIGNvbnN0IG9wZW5BSU9wdGlvbnMgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczcoe1xuICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICBzY2hlbWE6IG9wZW5BSVRyYW5zY3JpcHRpb25Qcm92aWRlck9wdGlvbnNcbiAgICB9KTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGNvbnN0IGJsb2IgPSBhdWRpbyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBuZXcgQmxvYihbYXVkaW9dKSA6IG5ldyBCbG9iKFtjb252ZXJ0QmFzZTY0VG9VaW50OEFycmF5KGF1ZGlvKV0pO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcIm1vZGVsXCIsIHRoaXMubW9kZWxJZCk7XG4gICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IG1lZGlhVHlwZVRvRXh0ZW5zaW9uKG1lZGlhVHlwZSk7XG4gICAgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgXCJmaWxlXCIsXG4gICAgICBuZXcgRmlsZShbYmxvYl0sIFwiYXVkaW9cIiwgeyB0eXBlOiBtZWRpYVR5cGUgfSksXG4gICAgICBgYXVkaW8uJHtmaWxlRXh0ZW5zaW9ufWBcbiAgICApO1xuICAgIGlmIChvcGVuQUlPcHRpb25zKSB7XG4gICAgICBjb25zdCB0cmFuc2NyaXB0aW9uTW9kZWxPcHRpb25zID0ge1xuICAgICAgICBpbmNsdWRlOiBvcGVuQUlPcHRpb25zLmluY2x1ZGUsXG4gICAgICAgIGxhbmd1YWdlOiBvcGVuQUlPcHRpb25zLmxhbmd1YWdlLFxuICAgICAgICBwcm9tcHQ6IG9wZW5BSU9wdGlvbnMucHJvbXB0LFxuICAgICAgICAvLyBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2F1ZGlvL2NyZWF0ZVRyYW5zY3JpcHRpb24jYXVkaW9fY3JlYXRldHJhbnNjcmlwdGlvbi1yZXNwb25zZV9mb3JtYXRcbiAgICAgICAgLy8gcHJlZmVyIHZlcmJvc2VfanNvbiB0byBnZXQgc2VnbWVudHMgZm9yIG1vZGVscyB0aGF0IHN1cHBvcnQgaXRcbiAgICAgICAgcmVzcG9uc2VfZm9ybWF0OiBbXG4gICAgICAgICAgXCJncHQtNG8tdHJhbnNjcmliZVwiLFxuICAgICAgICAgIFwiZ3B0LTRvLW1pbmktdHJhbnNjcmliZVwiXG4gICAgICAgIF0uaW5jbHVkZXModGhpcy5tb2RlbElkKSA/IFwianNvblwiIDogXCJ2ZXJib3NlX2pzb25cIixcbiAgICAgICAgdGVtcGVyYXR1cmU6IG9wZW5BSU9wdGlvbnMudGVtcGVyYXR1cmUsXG4gICAgICAgIHRpbWVzdGFtcF9ncmFudWxhcml0aWVzOiBvcGVuQUlPcHRpb25zLnRpbWVzdGFtcEdyYW51bGFyaXRpZXNcbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0cmFuc2NyaXB0aW9uTW9kZWxPcHRpb25zKSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChgJHtrZXl9W11gLCBTdHJpbmcoaXRlbSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgd2FybmluZ3NcbiAgICB9O1xuICB9XG4gIGFzeW5jIGRvR2VuZXJhdGUob3B0aW9ucykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgY29uc3QgY3VycmVudERhdGUgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLmNvbmZpZy5faW50ZXJuYWwpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jdXJyZW50RGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpKSAhPSBudWxsID8gX2MgOiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICBjb25zdCB7IGZvcm1EYXRhLCB3YXJuaW5ncyB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgIHJhd1ZhbHVlOiByYXdSZXNwb25zZVxuICAgIH0gPSBhd2FpdCBwb3N0Rm9ybURhdGFUb0FwaSh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2F1ZGlvL3RyYW5zY3JpcHRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczcodGhpcy5jb25maWcuaGVhZGVycygpLCBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXI2KFxuICAgICAgICBvcGVuYWlUcmFuc2NyaXB0aW9uUmVzcG9uc2VTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gcmVzcG9uc2UubGFuZ3VhZ2UgIT0gbnVsbCAmJiByZXNwb25zZS5sYW5ndWFnZSBpbiBsYW5ndWFnZU1hcCA/IGxhbmd1YWdlTWFwW3Jlc3BvbnNlLmxhbmd1YWdlXSA6IHZvaWQgMDtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogcmVzcG9uc2UudGV4dCxcbiAgICAgIHNlZ21lbnRzOiAoX2cgPSAoX2YgPSAoX2QgPSByZXNwb25zZS5zZWdtZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLm1hcCgoc2VnbWVudCkgPT4gKHtcbiAgICAgICAgdGV4dDogc2VnbWVudC50ZXh0LFxuICAgICAgICBzdGFydFNlY29uZDogc2VnbWVudC5zdGFydCxcbiAgICAgICAgZW5kU2Vjb25kOiBzZWdtZW50LmVuZFxuICAgICAgfSkpKSAhPSBudWxsID8gX2YgOiAoX2UgPSByZXNwb25zZS53b3JkcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLm1hcCgod29yZCkgPT4gKHtcbiAgICAgICAgdGV4dDogd29yZC53b3JkLFxuICAgICAgICBzdGFydFNlY29uZDogd29yZC5zdGFydCxcbiAgICAgICAgZW5kU2Vjb25kOiB3b3JkLmVuZFxuICAgICAgfSkpKSAhPSBudWxsID8gX2cgOiBbXSxcbiAgICAgIGxhbmd1YWdlLFxuICAgICAgZHVyYXRpb25JblNlY29uZHM6IChfaCA9IHJlc3BvbnNlLmR1cmF0aW9uKSAhPSBudWxsID8gX2ggOiB2b2lkIDAsXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIHRpbWVzdGFtcDogY3VycmVudERhdGUsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBib2R5OiByYXdSZXNwb25zZVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbi8vIHNyYy92ZXJzaW9uLnRzXG52YXIgVkVSU0lPTiA9IHRydWUgPyBcIjIuMC41M1wiIDogXCIwLjAuMC10ZXN0XCI7XG5cbi8vIHNyYy9vcGVuYWktcHJvdmlkZXIudHNcbmZ1bmN0aW9uIGNyZWF0ZU9wZW5BSShvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgYmFzZVVSTCA9IChfYSA9IHdpdGhvdXRUcmFpbGluZ1NsYXNoKFxuICAgIGxvYWRPcHRpb25hbFNldHRpbmcoe1xuICAgICAgc2V0dGluZ1ZhbHVlOiBvcHRpb25zLmJhc2VVUkwsXG4gICAgICBlbnZpcm9ubWVudFZhcmlhYmxlTmFtZTogXCJPUEVOQUlfQkFTRV9VUkxcIlxuICAgIH0pXG4gICkpICE9IG51bGwgPyBfYSA6IFwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MVwiO1xuICBjb25zdCBwcm92aWRlck5hbWUgPSAoX2IgPSBvcHRpb25zLm5hbWUpICE9IG51bGwgPyBfYiA6IFwib3BlbmFpXCI7XG4gIGNvbnN0IGdldEhlYWRlcnMgPSAoKSA9PiB3aXRoVXNlckFnZW50U3VmZml4KFxuICAgIHtcbiAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtsb2FkQXBpS2V5KHtcbiAgICAgICAgYXBpS2V5OiBvcHRpb25zLmFwaUtleSxcbiAgICAgICAgZW52aXJvbm1lbnRWYXJpYWJsZU5hbWU6IFwiT1BFTkFJX0FQSV9LRVlcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiT3BlbkFJXCJcbiAgICAgIH0pfWAsXG4gICAgICBcIk9wZW5BSS1Pcmdhbml6YXRpb25cIjogb3B0aW9ucy5vcmdhbml6YXRpb24sXG4gICAgICBcIk9wZW5BSS1Qcm9qZWN0XCI6IG9wdGlvbnMucHJvamVjdCxcbiAgICAgIC4uLm9wdGlvbnMuaGVhZGVyc1xuICAgIH0sXG4gICAgYGFpLXNkay9vcGVuYWkvJHtWRVJTSU9OfWBcbiAgKTtcbiAgY29uc3QgY3JlYXRlQ2hhdE1vZGVsID0gKG1vZGVsSWQpID0+IG5ldyBPcGVuQUlDaGF0TGFuZ3VhZ2VNb2RlbChtb2RlbElkLCB7XG4gICAgcHJvdmlkZXI6IGAke3Byb3ZpZGVyTmFtZX0uY2hhdGAsXG4gICAgdXJsOiAoeyBwYXRoIH0pID0+IGAke2Jhc2VVUkx9JHtwYXRofWAsXG4gICAgaGVhZGVyczogZ2V0SGVhZGVycyxcbiAgICBmZXRjaDogb3B0aW9ucy5mZXRjaFxuICB9KTtcbiAgY29uc3QgY3JlYXRlQ29tcGxldGlvbk1vZGVsID0gKG1vZGVsSWQpID0+IG5ldyBPcGVuQUlDb21wbGV0aW9uTGFuZ3VhZ2VNb2RlbChtb2RlbElkLCB7XG4gICAgcHJvdmlkZXI6IGAke3Byb3ZpZGVyTmFtZX0uY29tcGxldGlvbmAsXG4gICAgdXJsOiAoeyBwYXRoIH0pID0+IGAke2Jhc2VVUkx9JHtwYXRofWAsXG4gICAgaGVhZGVyczogZ2V0SGVhZGVycyxcbiAgICBmZXRjaDogb3B0aW9ucy5mZXRjaFxuICB9KTtcbiAgY29uc3QgY3JlYXRlRW1iZWRkaW5nTW9kZWwgPSAobW9kZWxJZCkgPT4gbmV3IE9wZW5BSUVtYmVkZGluZ01vZGVsKG1vZGVsSWQsIHtcbiAgICBwcm92aWRlcjogYCR7cHJvdmlkZXJOYW1lfS5lbWJlZGRpbmdgLFxuICAgIHVybDogKHsgcGF0aCB9KSA9PiBgJHtiYXNlVVJMfSR7cGF0aH1gLFxuICAgIGhlYWRlcnM6IGdldEhlYWRlcnMsXG4gICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2hcbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZUltYWdlTW9kZWwgPSAobW9kZWxJZCkgPT4gbmV3IE9wZW5BSUltYWdlTW9kZWwobW9kZWxJZCwge1xuICAgIHByb3ZpZGVyOiBgJHtwcm92aWRlck5hbWV9LmltYWdlYCxcbiAgICB1cmw6ICh7IHBhdGggfSkgPT4gYCR7YmFzZVVSTH0ke3BhdGh9YCxcbiAgICBoZWFkZXJzOiBnZXRIZWFkZXJzLFxuICAgIGZldGNoOiBvcHRpb25zLmZldGNoXG4gIH0pO1xuICBjb25zdCBjcmVhdGVUcmFuc2NyaXB0aW9uTW9kZWwgPSAobW9kZWxJZCkgPT4gbmV3IE9wZW5BSVRyYW5zY3JpcHRpb25Nb2RlbChtb2RlbElkLCB7XG4gICAgcHJvdmlkZXI6IGAke3Byb3ZpZGVyTmFtZX0udHJhbnNjcmlwdGlvbmAsXG4gICAgdXJsOiAoeyBwYXRoIH0pID0+IGAke2Jhc2VVUkx9JHtwYXRofWAsXG4gICAgaGVhZGVyczogZ2V0SGVhZGVycyxcbiAgICBmZXRjaDogb3B0aW9ucy5mZXRjaFxuICB9KTtcbiAgY29uc3QgY3JlYXRlU3BlZWNoTW9kZWwgPSAobW9kZWxJZCkgPT4gbmV3IE9wZW5BSVNwZWVjaE1vZGVsKG1vZGVsSWQsIHtcbiAgICBwcm92aWRlcjogYCR7cHJvdmlkZXJOYW1lfS5zcGVlY2hgLFxuICAgIHVybDogKHsgcGF0aCB9KSA9PiBgJHtiYXNlVVJMfSR7cGF0aH1gLFxuICAgIGhlYWRlcnM6IGdldEhlYWRlcnMsXG4gICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2hcbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZUxhbmd1YWdlTW9kZWwgPSAobW9kZWxJZCkgPT4ge1xuICAgIGlmIChuZXcudGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiVGhlIE9wZW5BSSBtb2RlbCBmdW5jdGlvbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggdGhlIG5ldyBrZXl3b3JkLlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUmVzcG9uc2VzTW9kZWwobW9kZWxJZCk7XG4gIH07XG4gIGNvbnN0IGNyZWF0ZVJlc3BvbnNlc01vZGVsID0gKG1vZGVsSWQpID0+IHtcbiAgICByZXR1cm4gbmV3IE9wZW5BSVJlc3BvbnNlc0xhbmd1YWdlTW9kZWwobW9kZWxJZCwge1xuICAgICAgcHJvdmlkZXI6IGAke3Byb3ZpZGVyTmFtZX0ucmVzcG9uc2VzYCxcbiAgICAgIHVybDogKHsgcGF0aCB9KSA9PiBgJHtiYXNlVVJMfSR7cGF0aH1gLFxuICAgICAgaGVhZGVyczogZ2V0SGVhZGVycyxcbiAgICAgIGZldGNoOiBvcHRpb25zLmZldGNoLFxuICAgICAgZmlsZUlkUHJlZml4ZXM6IFtcImZpbGUtXCJdXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHByb3ZpZGVyID0gZnVuY3Rpb24obW9kZWxJZCkge1xuICAgIHJldHVybiBjcmVhdGVMYW5ndWFnZU1vZGVsKG1vZGVsSWQpO1xuICB9O1xuICBwcm92aWRlci5sYW5ndWFnZU1vZGVsID0gY3JlYXRlTGFuZ3VhZ2VNb2RlbDtcbiAgcHJvdmlkZXIuY2hhdCA9IGNyZWF0ZUNoYXRNb2RlbDtcbiAgcHJvdmlkZXIuY29tcGxldGlvbiA9IGNyZWF0ZUNvbXBsZXRpb25Nb2RlbDtcbiAgcHJvdmlkZXIucmVzcG9uc2VzID0gY3JlYXRlUmVzcG9uc2VzTW9kZWw7XG4gIHByb3ZpZGVyLmVtYmVkZGluZyA9IGNyZWF0ZUVtYmVkZGluZ01vZGVsO1xuICBwcm92aWRlci50ZXh0RW1iZWRkaW5nID0gY3JlYXRlRW1iZWRkaW5nTW9kZWw7XG4gIHByb3ZpZGVyLnRleHRFbWJlZGRpbmdNb2RlbCA9IGNyZWF0ZUVtYmVkZGluZ01vZGVsO1xuICBwcm92aWRlci5pbWFnZSA9IGNyZWF0ZUltYWdlTW9kZWw7XG4gIHByb3ZpZGVyLmltYWdlTW9kZWwgPSBjcmVhdGVJbWFnZU1vZGVsO1xuICBwcm92aWRlci50cmFuc2NyaXB0aW9uID0gY3JlYXRlVHJhbnNjcmlwdGlvbk1vZGVsO1xuICBwcm92aWRlci50cmFuc2NyaXB0aW9uTW9kZWwgPSBjcmVhdGVUcmFuc2NyaXB0aW9uTW9kZWw7XG4gIHByb3ZpZGVyLnNwZWVjaCA9IGNyZWF0ZVNwZWVjaE1vZGVsO1xuICBwcm92aWRlci5zcGVlY2hNb2RlbCA9IGNyZWF0ZVNwZWVjaE1vZGVsO1xuICBwcm92aWRlci50b29scyA9IG9wZW5haVRvb2xzO1xuICByZXR1cm4gcHJvdmlkZXI7XG59XG52YXIgb3BlbmFpID0gY3JlYXRlT3BlbkFJKCk7XG5leHBvcnQge1xuICBWRVJTSU9OLFxuICBjcmVhdGVPcGVuQUksXG4gIG9wZW5haVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@ai-sdk+openai@2.0.53_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ })

};
;